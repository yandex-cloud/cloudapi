syntax = "proto3";

package yandex.cloud.certificatemanager.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/access/access.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/certificatemanager/v1/certificate.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/certificatemanager/v1;certificatemanager";
option java_package = "yandex.cloud.api.certificatemanager.v1";

// A set of methods for managing certificates.
service CertificateService {

  // Returns the specified certificate.
  //
  // To get the list of available certificates, make a [List] request.
  rpc Get(GetCertificateRequest) returns (Certificate) {
    option (google.api.http) = {get: "/certificate-manager/v1/certificates/{certificate_id}"};
  }

  // Returns the list of certificates in the specified folder.
  rpc List(ListCertificatesRequest) returns (ListCertificatesResponse) {
    option (google.api.http) = {get: "/certificate-manager/v1/certificates"};
  }

  rpc ListVersions(ListVersionsRequest) returns (ListVersionsResponse) {
    option (google.api.http) = {get: "/certificate-manager/v1/certificates/{certificate_id}/versions"};
  }

  // Creates a certificate in the specified folder.
  rpc Create(CreateCertificateRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/certificate-manager/v1/certificates"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateCertificateMetadata"
      response: "Certificate"
    };
  }

  // Updates the specified certificate.
  rpc Update(UpdateCertificateRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/certificate-manager/v1/certificates/{certificate_id}"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateCertificateMetadata"
      response: "Certificate"
    };
  }

  // Deletes the specified certificate.
  rpc Delete(DeleteCertificateRequest) returns (operation.Operation) {
    option (google.api.http) = {delete: "/certificate-manager/v1/certificates/{certificate_id}"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteCertificateMetadata"
      response: "Certificate"
    };
  }

  // Request a certificate in the specified folder.
  rpc RequestNew(RequestNewCertificateRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/certificate-manager/v1/certificates/requestNew"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "RequestNewCertificateMetadata"
      response: "Certificate"
    };
  }

  // Lists operations for the specified certificate.
  rpc ListOperations(ListCertificateOperationsRequest) returns (ListCertificateOperationsResponse) {
    option (google.api.http) = {get: "/certificate-manager/v1/certificates/{certificate_id}/operations"};
  }

  // Lists existing access bindings for the specified certificate.
  rpc ListAccessBindings(access.ListAccessBindingsRequest) returns (access.ListAccessBindingsResponse) {
    option (google.api.http) = {get: "/certificate-manager/v1/certificates/{resource_id}:listAccessBindings"};
  }

  // Sets access bindings for the certificate.
  rpc SetAccessBindings(access.SetAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/certificate-manager/v1/certificates/{resource_id}:setAccessBindings"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "access.SetAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Updates access bindings for the specified certificate.
  rpc UpdateAccessBindings(access.UpdateAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/certificate-manager/v1/certificates/{resource_id}:updateAccessBindings"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "access.UpdateAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }
}

enum CertificateView {

  // Output basic information about the certificate.
  BASIC = 0;

  // Output full information about the certificate including domain challenges.
  FULL = 1;
}

message GetCertificateRequest {
  // ID of the certificate to return.
  //
  // To get the ID of a certificate use a [CertificateService.List] request.
  string certificate_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // The output type of the certificate.
  CertificateView view = 2;
}

message ListCertificatesRequest {
  reserved 4 to 5;
  // ID of the folder to list certificate in.
  string folder_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // The maximum number of results per page to return. If the number of available
  // results is larger than `page_size`, the service returns a [ListCertificatesResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token. To get the next page of results, set `page_token` to the
  // [ListCertificatesResponse.next_page_token] returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];

  // The output type of the certificate.
  CertificateView view = 6;
}

message ListCertificatesResponse {
  // List of certificates in the specified folder.
  repeated Certificate certificates = 1;

  // This token allows you to get the next page of results for list requests. If the number
  // of results is greater than the specified [ListCertificatesRequest.page_size], use
  // the `next_page_token` as the value for the [ListCertificatesRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message ListVersionsRequest {
  // ID of the certificate to list versions for.
  string certificate_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // Page token. To get the next page of results, set `page_token` to the
  // [ListCertificatesResponse.next_page_token] returned by a previous list request.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token. To get the next page of results, set `page_token` to the
  // [ListCertificatesResponse.next_page_token] returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListVersionsResponse {
  // List of versions for the specified certificate.
  repeated Version versions = 1;

  // This token allows you to get the next page of results for list requests. If the number
  // of results is greater than the specified [ListCertificatesRequest.page_size], use
  // the `next_page_token` as the value for the [ListCertificatesRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message CreateCertificateRequest {
  // ID of the folder to create a certificate in.
  string folder_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // Name of the certificate.
  // The name must be unique within the folder.
  string name = 2 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];

  // Description of the certificate.
  string description = 3 [(length) = "<=1024"];

  // Labels for the certificate as `key:value` pairs.
  map<string, string> labels = 4 [
    (size) = "<=64",
    (length) = "<=63",
    (pattern) = "[-_0-9a-z]*",
    (map_key).length = "<=63",
    (map_key).pattern = "[a-z][-_0-9a-z]*"
  ];

  // PEM-encoded certificate content of the certificate.
  string certificate = 5 [(length) = "<=32768"];

  // PEM-encoded certificate chain content of the certificate.
  string chain = 6 [(length) = "<=2097152"];

  // PEM-encoded private key content of the certificate.
  string private_key = 7 [
    (required) = true,
    (length) = "1-524288"
  ];

  // Flag that protects deletion of the certificate
  bool deletion_protection = 8;
}

message CreateCertificateMetadata {
  // ID of the certificate being created.
  string certificate_id = 1;
}

message UpdateCertificateRequest {
  // ID of the certificate to update.
  // To get the ID of a certificate use a [CertificateService.List] request.
  string certificate_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // Field mask that specifies which attributes of the certificate are going to be updated.
  google.protobuf.FieldMask update_mask = 2;

  // New name for the certificate.
  string name = 3 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];

  // New description for the certificate.
  string description = 4 [(length) = "<=1024"];

  // New labels for the certificate as `key:value` pairs.
  map<string, string> labels = 5 [
    (size) = "<=64",
    (length) = "<=63",
    (pattern) = "[-_0-9a-z]*",
    (map_key).length = "<=63",
    (map_key).pattern = "[a-z][-_0-9a-z]*"
  ];

  // New PEM-encoded certificate content for the certificate. Used only for imported certificates.
  string certificate = 6 [(length) = "<=32768"];

  // New PEM-encoded certificate chain content for the certificate. Used only for imported certificates.
  string chain = 7 [(length) = "<=2097152"];

  // New PEM-encoded private key content for the certificate. Used only for imported certificates.
  string private_key = 8 [(length) = "<=524288"];

  // Flag that protects deletion of the certificate
  bool deletion_protection = 9;
}

message UpdateCertificateMetadata {
  // ID of the certificate being updated.
  string certificate_id = 1;
}

message DeleteCertificateRequest {
  // ID of the certificate to be deleted.
  string certificate_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message DeleteCertificateMetadata {
  // ID of the certificate being deleted.
  string certificate_id = 1;
}

message RequestNewCertificateRequest {
  // ID of the folder to create a certificate in.
  string folder_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // Name of the certificate.
  string name = 2 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];

  // Description of the certificate.
  string description = 3 [(length) = "<=1024"];

  // Labels for the certificate as `key:value` pairs.
  map<string, string> labels = 4 [
    (size) = "<=64",
    (length) = "<=63",
    (pattern) = "[-_0-9a-z]*",
    (map_key).length = "<=63",
    (map_key).pattern = "[a-z][-_0-9a-z]*"
  ];

  // Fully qualified domain names of the certificate.
  repeated string domains = 5;

  // Type of the domain validation challenge.
  ChallengeType challenge_type = 6;

  // Flag that protects deletion of the certificate
  bool deletion_protection = 7;
}

message RequestNewCertificateMetadata {
  // ID of the certificate that is being requested.
  string certificate_id = 1;
}

message ListCertificateOperationsRequest {
  // ID of the certificate to list operations for.
  //
  // To get the certificate ID, use a [CertificateService.List] request.
  string certificate_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a [ListCertificateOperationsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token. To get the next page of results, set `page_token` to the
  // [ListCertificateOperationsResponse.next_page_token] returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListCertificateOperationsResponse {
  // List of operations for the specified certificate.
  repeated operation.Operation operations = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListCertificateOperationsRequest.page_size], use the `next_page_token` as the value
  // for the [ListCertificateOperationsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

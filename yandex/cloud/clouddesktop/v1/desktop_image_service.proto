syntax = "proto3";

package yandex.cloud.clouddesktop.v1.api;

import "google/api/annotations.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/clouddesktop/v1/desktop_image.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/clouddesktop/v1;clouddesktop";
option java_package = "yandex.cloud.api.clouddesktop.v1";

// A service for managing desktop images.
service DesktopImageService {
    // Lists desktop images in the specified folder.
    rpc List (ListDesktopImagesRequest) returns (ListDesktopImagesResponse) {
         option (google.api.http) = {get: "/cloud-desktop/v1/images"};
    }

    // Returns the specified desktop image.
    rpc Get (GetDesktopImageRequest) returns (DesktopImage) {
        option (google.api.http) = {get: "/cloud-desktop/v1/images/{image_id}"};
    }

    // Copies the specified image to desktop image.
    rpc Copy (CopyDesktopImageRequest) returns (operation.Operation) {
        option (google.api.http) = {
            post: "/cloud-desktop/v1/images:copy"
            body: "*"
        };
        option (yandex.cloud.api.operation) = {
            metadata: "CopyDesktopImageMetadata"
            response: "DesktopImage"
        };
    };

    // Updates desktop image properties.
    rpc Update (UpdateDesktopImageRequest) returns (operation.Operation) {
        option (google.api.http) = {
            patch: "/cloud-desktop/v1/images/{image_id}" 
            body: "*"
        };
        option (yandex.cloud.api.operation) = {
            metadata: "UpdateDesktopImageMetadata"
            response: "DesktopImage"
        };
    }

    // Copies the specified desktop image from the specified desktop.
    rpc CopyFromDesktop (CopyFromDesktopRequest) returns (operation.Operation) {
        option (google.api.http) = {
            post: "/cloud-desktop/v1/images:copyFromDesktop"
            body: "*"
        };
        option (yandex.cloud.api.operation) = {
            metadata: "CopyFromDesktopMetadata"
            response: "DesktopImage"
        };
    };

    // Deletes the specified desktop image.
    rpc Delete (DeleteDesktopImageRequest) returns (operation.Operation) {
        option (google.api.http) = {delete: "/cloud-desktop/v1/images/{image_id}"};
        option (yandex.cloud.api.operation) = {
            metadata: "DeleteDesktopImageMetadata"
            response: "google.protobuf.Empty"
        };
    }
}

message ListDesktopImagesRequest {
    reserved 2 to 20;

    // ID of the folder to list desktop images in.
    string folder_id = 1 [(required) = true, (length) = "<=50"];

    // The maximum number of results per page to return. If the number of available
    // results is larger than [page_size],
    // the service returns a [ListDesktopImagesRequest.next_page_token]
    // that can be used to get the next page of results in subsequent list requests.
    // Default value: 100.
    int64 page_size = 21 [(value) = "0-1000"];

    // Page token. To get the next page of results, set [page_token] to the
    // [ListDesktopImagesRequest.next_page_token] returned by a previous list request.
    string page_token = 22 [(length) = "<=100"];

    // A filter expression that filters resources listed in the response.
    // The expression must specify:
    // 1. The field name. Currently you can use filtering only on [DesktopImage.name] field.
    // 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
    // 3. Value or a list of values to compare against the values of the field.
    string filter = 23 [(length) = "<=1000"];

    // Sorting the list by [DesktopImage.name], [DesktopImage.created_at] and [DesktopImage.status] fields.
    // The default sorting order is ascending.
    string order_by = 24 [(length) = "<=100"];
}

message ListDesktopImagesResponse {
    reserved 2 to 21;

    // List of desktop images.
    repeated DesktopImage desktop_images = 1;

    // This token allows you to get the next page of results for list requests. If the number of results
    // is larger than [ListDesktopImagesRequest.page_size], use
    // the [next_page_token] as the value
    // for the [ListDesktopImagesRequest.page_token] query parameter
    // in the next list request. Each subsequent list request will have its own
    // [next_page_token] to continue paging through the results.
    string next_page_token = 22;
}

message CopyDesktopImageRequest {
    reserved 3 to 7;
    
    // ID of the folder to copy the image to.
    string folder_id = 1 [(required) = true, (length) = "<=50"];

    // Name of the image.
    string name = 2 [(required) = true, (length) = "<=50"];

    // ID of the compute image to copy the image from.
    string image_id = 8 [(required) = true, (length) = "<=50"];
}

message UpdateDesktopImageRequest {
    // Id of image to update.
    string image_id = 1 [(required) = true];

    // Mask of fields that need to be update.
    google.protobuf.FieldMask update_mask = 2;

    // New desktop image name.
    string name = 3 [(length) = "<=50"];
    
    // New desktop image labels.
    map<string, string> labels = 4 [
        (size) = "<=64",
        (length) = "<=63",
        (pattern) = "[-_0-9a-z]*", 
        (map_key).length = "1-63", 
        (map_key).pattern = "[a-z][-_0-9a-z]*"
    ];
}

message CopyFromDesktopRequest {
    reserved 5 to 7;

    // ID of the folder to copy the image to.
    string folder_id = 3 [(length) = "<=50"];

    // Name of the image.
    string name = 4 [(length) = "<=50"];

    // ID of the desktop to copy the image from.
    string desktop_id = 8 [(required) = true, (length) = "<=50"];
}

message CopyDesktopImageMetadata {
    // ID of the new image.
    string image_id = 1;
}

message CopyFromDesktopMetadata {
    // ID of the new image.
    string image_id = 1;
}

message DeleteDesktopImageRequest {
    // ID of the image to delete.
    string image_id = 1 [(required) = true];
}

message DeleteDesktopImageMetadata {
    // ID of the image to delete.
    string image_id = 1;
}

message GetDesktopImageRequest {
    // ID of the image to get.
    string image_id = 1 [(required) = true];
}

message UpdateDesktopImageMetadata {
    string image_id = 1 [(required) = true];
    
}

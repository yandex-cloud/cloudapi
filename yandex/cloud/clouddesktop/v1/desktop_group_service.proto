syntax = "proto3";

package yandex.cloud.clouddesktop.v1.api;

import "google/api/annotations.proto";
import "yandex/cloud/access/access.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/clouddesktop/v1/desktop.proto";
import "yandex/cloud/clouddesktop/v1/desktop_group.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/clouddesktop/v1/disk.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/clouddesktop/v1;clouddesktop";
option java_package = "yandex.cloud.api.clouddesktop.v1";

// A set of methods for managing desktop group resources.
service DesktopGroupService {
  // Returns the specified desktop group resource.
  //
  // To get the list of available desktop groups, make a [List] request.
  rpc Get(GetDesktopGroupRequest) returns (DesktopGroup) {
    option (google.api.http) = {get: "/cloud-desktop/v1/desktopGroups/{desktop_group_id}"};
  }

  // Retrieves the list of desktop group resources.
  rpc List(ListDesktopGroupsRequest) returns (ListDesktopGroupsResponse) {
    option (google.api.http) = {get: "/cloud-desktop/v1/desktopGroups"};
  }

  // Retrieves the list of desktops resources.
  rpc ListDesktops(ListDesktopGroupDesktopsRequest) returns (ListDesktopGroupDesktopsResponse) {
    option (google.api.http) = {get: "/cloud-desktop/v1/desktopGroups/{desktop_group_id}/desktops"};
  }

  // Returns list of the operations for the specified desktop group.
  rpc ListOperations(ListDesktopGroupOperationsRequest) returns (ListDesktopGroupOperationsResponse) {
    option (google.api.http) = {get: "/cloud-desktop/v1/desktopGroups/{desktop_group_id}/operations"};
  }

  // Creates desktop group in the specified folder.
  rpc Create(CreateDesktopGroupRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/cloud-desktop/v1/desktopGroups"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateDesktopGroupMetadata"
      response: "DesktopGroup"
    };
  }

  // Updates desktop group properties
  rpc Update (UpdateDesktopGroupRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/cloud-desktop/v1/desktopGroups/{desktop_group_id}" 
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
        metadata: "UpdateDesktopGroupMetadata"
        response: "google.protobuf.Empty"
    };
  }

  // Deletes the specified desktop group.
  rpc Delete(DeleteDesktopGroupRequest) returns (operation.Operation) {
    option (google.api.http) = {delete: "/cloud-desktop/v1/desktopGroups/{desktop_group_id}"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteDesktopGroupMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Returns a list of the access bindings for the specified desktop group.
  rpc ListAccessBindings(access.ListAccessBindingsRequest) returns (access.ListAccessBindingsResponse) {
    option (google.api.http) = {get: "/cloud-desktop/v1/desktopGroups/{resource_id}:listAccessBindings"};
  }

  // Sets access bindings for the specified desktop group.
  rpc SetAccessBindings(access.SetAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/cloud-desktop/v1/desktopGroups/{resource_id}:setAccessBindings"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "access.SetAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Updates access bindings of the specified desktop group.
  rpc UpdateAccessBindings(access.UpdateAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/cloud-desktop/v1/desktopGroups/{resource_id}:updateAccessBindings"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "access.UpdateAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }
}

message GetDesktopGroupRequest {
  // ID of the desktop group resource to return.
  //
  // To get the desktop group ID use a [DesktopGroupService.List] request.
  string desktop_group_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message ListDesktopGroupsRequest {
  reserved 2 to 20;
  // ID of the folder to list desktop groups in.
  //
  // To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListDesktopGroupsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 21 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListDesktopGroupsResponse.next_page_token] returned by a previous list request.
  string page_token = 22 [(length) = "<=100"];

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently you can use filtering only on [DesktopGroup.name] field.
  // 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
  // 3. Value or a list of values to compare against the values of the field.
  string filter = 23 [(length) = "<=1000"];

  // Sorting the list by [DesktopGroup.name], [DesktopGroup.created_at] and [DesktopGroup.status] fields.
  // The default sorting order is ascending.
  string order_by = 24 [(length) = "<=100"];
}

message ListDesktopGroupsResponse {
  reserved 2 to 21;
  // List of desktop groups.
  repeated DesktopGroup desktop_groups = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListDesktopGroupsRequest.page_size], use
  // the [next_page_token] as the value
  // for the [ListDesktopGroupsRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 22;
}

message ListDesktopGroupDesktopsRequest {
  reserved 2 to 20;
  // ID of the desktop group.
  string desktop_group_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListDesktopGroupDesktopsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 21 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListDesktopGroupDesktopsResponse.next_page_token] returned by a previous list request.
  string page_token = 22 [(length) = "<=100"];

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently you can use filtering only on [Desktop.name] field.
  // 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
  // 3. Value or a list of values to compare against the values of the field.
  string filter = 23 [(length) = "<=1000"];

  // Sorting the list by [Desktop.name], [Desktop.created_at] and [Desktop.status] fields.
  // The default sorting order is ascending.
  string order_by = 24 [(length) = "<=100"];
}

message ListDesktopGroupDesktopsResponse {
  reserved 2 to 21;
  // List of desktops.
  repeated Desktop desktops = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListDesktopGroupDesktopsRequest.page_size], use
  // the [next_page_token] as the value
  // for the [ListDesktopsDGS Request.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 22;
}

message ListDesktopGroupOperationsRequest {
  reserved 2 to 20;
  // ID of the desktop group.
  string desktop_group_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListDesktopGroupOperationsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 21 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListDesktopGroupOperationsResponse.next_page_token] returned by a previous list request.
  string page_token = 22 [(length) = "<=100"];

  // Sorting the list by [DesktopGroup.name] field.
  // The default sorting order is ascending.
  string filter = 23 [(length) = "<=1000"];
}

message ListDesktopGroupOperationsResponse {
  reserved 2 to 21;
  // List of operations for the specified desktop group.
  repeated operation.Operation operations = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListDesktopGroupOperationsRequest.page_size], use
  // the [next_page_token] as the value
  // for the [ListDesktopGroupOperationsRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 22;
}

message UpdateDesktopGroupRequest {
  reserved 8 to 9;
  string desktop_group_id = 1 [(required) = true, (length) = "<=50"];
  google.protobuf.FieldMask update_mask = 2;
  string desktop_image_id = 3 [(length) = "<=50"];
  string name = 4 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])"];
  string description = 5 [(length) = "<=1024"];
  map<string, string> labels = 6 [
    (size) = "<=64", 
    (length) = "<=63", 
    (pattern) = "[-_0-9a-z]*", 
    (map_key).length = "1-63", 
    (map_key).pattern = "[a-z][-_0-9a-z]*"
  ];
  ResourcesSpec resources_spec = 7;

  // Configuration of the desktop group.
  DesktopGroupConfiguration group_config = 10;

  // Boot disk specification of the desktop group.
  DiskSpec boot_disk_spec = 11;

  // Data disk specification of the desktop group.
  DiskSpec data_disk_spec = 12;

  // Update policy of the desktop group. 
  oneof update_policy {
    AutoUpdatePolicy auto_update_policy = 13;
    ManualUpdatePolicy manual_update_policy = 14;
  }
}

message CreateDesktopGroupRequest {
  reserved 13 to 20;
  reserved 4 to 10;
  // ID of the folder to create a DesktopGroup in.
  //
  // To get a folder ID make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 2 [
    (required) = true,
    (length) = "<=50"
  ];

  // An image used to create a desktop boot disk
  string desktop_image_id = 3 [
    (required) = true,
    (length) = "<=50"
  ];

  // Name of the DesktopGroup.
  // The name must be unique within the folder.
  string name = 11 [(pattern) = "[a-z]([-a-z0-9]{0,61}[a-z0-9])"];

  // Description of the DesktopGroup.
  string description = 12 [(length) = "<=1024"];

  // Resource specification of the desktop group.
  ResourcesSpec resources_spec = 21;

  // Network interface specification of the desktop group.
  NetworkInterfaceSpec network_interface_spec = 22;

  // Boot disk specification of the desktop group.
  DiskSpec boot_disk_spec = 23;
  
  // Data disk specification of the desktop group.
  DiskSpec data_disk_spec = 24;

  // Configuration of the desktop group.
  DesktopGroupConfiguration group_config = 25;
}

message CreateDesktopGroupMetadata {
  // ID of the desktop group that is being created.
  string desktop_group_id = 1;
}

message DeleteDesktopGroupRequest {
  // ID of the desktop group to delete.
  //
  // To get a desktop group ID make a [DesktopGroupService.List] request.
  string desktop_group_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message DeleteDesktopGroupMetadata {
  // ID of the desktop group that is being deleted.
  string desktop_group_id = 1;
}

message UpdateDesktopGroupMetadata {
  // ID of the desktop group that is being updated.
  string desktop_group_id = 1;
}

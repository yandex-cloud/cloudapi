syntax = "proto3";

package yandex.cloud.clouddesktop.v1.api;

import "google/api/annotations.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/clouddesktop/v1/desktop.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/clouddesktop/v1;clouddesktop";
option java_package = "yandex.cloud.api.clouddesktop.v1";

// A set of methods for managing desktop resources.
service DesktopService {
  // Returns the specified desktop resource.
  //
  // To get the list of available desktops, make a [List] request.
  rpc Get(GetDesktopRequest) returns (Desktop) {
    option (google.api.http) = {get: "/cloud-desktop/v1/desktops/{desktop_id}"};
  }

  // Returns a RDP file for the specified desktop.
  rpc GetRdpFile(GetRdpFileRequest) returns (RdpFileResponse) {
    option (google.api.http) = {get: "/cloud-desktop/v1/desktops/{desktop_id}:getRdpFile"};
  }

  // Retrieves the list of desktop resources.
  rpc List(ListDesktopsRequest) returns (ListDesktopsResponse) {
    option (google.api.http) = {get: "/cloud-desktop/v1/desktops"};
  }

  // Returns list of the operations for the specified desktop.
  rpc ListOperations(ListDesktopOperationsRequest) returns (ListDesktopOperationsResponse) {
    option (google.api.http) = {get: "/cloud-desktop/v1/desktops/{desktop_id}/operations"};
  }

  // Creates desktop in the specified folder.
  rpc Create(CreateDesktopRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/cloud-desktop/v1/desktops"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateDesktopMetadata"
      response: "Desktop"
    };
  }

  // Updates desktop properties.
  rpc UpdateProperties (UpdatePropertiesRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/cloud-desktop/v1/desktops/{desktop_id}" 
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateDesktopPropertiesMetadata"
      response: "Desktop"
    };
  }

  // Deletes the specified desktop.
  rpc Delete(DeleteDesktopRequest) returns (operation.Operation) {
    option (google.api.http) = {delete: "/cloud-desktop/v1/desktops/{desktop_id}"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteDesktopMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Reset password
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post: "/cloud-desktop/v1/desktops/{desktop_id}:resetPassword"
      body: "*"
    };
  }

  // Restart the specified desktop.
  rpc Restart(RestartRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/cloud-desktop/v1/desktops/{desktop_id}:restart"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "RestartDesktopMetadata"
      response: "Desktop"
    };
  }

  // Sync desktop with group configuration
  rpc Update(UpdateRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/cloud-desktop/v1/desktops/{desktop_id}:update"
    };
    option (yandex.cloud.api.operation) = {
        metadata: "UpdateDesktopMetadata"
        response: "Desktop"
    };
  }

  // Start the specified desktop.
  rpc Start(StartRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/cloud-desktop/v1/desktops/{desktop_id}:start"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
        metadata: "StartDesktopMetadata"
        response: "Desktop"
    };
  }

  // Stop the specified desktop.
  rpc Stop(StopRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/cloud-desktop/v1/desktops/{desktop_id}:stop"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
        metadata: "StopDesktopMetadata"
        response: "Desktop"
    };
  }
}

message UpdatePropertiesRequest {
  // To get the desktop ID use a [DesktopService.List] request.
  string desktop_id = 1 [(required) = true, (length) = "<=50"];
  google.protobuf.FieldMask update_mask = 2;
  string name = 3 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])"];
  map<string, string> labels = 4 [
    (size) = "<=64", 
    (length) = "<=63", 
    (pattern) = "[-_0-9a-z]*", 
    (map_key).length = "1-63", 
    (map_key).pattern = "[a-z][-_0-9a-z]*"
  ];
}

message StartRequest {
  // ID of the desktop.
  string desktop_id = 1 [(required) = true, (length) = "<=50"];
}

message StopRequest {
  // ID of the desktop.
  string desktop_id = 1 [(required) = true, (length) = "<=50"];
}

message UpdateRequest {
  // ID of the desktop.
  string desktop_id = 1 [(required) = true, (length) = "<=50"];
}

message GetDesktopRequest {
  // ID of the desktop resource to return.
  //
  // To get the desktop ID use a [DesktopService.List] request.
  string desktop_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message GetRdpFileRequest {
  // ID of the desktop resource to return.
  //
  // To get the desktop ID use a [DesktopService.List] request.
  string desktop_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // User of the desktop.
  User user = 2 [(required) = false];
}

message RdpFileResponse {
  // HTTP headers mapping.
  map<string, string> headers = 1;

  // RDP file content.
  string content = 2;
}

message ListDesktopsRequest {
  reserved 3 to 20;
  // ID of the folder to create a DesktopGroup in.
  //
  // To get a folder ID make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 2 [
    (required) = true,
    (length) = "<=50"
  ];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListDesktopsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 21 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListDesktopsResponse.next_page_token] returned by a previous list request.
  string page_token = 22 [(length) = "<=100"];

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently you can use filtering only on [Desktop.name] field.
  // 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
  // 3. Value or a list of values to compare against the values of the field.
  string filter = 23 [(length) = "<=1000"];

  // Sorting the list by [Desktop.name], [Desktop.created_at] and [Desktop.status] fields.
  // The default sorting order is ascending.
  string order_by = 24 [(length) = "<=100"];
}

message ListDesktopsResponse {
  reserved 2 to 21;
  // List of desktops.
  repeated Desktop desktops = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListDesktopsRequest.page_size], use
  // the [next_page_token] as the value
  // for the [ListDesktopsRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 22;
}

message ListDesktopOperationsRequest {
  reserved 2 to 20;
  // ID of the desktop.
  string desktop_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListDesktopOperationsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 21 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListDesktopOperationsResponse.next_page_token] returned by a previous list request.
  string page_token = 22 [(length) = "<=100"];

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently you can use filtering only on [Desktop.name] field.
  // 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
  // 3. Value or a list of values to compare against the values of the field.
  string filter = 23 [(length) = "<=1000"];
}

message ListDesktopOperationsResponse {
  reserved 2 to 21;
  // List of operations for the specified desktop.
  repeated operation.Operation operations = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListDesktopOperationsRequest.page_size], use
  // the [next_page_token] as the value
  // for the [ListDesktopOperationsRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 22;
}

message CreateDesktopRequest {
  reserved 5 to 22;
  // ID of the desktop group.
  string desktop_group_id = 3 [
    (required) = true,
    (length) = "<=50"
  ];

  // ID of the subnet for desktop.
  string subnet_id = 4 [(required) = false, (length) = "<=50"];

  // List of users.
  repeated User users = 23 [(size) = ">0"];
}

message CreateDesktopMetadata {
  // ID of the desktop that is being created.
  string desktop_id = 1;
}

message DeleteDesktopRequest {
  // ID of the desktop to delete.
  string desktop_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message DeleteDesktopMetadata {
  // ID of the desktop that is being deleted.
  string desktop_id = 1;
}

message ResetPasswordRequest {
  // ID of the desktop.
  string desktop_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // User of the desktop.
  User user = 2 [(required) = true];
}

message ResetPasswordResponse {
  // Generated password
  string password = 1;
}

message RestartRequest {
  // ID of the desktop.
  string desktop_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message RestartDesktopMetadata {
  // ID of the desktop.
  string desktop_id = 1;
}

message UpdateDesktopPropertiesMetadata {
    string desktop_id = 1;
}

message StartDesktopMetadata {
    string desktop_id = 1;
}

message StopDesktopMetadata {
    string desktop_id = 1;
}

message UpdateDesktopMetadata {
    string desktop_id = 1;
}

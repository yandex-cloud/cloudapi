syntax = "proto3";

package yandex.cloud.gitlab.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/gitlab/v1/instance.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/gitlab/v1;gitlab";

option java_outer_classname = "GIS";
option java_package = "yandex.cloud.api.gitlab.v1";

// InstanceService provides methods for managing GitLab instances.
service InstanceService {
  // Returns the specified GitLab instance.
  rpc Get (GetInstanceRequest) returns (Instance) {
    option (google.api.http) = { get: "/gitlab/v1/instances/{instance_id}" };
  };

  // Retrieves the list of GitLab instances in the specified folder.
  rpc List (ListInstancesRequest) returns (ListInstancesResponse) {
    option (google.api.http) = { get: "/gitlab/v1/instances" };
  };

  // Creates a new GitLab instance in the specified folder.
  rpc Create (CreateInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/gitlab/v1/instances" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateInstanceMetadata"
      response: "Instance"
    };
  }

  // Updates GitLab instance.
  rpc Update (UpdateInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/gitlab/v1/instances/{instance_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateInstanceMetadata"
      response: "Instance"
    };
  }

  // Deletes the specified GitLab instance.
  rpc Delete (DeleteInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/gitlab/v1/instances/{instance_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteInstanceMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Starts the specified GitLab instance.
  rpc Start (StartInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/gitlab/v1/instances/{instance_id}:start"};
    option (yandex.cloud.api.operation) = {
      metadata: "StartInstanceMetadata"
      response: "Instance"
    };
  }

  // Stops the specified GitLab instance.
  rpc Stop (StopInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/gitlab/v1/instances/{instance_id}:stop"};
    option (yandex.cloud.api.operation) = {
      metadata: "StopInstanceMetadata"
      response: "Instance"
    };
  }
}

// Request message for InstanceService.Get
message GetInstanceRequest {
  // ID of the GitLab instance to return
  string instance_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];
}

// Request message for InstanceService.List.
message ListInstancesRequest {
  // ID of the folder to list instances in.
  string folder_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListInstancesRequest.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(yandex.cloud.value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the [ListInstancesRequest.next_page_token]
  // returned by the previous list request.
  string page_token = 3 [(yandex.cloud.length) = "<=100"];
}

// Response message for InstanceService.List.
message ListInstancesResponse {
  // List of GitLab instances.
  repeated Instance instances = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListInstancesRequest.page_size], use the [next_page_token] as the value
  // for the [ListInstancesRequest.page_token] parameter in the next list request. Each subsequent
  // list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

// Request message for InstanceService.Create.
message CreateInstanceRequest {
  // ID of the folder to create instance in.
  string folder_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];

  // Name of the instance (must be unique within the folder).
  string name = 2 [(yandex.cloud.required) = true, (yandex.cloud.pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];

  // Description of the instance.
  string description = 3 [(yandex.cloud.length) = "<=256"];

  // Custom labels for the instance as `` key:value `` pairs. For example, "env": "prod".
  map<string, string> labels = 4 [(yandex.cloud.size) = "<=64", (yandex.cloud.length) = "<=63",
    (yandex.cloud.pattern) = "[-_0-9a-z]*", (yandex.cloud.map_key).length = "1-63",
    (yandex.cloud.map_key).pattern = "[a-z][-_0-9a-z]*"];

  // ID of the resource preset for computational resources.
  string resource_preset_id = 5 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];

  // Disk size in bytes.
  int64 disk_size = 6;

  // Admin user login.
  string admin_login = 7 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];

  // Admin user email.
  string admin_email = 8 [(yandex.cloud.required) = true];

  // Domain prefix for the GitLab instance.
  string domain_prefix = 9 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50", (yandex.cloud.pattern) = "[a-z0-9][a-z0-9-]{3,48}[a-z0-9]"];

  // ID of the subnet where instance will be created.
  string subnet_id = 10 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];

  // Reserved for maintenance_window.
  reserved 11;

  // Number of days to retain backups.
  int64 backup_retain_period_days = 12 [(yandex.cloud.required) = false];

  // Reserved for backup_window_start.
  reserved 13;

  // Whether to delete untagged resources during maintenance.
  bool maintenance_delete_untagged = 14;

  // Whether deletion protection is enabled.
  bool deletion_protection = 15;

  reserved 16 to 18;

  // ID of approval rules for the instance.
  string approval_rules_id = 19 [(yandex.cloud.required) = false, (yandex.cloud.length) = "<=30"];
}

// Metadata message for InstanceService.Create.
message CreateInstanceMetadata {
  // ID of the GitLab instance being created.
  string instance_id = 1;
}

// Request message for InstanceService.Update.
message UpdateInstanceRequest {
  // ID of the GitLab instance to update.
  string instance_id = 1 [(yandex.cloud.required) = true, (yandex.cloud.length) = "<=50"];

  // Name of the instance (must be unique within the folder).
  string name = 2 [(yandex.cloud.pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];

  // Description of the instance.
  string description = 3 [(yandex.cloud.length) = "<=256"];

  // Custom labels for the instance as `` key:value `` pairs. For example, "env": "prod"
  map<string, string> labels = 4 [
    (yandex.cloud.size) = "<=64",
    (yandex.cloud.length) = "<=63",
    (yandex.cloud.pattern) = "[-_0-9a-z]*",
    (yandex.cloud.map_key).length = "1-63",
    (yandex.cloud.map_key).pattern = "[a-z][-_0-9a-z]*"
  ];

  reserved 5;

  // Number of days to retain backups.
  int64 backup_retain_period_days = 6;

  // ID of the resource preset for computational resources.
  string resource_preset_id = 7;

  reserved 8 to 9;

  // Whether to delete untagged resources during maintenance.
  bool maintenance_delete_untagged = 10;

  // Whether deletion protection is enabled.
  bool deletion_protection = 11;

  // ID of approval rules for the instance.
  string approval_rules_id = 12 [(yandex.cloud.length) = "<=30"];

  // Token of approval rules for the instance.
  string approval_rules_token = 13 [(yandex.cloud.length) = "<=100"];

  reserved  14 to 20;

  // Disk size in bytes.
  int64 disk_size = 21;

  reserved 22 to 23;

  // Field mask that specifies which attributes of the trail are going to be updated.
  google.protobuf.FieldMask update_mask = 24;
}

// Metadata message for InstanceService.Update.
message UpdateInstanceMetadata {
  // ID of the GitLab instance to update.
  string instance_id = 1;
}

// Request message for InstanceService.Delete.
message DeleteInstanceRequest {
  // ID of the GitLab instance to delete.
  string instance_id = 1;
}

// Metadata message for InstanceService.Delete.
message DeleteInstanceMetadata {
  // ID of the GitLab instance being deleted.
  string instance_id = 1;
}

// Request message for InstanceService.Start.
message StartInstanceRequest {
  // ID of the GitLab instance to start.
  string instance_id = 1;
}

// Metadata message for InstanceService.Start.
message StartInstanceMetadata {
  // ID of the GitLab instance being started.
  string instance_id = 1;
}

// Request message for InstanceService.Stop.
message StopInstanceRequest {
  string instance_id = 1;
}

// Metadata message for InstanceService.Stop.
message StopInstanceMetadata {
  // ID of the GitLab instance being stoped.
  string instance_id = 1;
}

syntax = "proto3";

package yandex.cloud.baremetal.v1alpha;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/baremetal/v1alpha/server.proto";
import "yandex/cloud/baremetal/v1alpha/storage.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/baremetal/v1alpha;baremetal";
option java_package = "yandex.cloud.api.baremetal.v1alpha";


// A set of methods for managing Server resources.
service ServerService {
  // Returns the specific Server resource.
  //
  // To get the list of available Server resources, make a [List] request.
  rpc Get (GetServerRequest) returns (Server) {
    option (google.api.http) = {
      get: "/baremetal/v1alpha/servers/{server_id}"
    };
  }

  // Retrieves the list of Server resources in the specified folder.
  rpc List (ListServerRequest) returns (ListServerResponse) {
    option (google.api.http) = {
      get: "/baremetal/v1alpha/servers"
    };
  }

  // Creates a server in the specified folder.
  rpc Create (CreateServerRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/baremetal/v1alpha/servers"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateServerMetadata"
      response: "Server"
    };
  }

  // Creates multiple servers in the specified folder.
  rpc BatchCreate (BatchCreateServersRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/baremetal/v1alpha/servers:batchCreate"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "BatchCreateServersMetadata"
      response: "BatchCreateServersResponse"
    };
  }

  // Updates the specified server.
  rpc Update (UpdateServerRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/baremetal/v1alpha/servers/{server_id}"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateServerMetadata"
      response: "Server"
    };
  }

  // Powers off the specified server.
  rpc PowerOff (PowerOffServerRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/baremetal/v1alpha/servers/{server_id}:powerOff"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "PowerOffServerMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Powers on the specified server.
  rpc PowerOn (PowerOnServerRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/baremetal/v1alpha/servers/{server_id}:powerOn"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "PowerOnServerMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Reboots the specified server.
  rpc Reboot (RebootServerRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/baremetal/v1alpha/servers/{server_id}:reboot"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "RebootServerMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Reinstalls the specified server.
  rpc Reinstall (ReinstallServerRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/baremetal/v1alpha/servers/{server_id}:reinstall"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "ReinstallServerMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Starts prolongation of the specified server.
  rpc StartProlongation (StartProlongationRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/baremetal/v1alpha/servers/{server_id}:startProlongation"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "ServerSetProlongationMetadata"
      response: "Server"
    };
  }

  // Stops prolongation of the specified server.
  rpc StopProlongation (StopProlongationRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/baremetal/v1alpha/servers/{server_id}:stopProlongation"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "ServerSetProlongationMetadata"
      response: "Server"
    };
  }

  // Lists operations for the specified server.
  rpc ListOperations (ListServerOperationsRequest) returns (ListServerOperationsResponse) {
    option (google.api.http) = {
      get: "/baremetal/v1alpha/servers/{server_id}/operations"
    };
  }
}

message GetServerRequest {
  // ID of the Server resource to return.
  //
  // To get the server ID, use a [ServerService.List] request.
  string server_id = 1 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "20"
  ];
}

message ListServerRequest {
  // Reserved for future use.
  reserved 2 to 99;

  // ID of the folder to list servers in.
  //
  // To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 1 [
    (pattern) = "[a-z][a-z0-9.-]*",
    (length) = "<=50"
  ];

  // The maximum number of results per page to return. If the number of available
  // results is greater than `page_size`,
  // the service returns a [ListServerResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value is 20.
  int64 page_size = 100 [(value) = "<=100"];

  // Page token. To get the next page of results, set `page_token` to the
  // [ListServerResponse.next_page_token] returned by a previous list request.
  string page_token = 101;

  // By which column the listing should be ordered and in which direction,
  // format is "createdAt desc". "id asc" if omitted.
  // Supported fields: ["id", "name", "createdAt"].
  // Both snake_case and camelCase are supported for fields.
  string order_by = 102;

  // A filter expression that filters resources listed in the response.
  // The expression consists of one or more conditions united by `AND` operator: `<condition1> [AND <condition2> [<...> AND <conditionN>]]`.
  //
  // Each condition has the form `<field> <operator> <value>`, where:
  // 1. `<field>` is the field name. Currently you can use filtering only on the limited number of fields.
  // 2. `<operator>` is a logical operator, one of `=` (equal), `:` (substring).
  // 3. `<value>` represents a value.
  // String values should be written in double (`"`) or single (`'`) quotes. C-style escape sequences are supported (`\"` turns to `"`, `\'` to `'`, `\\` to backslash).
  // Example: "key1='value' AND key2='value'"
  // Supported operators: ["AND"].
  // Supported fields: ["id", "name", "zoneId", "hardwarePoolId"].
  // Both snake_case and camelCase are supported for fields.
  string filter = 103;
}

message ListServerResponse {
  // Reserved for future use.
  reserved 2 to 99;

  // List of Server resources.
  repeated Server servers = 1;

  // Token for getting the next page of the list. If the number of results is greater than
  // [ListServerRequest.page_size], use `next_page_token` as the value
  // for the [ListServerRequest.page_token] parameter in the next list request.
  //
  // Each subsequent page will have its own `next_page_token` to continue paging through the results.
  string next_page_token = 100;
}

message CreateServerRequest {
  reserved 6 to 10, 12 to 14;

  // Reserved for future use.
  reserved 17 to 199;

  // ID of the folder to create server in.
  //
  // To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 1 [
    (pattern) = "[a-z][a-z0-9.-]*",
    (length) = "<=50"
  ];

  // Name of the server.
  // The name must be unique within the folder.
  string name = 2 [
    (pattern) = "[a-z]([-a-z0-9]*[a-z0-9])?",
    (length) = "2-56"
  ];

  // Description of the server.
  string description = 3 [(length) = "<=1024"];

  // ID of the hardware pool that the server belongs to.
  //
  // To get the hardware pool ID, use a [HardwarePoolService.List] request.
  string hardware_pool_id = 4 [(length) = "<=20"];

  // ID of the configuration to use for the server.
  //
  // To get the configuration ID, use a [ConfigurationService.List] request.
  string configuration_id = 5 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "20"
  ];

  // A period of time for which the server is rented.
  string rental_period_id = 11 [(length) = "<=20"];

  // Network configuration for the server. Specifies how the network interface is configured
  // to interact with other servers on the internal network and on the internet.
  // Currently up to 2 network interfaces are supported: required private network interface and
  // optional public network interface.
  repeated NetworkInterfaceSpec network_interfaces = 15 [(size) = "<=2"];

  // Operating system specific settings for provisioning the server. Optional, if omitted, the
  // server will be created without an operating system.
  OsSettingsSpec os_settings_spec = 16;

  // Resource labels as `key:value` pairs.
  map<string, string> labels = 200 [
    (yandex.cloud.size) = "<=64",
    (length) = "<=63",
    (pattern) = "[-_0-9a-z]*",
    (map_key).length = "1-63",
    (map_key).pattern = "[a-z][-_0-9a-z]*"
  ];
}

message CreateServerMetadata {
  // ID of the server that is being created.
  string server_id = 1;
}

message UpdateServerRequest {
  // Reserved for future use.
  reserved 6 to 199;

  // ID of the server to update.
  //
  // To get the server ID, use a [ServerService.List] request.
  string server_id = 1 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "20"
  ];

  // Field mask that specifies which fields of the Server resource are going to be updated.
  google.protobuf.FieldMask update_mask = 2;

  // Name of the server.
  // The name must be unique within the folder.
  string name = 3 [
    (pattern) = "[a-z]([-a-z0-9]*[a-z0-9])?",
    (length) = "2-63"
  ];

  // Description of the server.
  string description = 4 [(length) = "<=1024"];

  // Network configuration for the server. Specifies how the network interface is configured
  // to interact with other servers on the internal network and on the internet.
  // Currently up to 2 network interfaces are supported: required private network interface and
  // optional public network interface.
  repeated NetworkInterfaceSpec network_interfaces = 5 [(size) = "1-2"];

  // Resource labels as `key:value` pairs.
  map<string, string> labels = 200 [
    (yandex.cloud.size) = "<=64",
    (length) = "<=63",
    (pattern) = "[-_0-9a-z]*",
    (map_key).length = "1-63",
    (map_key).pattern = "[a-z][-_0-9a-z]*"
  ];
}

message NetworkInterfaceSpec {
  reserved 2 to 6;

  // ID of the network interface. Should not be specified when creating a server.
  string id = 1 [
    (pattern) = "([a-z][a-z0-9]*)?",
    (length) = "<=20"
  ];

  // Subnet that the network interface belongs to.
  oneof subnet {
    // Private subnet.
    PrivateSubnetNetworkInterface private_subnet = 7;

    // Public subnet.
    PublicSubnetNetworkInterface public_subnet = 8;
  }
}

message UpdateServerMetadata {
  // ID of the Server resource that is being updated.
  string server_id = 1;
}

message DeleteServerRequest {
  // ID of the server to delete.
  //
  // To get the server ID, use a [ServerService.List] request.
  string server_id = 1 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "20"
  ];
}

message DeleteServerMetadata {
  // ID of the Server resource that is being deleted.
  string server_id = 1;
}

message PowerOffServerRequest {
  // ID of the server to power off.
  //
  // To get the server ID, use a [ServerService.List] request.
  string server_id = 1 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "20"
  ];
}

message PowerOffServerMetadata {
  // ID of the Server resource that is being powered off.
  string server_id = 1;
}

message PowerOnServerRequest {
  // ID of the server to power on.
  //
  // To get the server ID, use a [ServerService.List] request.
  string server_id = 1 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "20"
  ];
}

message PowerOnServerMetadata {
  // ID of the Server resource that is being powered on.
  string server_id = 1;
}

message RebootServerRequest {
  // ID of the server to reboot.
  //
  // To get the server ID, use a [ServerService.List] request.
  string server_id = 1 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "20"
  ];
}

message RebootServerMetadata {
  // ID of the Server resource that is being rebooted.
  string server_id = 1;
}

message ReinstallServerRequest {
  reserved 2 to 5, 7, 8;

  // Reserved for future use.
  reserved 6;

  // ID of the server to reinstall.
  //
  // To get the server ID, use a [ServerService.List] request.
  string server_id = 1 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "20"
  ];

  // Operating system specific settings for provisioning the server.
  OsSettingsSpec os_settings_spec = 9;
}

message ReinstallServerMetadata {
  // ID of the Server resource that is being reinstalled.
  string server_id = 1;
}

message ListServerOperationsRequest {
  // Reserved for future use.
  reserved 2 to 99;

  // ID of the Server resource to list operations for.
  string server_id = 1 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "20"
  ];

  // The maximum number of results per page to return. If the number of available
  // results is greater than `page_size`,
  // the service returns a [ListServerOperationsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value is 20.
  int64 page_size = 100 [(value) = "<=100"];

  // Page token. To get the next page of results, set `page_token` to the
  // [ListServerOperationsResponse.next_page_token] returned by a previous list request.
  string page_token = 101;
}

message ListServerOperationsResponse {
  // Reserved for future use.
  reserved 2 to 99;

  // List of operations for the specified Server resource.
  repeated operation.Operation operations = 1;

  // Token for getting the next page of the list. If the number of results is greater than
  // [ListServerOperationsRequest.page_size], use `next_page_token` as the value
  // for the [ListServerOperationsRequest.page_token] parameter in the next list request.
  //
  // Each subsequent page will have its own `next_page_token` to continue paging through the results.
  string next_page_token = 100;
}

message BatchCreateServersRequest {
  reserved 6 to 10, 12 to 14;

  // Reserved for future use.
  reserved 17 to 199, 201 to 299;

  // ID of the folder to list images in.
  //
  // To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 1 [
    (pattern) = "[a-z][a-z0-9.-]*",
    (length) = "<=50"
  ];

  // Name of the server.
  // The name must be unique within the folder.
  string name = 2 [
    (pattern) = "[a-z]([-a-z0-9]*[a-z0-9])?",
    (length) = "2-56"
  ];

  // Description of the server.
  string description = 3 [(length) = "<=1024"];

  // ID of the hardware pool that the server belongs to.
  //
  // To get the hardware pool ID, use a [HardwarePoolService.List] request.
  string hardware_pool_id = 4 [(length) = "<=20"];

  // ID of the configuration to use for the server.
  //
  // To get the configuration ID, use a [ConfigurationService.List] request.
  string configuration_id = 5 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "20"
  ];

  // A period of time for which the server is rented.
  string rental_period_id = 11 [(length) = "<=20"];

  // Network configuration for the server. Specifies how the network interface is configured
  // to interact with other servers on the internal network and on the internet.
  // Currently up to 2 network interfaces are supported: required private network interface and
  // optional public network interface.
  repeated NetworkInterfaceSpec network_interfaces = 15 [(size) = "<=2"];

  // Operating system specific settings for provisioning the server. Optional, if omitted, the
  // server will be created without an operating system.
  OsSettingsSpec os_settings_spec = 16;

  // Resource labels as `key:value` pairs.
  map<string, string> labels = 200 [
    (yandex.cloud.size) = "<=64",
    (length) = "<=63",
    (pattern) = "[-_0-9a-z]*",
    (map_key).length = "1-63",
    (map_key).pattern = "[a-z][-_0-9a-z]*"
  ];

  // Number of servers to create.
  int64 count = 300 [(value) = "1-100"];
}

message BatchCreateServersResponse {
  // List of Server resources that were created.
  repeated Server servers = 1;
}

message BatchCreateServersMetadata {
  // IDs of the servers that were created.
  repeated string server_ids = 1;
}

message QuarantineServerMetadata {
  // ID of the server that is being quarantined.
  string server_id = 1;
}

message StartProlongationRequest {
  // ID of the server that is being prolonged.
  string server_id = 1 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "20"
  ];
}

message StopProlongationRequest {
  // ID of the server to stop prolongation for.
  //
  // To get the server ID, use a [ServerService.List] request.
  string server_id = 1 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "20"
  ];
}

message ServerSetProlongationMetadata {
  // ID of the server for which the prolongation is being set.
  string server_id = 1;
}

message OsSettingsSpec {
  reserved 3, 6 to 9;

  // ID of the image that the server was created from.
  string image_id = 1 [
    (pattern) = "[a-z][a-z0-9]*",
    (length) = "<=20"
  ];

  // List of storages to be created on the server. If not specified, the default value based on the
  // selected configuration will be used as the field value.
  repeated Storage storages = 2;

  // Root user SSH key.
  oneof ssh_key {
    option (exactly_one) = true;

    // Public SSH key for the server.
    string ssh_public_key = 4 [(length) = "<=20000"];

    // ID of the user SSH key to use for the server.
    //
    // To get the user SSH key ID, use a [yandex.cloud.organizationmanager.v1.UserSshKeyService.List] request.
    string user_ssh_id = 5 [(length) = "<=50"];
  }

  // Password for the server.
  oneof password {
    option (exactly_one) = true;

    // Raw password.
    string password_plain_text = 10 [(length) = ">=6"];

    // Reference to the Lockbox secret used to obtain the password.
    LockboxSecret password_lockbox_secret = 11;
  }
}

message LockboxSecret {
  // The unique identifier for the lockbox secret that contains the user password.
  string secret_id = 1 [ (required) = true ];

  // The unique identifier for the lockbox version.
  // If omitted, the current version of the secret will be used.
  string version_id = 2;

  // The key used to access a specific secret entry.
  string key = 3 [ (required) = true ];
}

syntax = "proto3";
package yandex.cloud.ai.ocr.v1;

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/ocr/v1;ocr";
option java_package = "yandex.cloud.api.ai.ocr.v1";


message Polygon {
    // The bounding polygon vertices.
    repeated Vertex vertices = 1;
}

message Vertex {
    // X coordinate in pixels.
    int64 x = 1;

    // Y coordinate in pixels.
    int64 y = 2;
}

enum Angle {
    ANGLE_UNSPECIFIED = 0;
    ANGLE_0 = 1;
    ANGLE_90 = 2;
    ANGLE_180 = 3;
    ANGLE_270 = 4;
}

message TextAnnotation {
    // Page width in pixels.
    int64 width = 1;

    // Page height in pixels.
    int64 height = 2;

    // Recognized text blocks in this page.
    repeated Block blocks = 3;

    // Recognized entities.
    repeated Entity entities = 4;

    repeated Table tables = 5;

    // Full text recognized from image.
    string full_text = 6;

    // Angle of image rotation.
    Angle rotate = 7;

    // Full markdown (without pictures inside) from image. Available only in markdown and math-markdown models.
    string markdown = 8;

    // List of pictures locations from image.
    repeated Picture pictures = 9;
}

message Entity {
    // Entity name.
    string name = 1;

    // Recognized entity text.
    string text = 2;
}

message Block {
    // Area on the page where the text block is located.
    Polygon bounding_box = 1;

    // Recognized lines in this block.
    repeated Line lines = 2;

    message DetectedLanguage {
        // Detected language code.
        string language_code = 1;
    }
    // A list of detected languages
    repeated DetectedLanguage languages = 3;

    // Block position from full_text string.
    repeated TextSegments text_segments = 4;

    // Block layout type.
    LayoutType layout_type = 5;
}

message Line {
    // Area on the page where the line is located.
    Polygon bounding_box = 1;

    // Recognized text.
    string text = 2;

    // Recognized words.
    repeated Word words = 3;

    // Line position from full_text string.
    repeated TextSegments text_segments = 4;

    // Angle of line rotation.
    Angle orientation = 5;
}

message Word {
    // Area on the page where the word is located.
    Polygon bounding_box = 1;

    // Recognized word value.
    string text = 2;

    // ID of the recognized word in entities array.
    int64 entity_index = 3;

    // Word position from full_text string.
    repeated TextSegments text_segments = 4;
}

message TextSegments {
    // Start character position from full_text string.
    int64 start_index = 1;

    // Text segment length.
    int64 length = 2;
}

message Table {
    // Area on the page where the table is located.
    Polygon bounding_box = 1;

    // Number of rows in table.
    int64 row_count = 2;

    // Number of columns in table.
    int64 column_count = 3;

    // Table cells.
    repeated TableCell cells = 4;
}

message TableCell {
    // Area on the page where the table cell is located.
    Polygon bounding_box = 1;

    // Row index.
    int64 row_index = 2;

    // Column index.
    int64 column_index = 3;

    // Column span.
    int64 column_span = 4;

    // Row span.
    int64 row_span = 5;

    // Text in cell.
    string text = 6;

    // Table cell position from full_text string.
    repeated TextSegments text_segments = 7;
}

message Picture {
    // Area on the page where the picture is located.
    Polygon bounding_box = 1;

    // Confidence score of picture location.
    double score = 2;
}

enum LayoutType {
    LAYOUT_TYPE_UNSPECIFIED = 0;
    LAYOUT_TYPE_UNKNOWN = 1;
    LAYOUT_TYPE_TEXT = 2;
    LAYOUT_TYPE_HEADER = 3;
    LAYOUT_TYPE_SECTION_HEADER = 4;
    LAYOUT_TYPE_FOOTER = 5;
    LAYOUT_TYPE_FOOTNOTE = 6;
    LAYOUT_TYPE_PICTURE = 7;
    LAYOUT_TYPE_CAPTION = 8;
    LAYOUT_TYPE_TITLE = 9;
    LAYOUT_TYPE_LIST = 10;
}

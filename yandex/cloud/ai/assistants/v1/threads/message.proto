syntax = "proto3";

package yandex.cloud.ai.assistants.v1.threads;

import "google/protobuf/timestamp.proto";
import "yandex/cloud/ai/assistants/v1/searchindex/search_index.proto";
import "yandex/cloud/ai/files/v1/file.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/assistants/v1/threads;threads";
option java_package = "yandex.cloud.api.ai.assistants.v1.threads";

message Message {
  // Enum representing the status of a message.
  enum MessageStatus {
    // Unspecified message status.
    MESSAGE_STATUS_UNSPECIFIED = 0;

    // Message was successfully created by a user or generated by an assistant.
    COMPLETED = 1;

    // Message generation was truncated due to reaching the maximum allowed number of tokens.
    TRUNCATED = 2;

    // Message generation was stopped because potentially sensitive content was detected either in the prompt or in the generated response.
    FILTERED_CONTENT = 3;
  }

  // Unique identifier of the message.
  string id = 1;

  // ID of the thread that this message belongs to.
  string thread_id = 2;

  // Identifier of the subject who created this message.
  string created_by = 3;

  // Timestamp representing when the message was created.
  google.protobuf.Timestamp created_at = 4;

  // Author of the message, containing details about the message's creator.
  Author author = 5;

  // Set of key-value pairs that can be used to organize and categorize the message.
  map<string, string> labels = 6;

  // Content of the message.
  MessageContent content = 7;

  // Status of the message.
  MessageStatus status = 8;

  // List of citations used to generate the message.
  repeated Citation citations = 9;
}

// Represents the content of a message, which can consist of multiple parts.
message MessageContent {
  // A list of content parts that make up the message.
  repeated ContentPart content = 1;
}

// Represents the data required to create or initialize a message in a thread.
// This message is used, for example, to initialize a thread with some messages upon its creation.
message MessageData {
  // Author of the message, containing details about the message's creator.
  Author author = 1;

  // Set of key-value pairs that can be used to organize and categorize the message.
  map<string, string> labels = 2;

  // Content of the message.
  MessageContent content = 3;
}

// Text represents a textual content part of a message.
message Text {
  // Text content of the message.
  string content = 1;
}

// ContentPart represents an individual part of the message content, which can be of various types.
message ContentPart {
  // Specifies the type of content that the part contains.
  oneof PartType {
    // Text content of the message part.
    Text text = 1;
  }
}

// Author of the message, containing details about the message's creator.
message Author {
  // Unique identifier of the author. This could be either the user's ID or the assistant's ID, depending on the role.
  string id = 1;

  // Role of the author, indicating whether the message was created by a "user" or an "assistant".
  string role = 2;
}

// Represents a citation used for generating a message.
message Citation {
  // List of sources for citation.
  repeated Source sources = 4;
}

// Represents a source used for generating a message citation.
message Source {
  // Specifies the type of source type.
  oneof SourceType {
    // File chunk source.
    FileChunk chunk = 1;
  }
}

// FileChunk represents a chunk of a file used as a source.
message FileChunk {
  // Search index associated with the file chunk.
  yandex.cloud.ai.assistants.v1.searchindex.SearchIndex search_index = 1;

  // The original file from which the chunk is derived.
  yandex.cloud.ai.files.v1.File source_file = 2;

  // Content of the file chunk.
  ChunkContent content = 3;
}

// Represents the content of a file chunk.
message ChunkContent {
  // A list of content parts that make up the chunk.
  repeated ContentPart content = 1;
}

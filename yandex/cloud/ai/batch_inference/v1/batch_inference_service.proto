syntax = "proto3";

package yandex.cloud.ai.batch_inference.v1;

import "yandex/cloud/validation.proto";
import "yandex/cloud/ai/batch_inference/v1/batch_inference_task.proto";


option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/batch_inference/v1;fomo";
option java_package = "yandex.cloud.api.ai.batch_inference.v1";


service BatchInferenceService {
  // Describes a concrete task
  rpc Describe (DescribeBatchInferenceRequest) returns (DescribeBatchInferenceResponse);
  // Lists tasks in folder
  rpc List (ListBatchInferencesRequest) returns (ListBatchInferencesResponse);
  // Cancels a concrete task
  rpc Cancel (CancelBatchInferenceRequest) returns (CancelBatchInferenceResponse);
  // Deletes a concrete task
  rpc Delete (DeleteBatchInferenceRequest) returns (DeleteBatchInferenceResponse);
}

message BatchInferenceMetadata {
  string task_id = 1;
  BatchInferenceTask.Status task_status = 2;

  int64 completed_batches = 3;
  int64 total_batches = 4;
}

message BatchInferenceResponse {
  BatchInferenceTask task = 1;
}

message DescribeBatchInferenceRequest {
  // Required task id
  string task_id = 1 [(required) = true];
}

message DescribeBatchInferenceResponse {
  BatchInferenceTask task = 1;
}

message ListBatchInferencesRequest {
  // Folder ID for which the list of tasks will be provided.
  string folder_id = 1 [(required) = true];

  int64 page_size = 2;
  string page_token = 3;

  // Batch inference status for filtering
  BatchInferenceTask.Status status = 4;
}

message ListBatchInferencesResponse {
  repeated BatchInferenceTask tasks = 1;
  string next_page_token = 2;
}

message CancelBatchInferenceRequest {
  // Task ID that should be canceled.
  string task_id = 1 [(required) = true];
}

message CancelBatchInferenceResponse {
  string task_id = 1;
}

message DeleteBatchInferenceRequest {
  // Task ID that should be deleted.
  string task_id = 1 [(required) = true];
}

message DeleteBatchInferenceResponse {
  string task_id = 1;
}

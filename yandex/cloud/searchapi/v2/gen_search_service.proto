syntax = "proto3";

package yandex.cloud.searchapi.v2;


import "yandex/cloud/validation.proto";
import "yandex/cloud/searchapi/v2/search_query.proto";
import "google/api/annotations.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/searchapi/v2;searchapi";
option java_package = "yandex.cloud.api.search.v2";

// A set of methods for searching the Yandex search database using YandexGPT generative AI.
service GenSearchService {
  rpc Search (GenSearchRequest) returns (stream GenSearchResponse) {
    option (google.api.http) = { post: "/v2/gen/search" body: "*" };
  }
}

enum Role {
  ROLE_UNSPECIFIED = 0;
  // The message is sent by the user.
  ROLE_USER = 1;
  // The message is sent by the model.
  ROLE_ASSISTANT = 2;
}

message GenSearchMessage {
  // Text of user query or the model's response (depending on the role value).
  string content = 1 [(required) = true, (length) = "<=16384"];
  // Message sender's role
  Role role = 2 [(required) = true];
}

message GenSearchRequest {
  message SiteOption {
    // Restricts the search to the specific websites.
    repeated string site  = 1 [(length) = "<=1024", (size) = "<=100"];
  }

  message UrlOption {
    // Restricts the search to the specific pages.
    repeated string url = 1 [(length) = "<=1024", (size) = "<=100"];
  }

  message HostOption {
    // Restricts the search to the specific hosts.
    repeated string host = 1 [(length) = "<=1024", (size) = "<=100"];
  }

  message SearchFilter {
    enum DocFormat {
      DOC_FORMAT_UNSPECIFIED = 0;
      DOC_FORMAT_PDF = 1;
      DOC_FORMAT_XLS = 2;
      DOC_FORMAT_ODS = 3;
      DOC_FORMAT_RTF = 4;
      DOC_FORMAT_PPT = 5;
      DOC_FORMAT_ODP = 6;
      DOC_FORMAT_SWF = 7;
      DOC_FORMAT_ODT = 8;
      DOC_FORMAT_ODG = 9;
      DOC_FORMAT_DOC = 10;
    }

    oneof filter_options {
      // Restrict by document date. See https://yandex.ru/support/search/ru/query-language/search-operators details.
      string date = 1 [(length) = "<=25"];
      // Restrict by document language. Use ISO 639-1 language codes.
      string lang = 2 [(length) = "2"];
      // Restrict by document format.
      DocFormat format = 3;
    }
  }

  // Single search query or a search query with context in the form of chat with the model.
  repeated GenSearchMessage messages = 1 [(size) = "1-100"];
  // ID of the folder.
  string folder_id = 2 [(required) = true, (length) = "<=50"];
  // Restricts the search to the specific websites, hosts or pages.
  oneof  site_options {
    SiteOption site = 3;
    HostOption host = 4;
    UrlOption  url  = 5;
  }
  // Fix query misspells.
  bool   fix_misspell = 6;
  // Use the documents inaccessible from the site's front page.
  bool   enable_nrfm_docs = 7;
  // Restricts the search by date, document formats or language.
  repeated SearchFilter search_filters = 8 [(size) = "<=10"];
  // Search type that determines the domain name that will be used for the search queries.
  SearchQuery.SearchType search_type = 9;
  // Get partial results
  bool get_partial_results = 10;
}

message GenSearchResponse {
  message Source {
    // Document URL.
    string url   = 1;
    // Document title.
    string title = 2;
    // The document was used in the answer.
    bool   used = 3;
  }

  message SearchQuery {
    // Query text.
    string text   = 1;
    // Query ID in Yandex Search.
    string req_id = 2;
  }

  // The text of the generative response.
  GenSearchMessage      message = 1;
  // The documents used to form the generative response.
  repeated Source       sources = 2;
  // The search queries, refined by the YandexGPT model and used for the generative response.
  repeated SearchQuery  search_queries = 3;
  // The text of the search query with fixed misspells.
  string                fixed_misspell_query = 4;
  // The model failed to answer due to the ethical concerns.
  bool                  is_answer_rejected = 5;
  // A bullet answer in case the model cannot give a proper response and returns a set of bullets with various data.
  bool                  is_bullet_answer = 6;
  // Search hints
  repeated string       hints = 7;
}

syntax = "proto3";

package yandex.cloud.organizationmanager.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/organizationmanager/v1/mfa_enforcement.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1;organizationmanager";
option java_package = "yandex.cloud.api.organizationmanager.v1";

// a set of methods for managing MFA enforcements
service MfaEnforcementService {
  rpc Create (CreateMfaEnforcementRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "CreateMfaEnforcementMetadata"
      response: "MfaEnforcement"
    };
  }
  rpc Update (UpdateMfaEnforcementRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateMfaEnforcementMetadata"
      response: "MfaEnforcement"
    };
  }
  rpc Activate (ActivateMfaEnforcementRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "ActivateMfaEnforcementMetadata"
      response: "MfaEnforcement"
    };
  }
  rpc Deactivate (DeactivateMfaEnforcementRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "DeactivateMfaEnforcementMetadata"
      response: "MfaEnforcement"
    };
  }
  rpc Delete (DeleteMfaEnforcementRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteMfaEnforcementMetadata"
      response: "google.protobuf.Empty"
    };
  }
  rpc Get (GetMfaEnforcementRequest) returns (MfaEnforcement) {}
  rpc List (ListMfaEnforcementsRequest) returns (ListMfaEnforcementsResponse) {}
  rpc UpdateAudience (UpdateAudienceRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateAudienceMetadata"
      response: "UpdateAudienceResponse"
    };
  }
  rpc ListAudience (ListAudienceRequest) returns (ListAudienceResponse) {}
}

message CreateMfaEnforcementRequest {
  string organization_id = 1 [(required) = true, (length) = "<=50"];
  string acr_id = 2 [(required) = true, (length) = "<=50"];
  google.protobuf.Duration ttl = 3 [(required) = true, (value) = "<=8760h"]; // max 1 year
  Status status = 4 [(required) = true];
  google.protobuf.Timestamp apply_at = 5;
  google.protobuf.Duration enroll_window = 6 [(required) = true];
  string name = 7 [(required) = true, (pattern) = "[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];
  string description = 8 [(length) = "<=256"];

  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_ACTIVE = 1;
    STATUS_INACTIVE = 2;
  }
}

message CreateMfaEnforcementMetadata {
  string organization_id = 2;
  string mfa_enforcement_id = 3;
}

message UpdateMfaEnforcementRequest {
  string mfa_enforcement_id = 1 [(required) = true, (length) = "<=50"];
  string acr_id = 2 [(length) = "<=50"];
  google.protobuf.Duration ttl = 3 [(value) = "<=8760h"]; // max 1 year
  Status status = 4;
  google.protobuf.Timestamp apply_at = 5;
  google.protobuf.Duration enroll_window = 6;
  google.protobuf.FieldMask update_mask = 7;
  string name = 8 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];
  string description = 9 [(length) = "<=256"];

  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_ACTIVE = 1;
    STATUS_INACTIVE = 2;
  }
}

message UpdateMfaEnforcementMetadata {
  string mfa_enforcement_id = 2;
}

message ActivateMfaEnforcementRequest {
  string mfa_enforcement_id = 1 [(required) = true, (length) = "<=50"];
}

message ActivateMfaEnforcementMetadata {
  string mfa_enforcement_id = 2;
}

message DeactivateMfaEnforcementRequest {
  string mfa_enforcement_id = 1 [(required) = true, (length) = "<=50"];
}

message DeactivateMfaEnforcementMetadata {
  string mfa_enforcement_id = 2;
}

message DeleteMfaEnforcementRequest {
  string mfa_enforcement_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteMfaEnforcementMetadata {
  string mfa_enforcement_id = 2;
}

message GetMfaEnforcementRequest {
  string mfa_enforcement_id = 1 [(required) = true, (length) = "<=50"];
}

message ListMfaEnforcementsRequest {
  string organization_id = 1 [(required) = true, (length) = "<=50"];
  int64 page_size = 2 [(value) = "0-1000"];
  string page_token = 3 [(length) = "<=2000"];
}

message ListMfaEnforcementsResponse {
  repeated MfaEnforcement mfa_enforcements = 1;
  string next_page_token = 2;
}

message UpdateAudienceRequest {
  string mfa_enforcement_id = 1 [(required) = true, (length) = "<=50"];
  repeated AudienceDelta audience_deltas = 2 [(size) = "1-1000"];
}

message UpdateAudienceResponse {
  string mfa_enforcement_id = 1 [(required) = true, (length) = "<=50"];
  repeated AudienceDelta effective_deltas = 2;
}

message AudienceDelta {
  Action action = 1 [(required) = true];
  string subject_id = 2 [(required) = true, (length) = "<=100"];

  enum Action {
    ACTION_UNSPECIFIED = 0;
    ACTION_ADD = 1;
    ACTION_REMOVE = 2;
  }
}

message UpdateAudienceMetadata {
  string mfa_enforcement_id = 2;
}

message ListAudienceRequest {
  string mfa_enforcement_id = 1 [(required) = true, (length) = "<=50"];
  int64 page_size = 2 [(value) = "0-1000"];
  string page_token = 3 [(length) = "<=2000"];
}

message ListAudienceResponse {
  repeated Subject subjects = 1;
  string next_page_token = 2;

  message Subject {
    string id = 1;
    string type = 2;
  }
}

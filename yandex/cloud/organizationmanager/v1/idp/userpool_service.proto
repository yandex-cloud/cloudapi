syntax = "proto3";

package yandex.cloud.organizationmanager.v1.idp;

import "google/api/annotations.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/access/access.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/organizationmanager/v1/idp/userpool.proto";
import "yandex/cloud/validation.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/idp;idp";
option java_package = "yandex.cloud.api.organizationmanager.v1.idp";


// A set of methods for managing userpools.
service UserpoolService {
  // Returns the specified userpool.
  //
  // To get the list of available userpools, make a [List] request.
  rpc Get (GetUserpoolRequest) returns (Userpool) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/userpools/{userpool_id}" };
  }

  // Retrieves the list of userpools in the specified organization.
  rpc List (ListUserpoolsRequest) returns (ListUserpoolsResponse) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/userpools" };
  }

  // Creates a userpool in the specified organization.
  rpc Create (CreateUserpoolRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/userpools" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateUserpoolMetadata"
      response: "Userpool"
    };
  }

  // Updates the specified userpool.
  rpc Update (UpdateUserpoolRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/organization-manager/v1/idp/userpools/{userpool_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateUserpoolMetadata"
      response: "Userpool"
    };
  }

  // Deletes the specified userpool.
  rpc Delete (DeleteUserpoolRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/organization-manager/v1/idp/userpools/{userpool_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteUserpoolMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Returns the specified domain for a userpool.
  rpc GetDomain (GetUserpoolDomainRequest) returns (Domain) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/userpools/{userpool_id}/domains/{domain}" };
  }

  // Lists domains for the specified userpool.
  rpc ListDomains (ListUserpoolDomainsRequest) returns (ListUserpoolDomainsResponse) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/userpools/{userpool_id}/domains" };
  }

  // Adds a domain to the specified userpool.
  rpc AddDomain (AddUserpoolDomainRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/userpools/{userpool_id}/domains" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AddUserpoolDomainMetadata"
      response: "Domain"
    };
  }

  // Validates the specified domain for a userpool.
  rpc ValidateDomain (ValidateUserpoolDomainRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/userpools/{userpool_id}/domains/{domain}:validate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "ValidateUserpoolDomainMetadata"
      response: "Domain"
    };
  }

  // Deletes the specified domain from a userpool.
  rpc DeleteDomain (DeleteUserpoolDomainRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/organization-manager/v1/idp/userpools/{userpool_id}/domains/{domain}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteUserpoolDomainMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Lists operations for the specified userpool.
  rpc ListOperations (ListUserpoolOperationsRequest) returns (ListUserpoolOperationsResponse) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/userpools/{userpool_id}/operations" };
  }

  // Lists access bindings for the specified userpool.
  rpc ListAccessBindings (access.ListAccessBindingsRequest) returns (access.ListAccessBindingsResponse) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/userpools/{resource_id}:listAccessBindings" };
  }

  // Sets access bindings for the specified userpool.
  rpc SetAccessBindings (access.SetAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/userpools/{resource_id}:setAccessBindings" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "access.SetAccessBindingsMetadata"
      response: "access.AccessBindingsOperationResult"
    };
  }

  // Updates access bindings for the specified userpool.
  rpc UpdateAccessBindings (access.UpdateAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/organization-manager/v1/idp/userpools/{resource_id}:updateAccessBindings" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "access.UpdateAccessBindingsMetadata"
      response: "access.AccessBindingsOperationResult"
    };
  }
}

// Request to get a userpool.
message GetUserpoolRequest {
  // ID of the userpool to return.
  // To get the userpool ID, make a [UserpoolService.List] request.
  string userpool_id = 1 [(required) = true, (length) = "<=50"];
}

// Request to list userpools.
message ListUserpoolsRequest {
  // ID of the organization to list userpools in.
  string organization_id = 1 [(required) = true, (length) = "<=50"];
  
  // The maximum number of results per page to return.
  // If the number of available results is larger than [page_size],
  // the service returns a [ListUserpoolsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];
  
  // Page token. To get the next page of results, set [page_token]
  // to the [ListUserpoolsResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(length) = "<=2000"];
  
  // A filter expression that filters resources listed in the response.
  string filter = 4 [(length) = "<=1000"];
}

// Response message for [UserpoolService.List].
message ListUserpoolsResponse {
  // List of userpools.
  repeated Userpool userpools = 1;
  
  // This token allows you to get the next page of results for list requests.
  // If the number of results is larger than [ListUserpoolsRequest.page_size],
  // use the [next_page_token] as the value for the [ListUserpoolsRequest.page_token]
  // query parameter in the next list request.
  string next_page_token = 2;
}

// Request to create a userpool.
message CreateUserpoolRequest {
  // ID of the organization to create a userpool in.
  string organization_id = 1 [(required) = true, (length) = "<=50"];
  
  // Name of the userpool.
  // The name must be unique within the organization.
  string name = 2 [(required) = true, (pattern) = "[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];
  
  // Description of the userpool.
  string description = 3 [(length) = "<=256"];
  
  // Resource labels as key:value pairs.
  map<string, string> labels = 4 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
  
  // Default subdomain for the userpool.
  string default_subdomain = 5 [(required) = true, (length) = "<=63"];
  
  // User settings for the userpool.
  UserSettings user_settings = 6;
  
  // Password quality policy for the userpool.
  PasswordQualityPolicy password_quality_policy = 7;
  
  // Password lifetime policy for the userpool.
  PasswordLifetimePolicy password_lifetime_policy = 8;
  
  // Bruteforce protection policy for the userpool.
  BruteforceProtectionPolicy bruteforce_protection_policy = 9;
}

// Metadata for the [UserpoolService.Create] operation.
message CreateUserpoolMetadata {
  // ID of the userpool that is being created.
  string userpool_id = 1;
}

// Request to update a userpool.
message UpdateUserpoolRequest {
  // ID of the userpool to update.
  // To get the userpool ID, make a [UserpoolService.List] request.
  string userpool_id = 1 [(required) = true, (length) = "<=50"];
  
  // Field mask that specifies which fields of the userpool are going to be updated.
  google.protobuf.FieldMask update_mask = 2;

  // Name of the userpool.
  // The name must be unique within the organization.
  string name = 3 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];
  
  // Description of the userpool.
  string description = 4 [(length) = "<=256"];
  
  // Resource labels as key:value pairs.
  map<string, string> labels = 5 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
  
  // User settings for the userpool.
  UserSettings user_settings = 6;
  
  // Password quality policy for the userpool.
  PasswordQualityPolicy password_quality_policy = 7;
  
  // Password lifetime policy for the userpool.
  PasswordLifetimePolicy password_lifetime_policy = 8;
  
  // Bruteforce protection policy for the userpool.
  BruteforceProtectionPolicy bruteforce_protection_policy = 9;
}

// Metadata for the [UserpoolService.Update] operation.
message UpdateUserpoolMetadata {
  // ID of the userpool that is being updated.
  string userpool_id = 1;
}

// Request to delete a userpool.
message DeleteUserpoolRequest {
  // ID of the userpool to delete.
  // To get the userpool ID, make a [UserpoolService.List] request.
  string userpool_id = 1 [(required) = true, (length) = "<=50"];
}

// Metadata for the [UserpoolService.Delete] operation.
message DeleteUserpoolMetadata {
  // ID of the userpool that is being deleted.
  string userpool_id = 1;
}

// Request to get a domain for a userpool.
message GetUserpoolDomainRequest {
  // ID of the userpool to get a domain for.
  string userpool_id = 1;
  
  // Domain name.
  string domain = 2;
}

// Request to list domains for a userpool.
message ListUserpoolDomainsRequest {
  // ID of the userpool to list domains for.
  string userpool_id = 1;
  
  // The maximum number of results per page to return.
  int64 page_size = 2 [(value) = "0-1000"];
  
  // Page token for pagination.
  string page_token = 3 [(length) = "<=2000"];
  
  // A filter expression that filters resources listed in the response.
  string filter = 4 [(length) = "<=1000"];
}

// Response message for [UserpoolService.ListDomains].
message ListUserpoolDomainsResponse {
  // List of domains.
  repeated Domain domains = 1;
  
  // Token for getting the next page of the list.
  string next_page_token = 2;
}

// Request to add a domain to a userpool.
message AddUserpoolDomainRequest {
  // ID of the userpool to add a domain to.
  string userpool_id = 1;
  
  // Domain name to add.
  string domain = 2;
}

// Metadata for the [UserpoolService.AddDomain] operation.
message AddUserpoolDomainMetadata {
  // ID of the userpool.
  string userpool_id = 1;
  
  // Domain name being added.
  string domain = 2;
}

// Request to validate a domain for a userpool.
message ValidateUserpoolDomainRequest {
  // ID of the userpool to validate a domain for.
  string userpool_id = 1;
  
  // Domain name to validate.
  string domain = 2;
}

// Metadata for the [UserpoolService.ValidateDomain] operation.
message ValidateUserpoolDomainMetadata {
  // ID of the userpool.
  string userpool_id = 1;
  
  // Domain name being validated.
  string domain = 2;
}

// Request to delete a domain from a userpool.
message DeleteUserpoolDomainRequest {
  // ID of the userpool to delete a domain from.
  string userpool_id = 1;
  
  // Domain name to delete.
  string domain = 2;
}

// Metadata for the [UserpoolService.DeleteDomain] operation.
message DeleteUserpoolDomainMetadata {
  // ID of the userpool.
  string userpool_id = 1;
  
  // Domain name being deleted.
  string domain = 2;
}

// Request to list operations for a userpool.
message ListUserpoolOperationsRequest {
  // ID of the userpool to list operations for.
  string userpool_id = 1 [(length) = "<=50"];
  
  // The maximum number of results per page to return.
  int64 page_size = 2 [(value) = "0-1000"];
  
  // Page token for pagination.
  string page_token = 3 [(length) = "<=2000"];
}

// Response message for [UserpoolService.ListOperations].
message ListUserpoolOperationsResponse {
  // List of operations.
  repeated operation.Operation operations = 1;
  
  // Token for getting the next page of the list.
  string next_page_token = 2;
}

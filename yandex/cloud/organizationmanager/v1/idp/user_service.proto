syntax = "proto3";

package yandex.cloud.organizationmanager.v1.idp;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/organizationmanager/v1/idp/user.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/idp;idp";
option java_package = "yandex.cloud.api.organizationmanager.v1.idp";

// A set of methods for managing users in the Identity Provider system.
service UserService {
  // Returns the specified user.
  //
  // To get the list of available users, make a [List] request.
  rpc Get (GetUserRequest) returns (User) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/users/{user_id}" };
  }

  // Retrieves the list of users in the specified userpool.
  rpc List (ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/users" };
  }

  // Creates a user in the specified userpool.
  rpc Create (CreateUserRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/users" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateUserMetadata"
      response: "User"
    };
  }

  // Updates the specified user.
  rpc Update (UpdateUserRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/organization-manager/v1/idp/users/{user_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateUserMetadata"
      response: "User"
    };
  }

  // Deletes the specified user.
  rpc Delete (DeleteUserRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/organization-manager/v1/idp/users/{user_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteUserMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Sets the password for the authenticated user.
  rpc SetOwnPassword (SetOwnPasswordRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/users:setOwnPassword" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "SetOwnPasswordMetadata"
      response: "SetOwnPasswordResponse"
    };
  }

  // Sets the password for another user.
  rpc SetOthersPassword (SetOthersPasswordRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/users/{user_id}:setOthersPassword" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "SetOthersPasswordMetadata"
      response: "SetOthersPasswordResponse"
    };
  }

  // Suspends the specified user.
  rpc Suspend (SuspendUserRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/users/{user_id}:suspend" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "SuspendUserMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Reactivates a previously suspended user.
  rpc Reactivate (ReactivateUserRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/users/{user_id}:reactivate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "ReactivateUserMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Generates a new password.
  rpc GeneratePassword (GeneratePasswordRequest) returns (GeneratePasswordResponse) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/users:generatePassword" body: "*" };
  }

  // Returns metadata about the authenticated user's password.
  rpc GetSelfPasswordMetadata (google.protobuf.Empty) returns (PasswordMetadata) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/users:getSelfPasswordMetadata" };
  }

  // Converts a user to use external authentication.
  rpc ConvertToExternal (ConvertToExternalUserRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/users/{user_id}:convertToExternal" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "ConvertToExternalUserMetadata"
      response: "User"
    };
  }

  // Sets a password hash for the specified user.
  rpc SetPasswordHash (SetPasswordHashRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/users/{user_id}:setPasswordHash" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "SetPasswordHashMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Resolves external IDs to internal user IDs.
  rpc ResolveExternalIds (ResolveExternalIdsRequest) returns (ResolveExternalIdsResponse) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/users:resolveExternalIds" body: "*" };
  }
}

// Request to get a user by ID.
message GetUserRequest {
  // ID of the user to return.
  string user_id = 1 [(required) = true, (length) = "<=50"];
}

// Request to list users in a userpool.
message ListUsersRequest {
  // ID of the userpool to list users in.
  string userpool_id = 1 [(required) = true, (length) = "<=50"];
  // The maximum number of results per page to return.
  int64 page_size = 2 [(value) = "0-1000"];
  // Page token for pagination.
  string page_token = 3 [(length) = "<=2000"];
  // A filter expression that filters resources listed in the response.
  string filter = 4 [(length) = "<=1000"];
}

// Response message for [UserService.List].
message ListUsersResponse {
  // List of users.
  repeated User users = 1;
  // Token for getting the next page of the list.
  string next_page_token = 2;
}

// Request to create a new user.
message CreateUserRequest {
  // ID of the userpool to create the user in.
  string userpool_id = 1 [(required) = true, (length) = "<=50"];
  // Username for the new user.
  string username = 2 [(required) = true, (length) = "<=254", (pattern) = "[a-z0-9A-Z\\._-]{1,64}@.{1,256}"];
  // Full name of the user.
  string full_name = 4 [(required) = true, (length) = "<=256"];
  // First name of the user.
  string given_name = 5 [(length) = "<=256"];
  // Last name of the user.
  string family_name = 6 [(length) = "<=256"];
  // Email address of the user.
  string email = 7 [(length) = "<=254", (pattern) = "|(.{3,254})"];
  // Phone number of the user.
  string phone_number = 8 [(length) = "<=50"];

  reserved 3;

  // User credentials.
  oneof credentials {
    option (exactly_one) = true;

    // Password specification.
    PasswordSpec password_spec = 9;
    // Password hash.
    PasswordHash password_hash = 11;
  }

  // Whether the user is active. Default is true.
  google.protobuf.BoolValue is_active = 10;
  // External identifier for the user.
  string external_id = 12 [(length) = "<=256"];
}

// Metadata for the [UserService.Create] operation.
message CreateUserMetadata {
  // ID of the user that is being created.
  string user_id = 1;
}

// Request to update an existing user.
message UpdateUserRequest {
  // ID of the user to update.
  string user_id = 1 [(required) = true, (length) = "<=50"];
  // Field mask that specifies which fields of the user are going to be updated.
  google.protobuf.FieldMask update_mask = 2;
  // New username for the user.
  string username = 3 [(length) = "<=254", (pattern) = "|[a-z0-9A-Z\\._-]{1,64}@.{1,256}"];
  // New full name for the user.
  string full_name = 5 [(length) = "<=256"];
  // New first name for the user.
  string given_name = 6 [(length) = "<=256"];
  // New last name for the user.
  string family_name = 7 [(length) = "<=256"];
  // New email address for the user.
  string email = 8 [(length) = "<=254", (pattern) = "|(.{3,254})"];
  // New phone number for the user.
  string phone_number = 9 [(length) = "<=50"];

  reserved 4;
}

// Metadata for the [UserService.Update] operation.
message UpdateUserMetadata {
  // ID of the user that is being updated.
  string user_id = 1;
}

// Request to delete a user.
message DeleteUserRequest {
  // ID of the user to delete.
  string user_id = 1 [(required) = true, (length) = "<=50"];
}

// Metadata for the [UserService.Delete] operation.
message DeleteUserMetadata {
  // ID of the user that is being deleted.
  string user_id = 1;
}

// Request to suspend a user.
message SuspendUserRequest {
  // ID of the user to suspend.
  string user_id = 1  [(required) = true, (length) = "<=50"];
  // Reason for suspending the user.
  string reason = 2 [(required) = false, (length) = "<=256"];
}

// Metadata for the [UserService.Suspend] operation.
message SuspendUserMetadata {
  // ID of the user that is being suspended.
  string user_id = 1;
}

// Request to reactivate a suspended user.
message ReactivateUserRequest {
  // ID of the user to reactivate.
  string user_id = 1  [(required) = true, (length) = "<=50"];
}

// Metadata for the [UserService.Reactivate] operation.
message ReactivateUserMetadata {
  // ID of the user that is being reactivated.
  string user_id = 1;
}

// Request to set the authenticated user's password.
message SetOwnPasswordRequest {
  // New password specification.
  PasswordSpec password_spec = 1 [(required) = true];
  // Current password for verification.
  string old_password = 2 [(required) = true, (length) = "<=128"];
}

// Metadata for the [UserService.SetOwnPassword] operation.
message SetOwnPasswordMetadata {
  // ID of the user whose password is being changed.
  string user_id = 1;
}

// Response for the [UserService.SetOwnPassword] operation.
message SetOwnPasswordResponse {
}

// Request to set another user's password.
message SetOthersPasswordRequest {
  // ID of the user whose password to set.
  string user_id = 1  [(required) = true, (length) = "<=50"];
  // New password specification.
  PasswordSpec password_spec = 2 [(required) = true];
}

// Metadata for the [UserService.SetOthersPassword] operation.
message SetOthersPasswordMetadata {
  // ID of the user whose password is being set.
  string user_id = 1;
}

// Response for the [UserService.SetOthersPassword] operation.
message SetOthersPasswordResponse {
}

// Request to generate a new password.
message GeneratePasswordRequest {
}

// Response for the [UserService.GeneratePassword] operation.
message GeneratePasswordResponse {
  // Generated password specification.
  PasswordSpec password_spec = 1;
}

// Password specification.
message PasswordSpec {
  // The password string.
  string password = 1 [(required) = true, (length) = "<=128"];
  // Proof that the password was generated by the system.
  string generation_proof = 2 [(length) = "<=128"];
}

// Metadata about a user's password.
message PasswordMetadata {
  // Unique identifier of the password.
  string id = 1;
  // Type of the password.
  PasswordType type = 2;
  // Timestamp when the password was created.
  google.protobuf.Timestamp created_at = 3;
  // Timestamp when the password expires.
  google.protobuf.Timestamp expires_at = 4;
  // Information about the last usage of the password.
  PasswordUsage last_usage = 5;

  // Types of passwords.
  enum PasswordType {
    // The password type is not specified.
    PASSWORD_TYPE_UNSPECIFIED = 0;
    // Temporary password that must be changed on first use.
    TEMPORARY = 1;
    // Permanent password.
    PERMANENT = 2;
  }

  // Information about password usage.
  message PasswordUsage {
    // Timestamp when the password was last used.
    google.protobuf.Timestamp used_at = 1;
    // IP address from which the password was used.
    string ip_address = 2;
  }
}

// Request to convert a user to use external authentication.
message ConvertToExternalUserRequest {
  // ID of the user to convert.
  string user_id = 1 [(required) = true, (length) = "<=50"];
  // External identifier to associate with the user.
  string external_id = 2 [(required) = true, (length) = "<=256"];
}

// Metadata for the [UserService.ConvertToExternal] operation.
message ConvertToExternalUserMetadata {
  // ID of the user being converted.
  string user_id = 1;
  // External identifier being associated with the user.
  string external_id = 2;
}

// Request to set a password hash for a user.
message SetPasswordHashRequest {
  // ID of the user to set the password hash for.
  string user_id = 1 [(required) = true, (length) = "<=50"];
  // Password hash to set.
  PasswordHash hash = 2;
}

// Metadata for the [UserService.SetPasswordHash] operation.
message SetPasswordHashMetadata {
  // ID of the user whose password hash is being set.
  string user_id = 1;
}

// Password hash information.
message PasswordHash {
  // The password hash string.
  string password_hash = 1 [(required) = true, (length) = "<=128"];
  // Type of the password hash.
  PasswordHashType password_hash_type = 2 [(required) = true];

  // Types of password hashes.
  enum PasswordHashType {
    // The password hash type is not specified.
    PASSWORD_HASH_TYPE_UNSPECIFIED = 0;
    // Microsoft Active Directory MD4 hash.
    AD_MD4 = 1;
  }
}

// Request to resolve external IDs to internal user IDs.
message ResolveExternalIdsRequest {
  // ID of the userpool to resolve external IDs in.
  string userpool_id = 1 [(required) = true, (length) = "<=50"];
  // List of external IDs to resolve.
  repeated string external_ids = 2 [(size) = "1-1000", (length) = "<=256"];
}

// Information about a resolved user.
message ResolvedUser {
  // Internal user ID.
  string user_id = 1;
  // External identifier.
  string external_id = 2;
  // ID of the userpool the user belongs to.
  string userpool_id = 3;
}

// Response for the [UserService.ResolveExternalIds] operation.
message ResolveExternalIdsResponse {
  // List of resolved users.
  repeated ResolvedUser resolved_users = 1;
}

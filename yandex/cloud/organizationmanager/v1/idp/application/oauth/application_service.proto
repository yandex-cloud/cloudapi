syntax = "proto3";

package yandex.cloud.organizationmanager.v1.idp.application.oauth;

import "google/api/annotations.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/access/access.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/organizationmanager/v1/idp/application/oauth/application.proto";
import "yandex/cloud/validation.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/organizationmanager/v1/idp/application/oauth;oauth";
option java_package = "yandex.cloud.api.organizationmanager.v1.idp.application.oauth";

// A set of methods for managing OAuth application.
service ApplicationService {
  // Returns the specified OAuth application resource.
  //
  // To get the list of available OAuth applications, make a [List] request.
  rpc Get (GetApplicationRequest) returns (Application) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/application/oauth/applications/{application_id}" };
  }

  // Retrieves the list of OAuth applications in the specified organization.
  rpc List (ListApplicationsRequest) returns (ListApplicationsResponse) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/application/oauth/applications" };
  }

  // Creates an OAuth application in the specified organization.
  rpc Create (CreateApplicationRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/application/oauth/applications" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateApplicationMetadata"
      response: "Application"
    };
  }

  // Updates the specified OAuth application.
  rpc Update (UpdateApplicationRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/organization-manager/v1/idp/application/oauth/applications/{application_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateApplicationMetadata"
      response: "Application"
    };
  }

  // Sets status to SUSPENDED for the specified OAuth application.
  rpc Suspend (SuspendApplicationRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/application/oauth/applications/{application_id}:suspend" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "SuspendApplicationMetadata"
      response: "Application"
    };
  }

  // Sets status to ACTIVE for the specified OAuth application.
  rpc Reactivate (ReactivateApplicationRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/application/oauth/applications/{application_id}:reactivate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "ReactivateApplicationMetadata"
      response: "Application"
    };
  }

  // Deletes the specified OAuth application.
  rpc Delete (DeleteApplicationRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/organization-manager/v1/idp/application/oauth/applications/{application_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteApplicationMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Lists operations for the specified OAuth application.
  rpc ListOperations (ListApplicationOperationsRequest) returns (ListApplicationOperationsResponse) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/application/oauth/applications/{application_id}/operations" };
  }

  // Lists access bindings for the specified OAuth application.
  rpc ListAccessBindings (access.ListAccessBindingsRequest) returns (access.ListAccessBindingsResponse) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/application/oauth/applications/{resource_id}:listAccessBindings" };
  }

  // Sets access bindings for the specified OAuth application.
  rpc SetAccessBindings (access.SetAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/organization-manager/v1/idp/application/oauth/applications/{resource_id}:setAccessBindings" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "access.SetAccessBindingsMetadata"
      response: "access.AccessBindingsOperationResult"
    };
  }

  // Updates access bindings for the specified OAuth application.
  rpc UpdateAccessBindings (access.UpdateAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/organization-manager/v1/idp/application/oauth/applications/{resource_id}:updateAccessBindings" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "access.UpdateAccessBindingsMetadata"
      response: "access.AccessBindingsOperationResult"
    };
  }

  // Lists assignmnents for the specified OAuth application.
  rpc ListAssignments(ListAssignmentsRequest) returns (ListAssignmentsResponse) {
    option (google.api.http) = { get: "/organization-manager/v1/idp/application/oauth/applications/{application_id}:listAssignments" };
  }

  // Updates assignmnents for the specified OAuth application.
  rpc UpdateAssignments(UpdateAssignmentsRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/organization-manager/v1/idp/application/oauth/applications/{application_id}:updateAssignments" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateAssignmentsMetadata"
      response: "UpdateAssignmentsResponse"
    };
  }
}

// Request to get a OAuth application.
message GetApplicationRequest {
  // ID of the OAuth application to return.
  // To get the OAuth application ID, make a [ApplicationService.List] request.
  string application_id = 1 [(required) = true, (length) = "<=50"];
}

// Request to list OAuth applications.
message ListApplicationsRequest {
  // ID of the organization to list OAuth applications in.
  string organization_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return.
  // If the number of available results is larger than [page_size],
  // the service returns a [ListApplicationsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token]
  // to the [ListApplicationsResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(length) = "<=2000"];

  // A filter expression that filters resources listed in the response.
  string filter = 4 [(length) = "<=1000"];
}

// Response message for [ApplicationService.List].
message ListApplicationsResponse {
  // List of OAuth applications.
  repeated Application applications = 1;

  // This token allows you to get the next page of results for list requests.
  // If the number of results is larger than [ListApplicationsRequest.page_size],
  // use the [next_page_token] as the value for the [ListApplicationsRequest.page_token]
  // query parameter in the next list request.
  string next_page_token = 2;
}

// Request to create a OAuth application.
message CreateApplicationRequest {
  // Name of the OAuth application.
  // The name must be unique within the organization.
  string name = 1 [(required) = true, (length) = "<=100", (pattern) = "[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];

  // ID of the organization to create a OAuth application in.
  string organization_id = 2 [(required) = true, (length) = "<=50"];

  // Description of the OAuth application.
  string description = 3 [(length) = "<=256"];

  // Settings of the group claims
  GroupClaimsSettings group_claims_settings = 4;
  
  // Connection to the OAuth client with specified scopes
  ClientGrant client_grant = 5;

  // Resource labels as key:value pairs.
  map<string, string> labels = 6 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
}

// Metadata for the [ApplicationService.Create] operation.
message CreateApplicationMetadata {
  // ID of the OAuth application that is being created.
  string application_id = 1;
}

// Request to update a OAuth application.
message UpdateApplicationRequest {
  // ID of the OAuth application to update.
  // To get the OAuth application ID, make a [ApplicationService.List] request.
  string application_id = 1 [(required) = true, (length) = "<=50"];

  // Field mask that specifies which fields of the OAuth application are going to be updated.
  google.protobuf.FieldMask update_mask = 2;

  // Name of the OAuth application.
  // The name must be unique within the organization.
  string name = 3 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];

  // Description of the OAuth application.
  string description = 4 [(length) = "<=256"];

  // Settings of the group claims
  GroupClaimsSettings group_claims_settings = 5;

  // Connection to the OAuth client with specified scopes
  ClientGrant client_grant = 6;

  // Resource labels as key:value pairs.
  map<string, string> labels = 7 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
}

// Metadata for the [ApplicationService.Update] operation.
message UpdateApplicationMetadata {
  // ID of the OAuth application that is being updated.
  string application_id = 1;
}

// Request to suspend a OAuth application.
message SuspendApplicationRequest {
  // ID of the OAuth application to suspend.
  // To get the OAuth application ID, make a [ApplicationService.List] request.
  string application_id = 1  [(required) = true, (length) = "<=50"];
}

// Metadata for the [ApplicationService.Suspend] operation.
message SuspendApplicationMetadata {
  // ID of the OAuth application that is being suspended.
  string application_id = 1;
}

// Request to reactivate a OAuth application.
message ReactivateApplicationRequest {
  // ID of the OAuth application to reactivate.
  // To get the OAuth application ID, make a [ApplicationService.List] request.
  string application_id = 1  [(required) = true, (length) = "<=50"];
}

// Metadata for the [ApplicationService.Reactivate] operation.
message ReactivateApplicationMetadata {
  // ID of the OAuth application that is being reactivated.
  string application_id = 1;
}

// Request to delete a OAuth application.
message DeleteApplicationRequest {
  // ID of the OAuth application to delete.
  // To get the OAuth application ID, make a [ApplicationService.List] request.
  string application_id = 1 [(required) = true, (length) = "<=50"];
}

// Metadata for the [ApplicationService.Delete] operation.
message DeleteApplicationMetadata {
  // ID of the OAuth application that is being deleted.
  string application_id = 1;
}

// Request to list operations for a OAuth application.
message ListApplicationOperationsRequest {
  // ID of the OAuth application to list operations for.
  string application_id = 1 [(length) = "<=50"];

  // The maximum number of results per page to return.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token for pagination.
  string page_token = 3 [(length) = "<=2000"];
}

// Response message for [ApplicationService.ListOperations].
message ListApplicationOperationsResponse {
  // List of operations.
  repeated operation.Operation operations = 1;

  // Token for getting the next page of the list.
  string next_page_token = 2;
}

// An assignment for the OAuth application 
message Assignment {
  // ID of the subject to be assigned to the OAuth application.
  // Supported subject categories: UserAccount, ServiceAccount, Group, MetaGroup, PublicGroup.
  // In case subject ID is ID of the group, 
  // then such group becomes visible to the users of OAuth application in case [GroupDistributionType] has value ASSIGNED_GROUPS.
  string subject_id = 1 [(required) = true, (length) = "<=100"];
}

// The action within assignment delta that is being performed on an assignment
enum AssignmentAction {
  // Action unspecified
  ASSIGNMENT_ACTION_UNSPECIFIED = 0;
  
  // Add action
  ADD = 1;

  // Remove action
  REMOVE = 2;
}

// A delta of the 
message AssignmentDelta {
  // The action that is being performed on an assignment.
  AssignmentAction action = 1 [(required) = true];
  
  // An assignment for the OAuth application.
  Assignment assignment = 2 [(required) = true];
}

// Response message of the operation for the [ApplicationService.UpdateAssignments].
message UpdateAssignmentsResponse {
  // List of applied assignment deltas on the OAuth application
  repeated AssignmentDelta assignment_deltas = 1;
}

// Request to list assignments for a OAuth application.
message ListAssignmentsRequest {
  // ID of the OAuth application to update.
  // To get the OAuth application ID, make a [ApplicationService.List] request.
  string application_id = 1 [(required) = true, (length) = "<=50"];


  // The maximum number of results per page to return.
  // If the number of available results is larger than [page_size],
  // the service returns a [ListAssignmentsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token]
  // to the [ListAssignmentsResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(length) = "<=2000"];
}

// Response message for [ApplicationService.ListAssignments].
message ListAssignmentsResponse {
  // List of assignments.
  repeated Assignment assignments = 1;

  // This token allows you to get the next page of results for list requests.
  // If the number of results is larger than [ListAssignmentsRequest.page_size],
  // use the [next_page_token] as the value for the [ListAssignmentsRequest.page_token]
  // query parameter in the next list request.
  string next_page_token = 2;
}

// Request to update assignments for specified OAuth application.
message UpdateAssignmentsRequest {
  // ID of the OAuth application to update.
  // To get the OAuth application ID, make a [ApplicationService.List] request.
  string application_id = 1 [(required) = true, (length) = "<=50"];
  
  // List of assignment deltas to be applied on the OAuth application. Duplicates or invalid assignments are ignored.
  repeated AssignmentDelta assignment_deltas = 2 [(size) = "1-1000"];
}

// Metadata for the [ApplicationService.UpdateAssignments] operation.
message UpdateAssignmentsMetadata {
  // ID of the OAuth application that is being updated.
  string application_id = 1;
}

syntax = "proto3";

package yandex.cloud.storage.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/storage/v1/bucket.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/storage/v1;storage";
option java_package = "yandex.cloud.api.storage.v1";

// A set of methods for managing buckets.
service BucketService {
  // Retrieves the list of buckets in the specified folder.
  //
  // The following fields will not be returned for buckets in the list: [Bucket.policy], [Bucket.acl], [Bucket.cors],
  // [Bucket.website_settings], [Bucket.lifecycle_rules], [Bucket.tags].
  rpc List(ListBucketsRequest) returns (ListBucketsResponse) {
    option (google.api.http) = {get: "/storage/v1/buckets"};
  }

  // Returns the specified bucket.
  //
  // To get the list of all available buckets, make a [List] request.
  rpc Get(GetBucketRequest) returns (Bucket) {
    option (google.api.http) = {get: "/storage/v1/buckets/{name}"};
  }

  // Creates a bucket in the specified folder.
  rpc Create(CreateBucketRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/storage/v1/buckets"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateBucketMetadata"
      response: "Bucket"
    };
  }

  // Updates the specified bucket.
  //
  // In most cases, `storage.editor` role (see [documentation](/docs/storage/security/#storage-editor)) should be enough
  // to update a bucket, subject to its [policy](/docs/storage/concepts/policy).
  rpc Update(UpdateBucketRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/storage/v1/buckets/{name}"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateBucketMetadata"
      response: "Bucket"
    };
  }

  // Deletes the specified bucket.
  rpc Delete(DeleteBucketRequest) returns (operation.Operation) {
    option (google.api.http) = {delete: "/storage/v1/buckets/{name}"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteBucketMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Returns the statistics for the specified bucket.
  rpc GetStats(GetBucketStatsRequest) returns (BucketStats) {
    option (google.api.http) = {get: "/storage/v1/buckets/{name}:getStats"};
  }

  // Returns the HTTPS configuration for the specified bucket.
  rpc GetHTTPSConfig(GetBucketHTTPSConfigRequest) returns (HTTPSConfig) {
    option (google.api.http) = {get: "/storage/v1/buckets/{name}:getHttpsConfig"};
  }

  // Updates the HTTPS configuration for the specified bucket.
  //
  // The updated configuration could take up to 30 minutes to apply to the bucket.
  rpc SetHTTPSConfig(SetBucketHTTPSConfigRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/storage/v1/buckets/{name}:setHttpsConfig"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "SetBucketHTTPSConfigMetadata"
      response: "HTTPSConfig"
    };
  }

  // Deletes the HTTPS configuration for the specified bucket.
  rpc DeleteHTTPSConfig(DeleteBucketHTTPSConfigRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/storage/v1/buckets/{name}:deleteHttpsConfig"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteBucketHTTPSConfigMetadata"
      response: "google.protobuf.Empty"
    };
  }
}

message GetBucketRequest {
  enum View {
    VIEW_UNSPECIFIED = 0;

    // Returns basic information about a bucket.
    //
    // The following fields will _not_ be returned: [Bucket.acl], [Bucket.cors], [Bucket.website_settings],
    // [Bucket.lifecycle_rules], [Bucket.tags].
    VIEW_BASIC = 1;

    // Returns basic information and access control list (ACL) for the bucket.
    //
    // The following fields will _not_ be returned: [Bucket.cors], [Bucket.website_settings], [Bucket.lifecycle_rules],
    // [Bucket.tags].
    VIEW_ACL = 2;

    // Returns full information about a bucket.
    VIEW_FULL = 3;
  }

  // Name of the bucket to return.
  //
  // To get the bucket name, make a [BucketService.List] request.
  string name = 1 [(required) = true];

  // Scope of information about the bucket to return.
  //
  // Access to scopes is managed via [Identity and Access Management roles](/docs/storage/security),
  // bucket [ACL](/docs/storage/concepts/acl) and [policies](/docs/storage/concepts/policy).
  View view = 2;
}

message ListBucketsRequest {
  // ID of the folder to list buckets in.
  //
  // To get the folder ID, make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message ListBucketsResponse {
  // List of buckets in the specified folder.
  repeated Bucket buckets = 1;
}

message CreateBucketRequest {
  reserved 3;
  // Name of the bucket.
  //
  // The name must be unique within the platform. For naming limitations and rules, see
  // [documentation](/docs/storage/concepts/bucket#naming).
  string name = 1 [(required) = true];

  // ID of the folder to create a bucket in.
  //
  // To get the folder ID, make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 2 [
    (required) = true,
    (length) = "<=50"
  ];

  // Default storage class for objects in the bucket. Supported classes are standard storage (`STANDARD`), cold storage
  // (`COLD`, `STANDARD_IA`, `NEARLINE` all synonyms), and ice storage (`ICE` and `GLACIER` are synonyms).
  // For details, see [documentation](/docs/storage/concepts/storage-class).
  string default_storage_class = 4;

  // Maximum size of the bucket.
  // For details, see [documentation](/docs/storage/operations/buckets/limit-max-volume).
  int64 max_size = 5;

  // Flags for configuring public (anonymous) access to the bucket's content and settings.
  // For details, see [documentation](/docs/storage/concepts/bucket#bucket-access).
  AnonymousAccessFlags anonymous_access_flags = 6;

  // Access control list (ACL) of the bucket.
  // For details, see [documentation](/docs/storage/concepts/acl).
  ACL acl = 7;

  // List of tags for the bucket.
  // For details, see [documentation](/docs/resource-manager/concepts/labels).
  repeated Tag tags = 8;
}

message CreateBucketMetadata {
  // Name of the bucket that is being created.
  string name = 1;
}

message UpdateBucketRequest {
  // Name of the bucket to update.
  //
  // The name cannot be updated.
  //
  // To get the bucket name, make a [BucketService.List] request.
  string name = 1 [(required) = true];

  // Update mask that specifies which attributes of the bucket should be updated.
  // Use * for full update.
  google.protobuf.FieldMask update_mask = 2 [(required) = true];

  // Flags for configuring public (anonymous) access to the bucket's content and settings.
  // For details, see [documentation](/docs/storage/concepts/bucket#bucket-access).
  AnonymousAccessFlags anonymous_access_flags = 3;

  // Default storage class for objects in the bucket. Supported classes are standard storage (`STANDARD`), cold storage
  // (`COLD`, `STANDARD_IA`, `NEARLINE` all synonyms), and ice storage (`ICE` and `GLACIER` are synonyms).
  // For details, see [documentation](/docs/storage/concepts/storage-class).
  string default_storage_class = 4;

  // Maximum size of the bucket, in bytes.
  // For details, see [documentation](/docs/storage/operations/buckets/limit-max-volume).
  int64 max_size = 5;

  // List of rules for cross-domain requests to objects in the bucket (cross-origin resource sharing, CORS).
  // For details, see [documentation](/docs/storage/concepts/cors).
  repeated CorsRule cors = 6;

  // Configuration for hosting a static website in the bucket.
  // For details, see [documentation](/docs/storage/concepts/hosting).
  WebsiteSettings website_settings = 7;

  // Bucket versioning status.
  // For details, see [documentation](/docs/storage/concepts/versioning).
  Versioning versioning = 8;

  // List of object lifecycle rules for the bucket.
  // For details, see [documentation](/docs/storage/concepts/lifecycles).
  repeated LifecycleRule lifecycle_rules = 9;

  // Bucket policies that set permissions for actions with the bucket, its objects, and groups of objects.
  // For details, see [documentation](/docs/storage/concepts/policy).
  google.protobuf.Struct policy = 10;

  // Access control list (ACL) of the bucket.
  // For details, see [documentation](/docs/storage/concepts/acl).
  ACL acl = 11;

  // List of tags for the bucket.
  // For details, see [documentation](/docs/resource-manager/concepts/labels).
  repeated Tag tags = 12;

  // Configuration for object lock on the bucket.
  // For details about the concept, see [documentation](/docs/storage/concepts/object-lock).
  ObjectLock object_lock = 13;

  // Configuration for bucket's encryption
  // For detauls, see [documentation](/docs/storage/concepts/encryption)
  Encryption encryption = 14;

  // requires permission s3:PutBucketAllowedPrivateEndpoints
  BucketAllowedPrivateEndpoints allowed_private_endpoints = 15;
}

message UpdateBucketMetadata {
  // Name of the bucket that is being updated.
  string name = 1;
}

// DeleteBucketRequest deletes requested bucket from the Cloud.
message DeleteBucketRequest {
  // Name of the bucket to update.
  //
  // To get the bucket name, make a [BucketService.List] request.
  string name = 1 [(required) = true];
}

message DeleteBucketMetadata {
  // Name of the bucket that is being deleted.
  string name = 1;
}

message GetBucketStatsRequest {
  // Name of the bucket to return the statistics for.
  string name = 1 [(required) = true];
}

message GetBucketHTTPSConfigRequest {
  // Name of the bucket to return the HTTPS configuration for.
  string name = 1 [(required) = true];
}

message SelfManagedHTTPSConfigParams {
  // [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail)-encoded certificate.
  string certificate_pem = 1 [(length) = "<=3145728"];

  // [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail)-encoded private key for the certificate.
  string private_key_pem = 2 [(length) = "<=3145728"];
}

// A resource for a TLS certificate from Certificate Manager.
message CertificateManagerHTTPSConfigParams {
  // ID of the certificate.
  //
  // To get the list of all available certificates, make a [yandex.cloud.certificatemanager.v1.CertificateService.List]
  // request.
  string certificate_id = 1;
}

message SetBucketHTTPSConfigRequest {
  // Name of the bucket to update the HTTPS configuration for.
  string name = 1 [(required) = true];

  // HTTPS configuration parameters.
  oneof params {
    option (exactly_one) = true;

    // Your TLS certificate, uploaded directly.
    //
    // Object Storage only supports [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail)-encoded certificates.
    SelfManagedHTTPSConfigParams self_managed = 2;

    // TLS certificate from Certificate Manager.
    //
    // To create a certificate in Certificate Manager, make a
    // [yandex.cloud.certificatemanager.v1.CertificateService.Create] request.
    CertificateManagerHTTPSConfigParams certificate_manager = 3;
  }
}

message SetBucketHTTPSConfigMetadata {
  // Name of the bucket the HTTPS configuration is being updated for.
  string name = 1;
}

message DeleteBucketHTTPSConfigRequest {
  // Name of the bucket to delete the HTTPS configuration for.
  string name = 1 [(required) = true];
}

message DeleteBucketHTTPSConfigMetadata {
  // Name of the bucket the HTTPS configuration is being deleted for.
  string name = 1;
}

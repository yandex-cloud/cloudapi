syntax = "proto3";

package yandex.cloud.iam.v1.workload;

import "google/api/annotations.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/iam/v1/workload/federated_credential.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/iam/v1/workload;workload";
option java_package = "yandex.cloud.api.iam.v1.workload";

// A set of methods for managing federated credentials.
service FederatedCredentialService {

  // Returns the specified federated credential.
  //
  // To get the list of available federated credentials, make a [List] request.
  rpc Get (GetFederatedCredentialRequest) returns (FederatedCredential) {
    option (google.api.http) = { get: "/iam/v1/workload/federatedCredentials/{federated_credential_id}" };
  }

  // Retrieves the list of federated credentials for the specified service account.
  rpc List (ListFederatedCredentialsRequest) returns (ListFederatedCredentialsResponse) {
    option (google.api.http) = { get: "/iam/v1/workload/federatedCredentials" };
  }

  // Creates a federated credential for the specified service account.
  rpc Create (CreateFederatedCredentialRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/iam/v1/workload/federatedCredentials"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateFederatedCredentialMetadata"
      response: "FederatedCredential"
    };
  }

  // Deletes the specified federated credential.
  rpc Delete (DeleteFederatedCredentialRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/iam/v1/workload/federatedCredentials/{federated_credential_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteFederatedCredentialMetadata"
      response: "google.protobuf.Empty"
    };
  }
}

message GetFederatedCredentialRequest {
  // ID of the federated credential to return.
  // To get the federated credential ID, make a [FederatedCredentialService.List] request.
  string federated_credential_id = 1 [(required) = true, (length) = "<=50"];
}

message ListFederatedCredentialsRequest {
  // ID of the service account to list federated credentials for.
  // To get the the service account ID make a [yandex.cloud.iam.v1.ServiceAccountService.List] request.
  string service_account_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListFederatedCredentialsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token]
  // to the [ListFederatedCredentialsResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(length) = "<=2000"];
}

message ListFederatedCredentialsResponse {
  // List of federated credentials.
  repeated FederatedCredential federated_credentials = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListFederatedCredentialsRequest.page_size], use
  // the [next_page_token] as the value
  // for the [ListFederatedCredentialsRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message CreateFederatedCredentialRequest {
  // ID of the service account to create a federated credential for.
  // To get the service account ID, use a [yandex.cloud.iam.v1.ServiceAccountService.List] request.
  string service_account_id = 1 [(required) = true, (length) = "<=50"];

  // ID of the workload identity federation that is used for authentication.
  string federation_id = 2 [(required) = true, (length) = "<=50"];

  // Id of the external subject.
  string external_subject_id = 3 [(required) = true, (length) = "<=1000"];
}

message CreateFederatedCredentialMetadata {
  // ID of the federated credential that is being created.
  string federated_credential_id = 1;
}

message DeleteFederatedCredentialRequest {
  // ID of the federated credential key to delete.
  // To get the federated credential ID, use a [FederatedCredentialService.List] request.
  string federated_credential_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteFederatedCredentialMetadata {
  // ID of the federated credential that is being deleted.
  string federated_credential_id = 1;
}

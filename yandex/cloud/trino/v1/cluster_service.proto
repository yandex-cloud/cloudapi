syntax = "proto3";

package yandex.cloud.trino.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/trino/v1/access_control.proto";
import "yandex/cloud/trino/v1/catalog.proto";
import "yandex/cloud/trino/v1/cluster.proto";
import "yandex/cloud/trino/v1/maintenance.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/trino/v1;trino";
option java_package = "yandex.cloud.api.trino.v1";

// A set of methods for managing Trino Cluster resources.
service ClusterService {
  // Returns the specified Trino Cluster resource.
  rpc Get (GetClusterRequest) returns (Cluster) {
    option (google.api.http) = {get: "/managed-trino/v1/clusters/{cluster_id}"};
  }

  // Retrieves a list of Trino Cluster resources.
  rpc List (ListClustersRequest) returns (ListClustersResponse) {
    option (google.api.http) = {get: "/managed-trino/v1/clusters"};
  }

  // Creates a Trino Cluster resource.
  rpc Create (CreateClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/managed-trino/v1/clusters"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateClusterMetadata"
      response: "Cluster"
    };
  }

  // Updates configuration of the specified Trino cluster.
  rpc Update (UpdateClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/managed-trino/v1/clusters/{cluster_id}"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterMetadata"
      response: "Cluster"
    };
  }

  // Deletes the specified Trino Cluster resource.
  rpc Delete (DeleteClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {delete: "/managed-trino/v1/clusters/{cluster_id}"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Start the specified Trino Cluster resource.
  rpc Start (StartClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/managed-trino/v1/clusters/{cluster_id}:start"};
    option (yandex.cloud.api.operation) = {
      metadata: "StartClusterMetadata"
      response: "Cluster"
    };
  }

  // Stops the specified Trino Cluster resource.
  rpc Stop (StopClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/managed-trino/v1/clusters/{cluster_id}:stop"};
    option (yandex.cloud.api.operation) = {
      metadata: "StopClusterMetadata"
      response: "Cluster"
    };
  }

  // Retrieves the list of Operation resources for the specified cluster.
  rpc ListOperations (ListClusterOperationsRequest) returns (ListClusterOperationsResponse) {
    option (google.api.http) = {get: "/managed-trino/v1/clusters/{cluster_id}/operations"};
  }
}

message GetClusterRequest {
  // ID of the Trino Cluster resource to return.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message ListClustersRequest {
  // ID of the folder to list Trino clusters in.
  string folder_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the [ListClustersResponse.next_page_token]
  // returned by the previous list request.
  string page_token = 3 [(length) = "<=100"];

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
  // 2. An `=` operator.
  // 3. The value in double quotes (`"`). Must be 1-63 characters long and match the regular expression `[a-zA-Z0-9_-]+`.
  string filter = 4 [(length) = "<=1000"];
}

message ListClustersResponse {
  // List of Trino Cluster resources.
  repeated Cluster clusters = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
  // for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent
  // list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message CreateClusterRequest {
  // ID of the folder to create Trino cluster in.
  string folder_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // Name of the Trino cluster. The name must be unique within the folder.
  string name = 2 [
    (required) = true,
    (length) = "<=63",
    (pattern) = "[a-zA-Z0-9_-]*"
  ];

  // Description of the Trino cluster.
  string description = 3 [(length) = "<=256"];

  // Custom labels for the Trino cluster as `` key:value `` pairs.
  // For example: {"env": "prod"}.
  map<string, string> labels = 4 [
    (yandex.cloud.size) = "<=64",
    (length) = "<=63",
    (pattern) = "[-_0-9a-z]*",
    (map_key).length = "1-63",
    (map_key).pattern = "[a-z][-_0-9a-z]*"
  ];

  // Configuration of Trino components.
  TrinoConfigSpec trino = 5 [(required) = true];

  // Network related configuration options.
  NetworkConfig network = 6 [(required) = true];

  // Deletion Protection inhibits deletion of the cluster.
  bool deletion_protection = 7;

  // Service account used to access Cloud resources.
  string service_account_id = 8 [
    (required) = true,
    (length) = "<=50"
  ];

  // Cloud logging configuration.
  LoggingConfig logging = 9;

  // Window of maintenance operations.
  MaintenanceWindow maintenance_window = 10;
}

message TrinoConfigSpec {
  // List of catalogs that enable integration with various data sources.
  // Each catalog defines a connection to an external data source that Trino can query.
  repeated CatalogSpec catalogs = 1;

  // Configuration for the coordinator, specifying computational resources and other settings.
  CoordinatorConfig coordinator_config = 2 [(required) = true];

  // Configuration for worker nodes, including scaling policy and computational resources.
  WorkerConfig worker_config = 3 [(required) = true];

  // Configuration for retry policy, specifying the spooling storage destination and other settings.
  RetryPolicyConfig retry_policy = 4;

  reserved 5;

  // Trino version.
  // Format: "Number".
  string version = 6;

  // Configuration for access control, specifying the fine-grained access rules.
  AccessControlConfig access_control = 7;
}

message CreateClusterMetadata {
  // ID of the Trino cluster that is being created.
  string cluster_id = 1;
}

message UpdateCoordinatorConfig {
  // Configuration for computational resources assigned to the coordinator instance.
  Resources resources = 1;
}

message UpdateWorkerConfig {
  // Configuration for computational resources for worker instances.
  Resources resources = 1;

  // Configuration for scaling policy for worker instances.
  WorkerScalePolicy scale_policy = 2;

  message WorkerScalePolicy {
    // Defines the scaling type for worker instances.
    // Only one type of scaling can be specified at a time.
    oneof scale_type {
      option (exactly_one) = true;
      // A fixed scaling policy that specifies a fixed number of worker instances.
      FixedScalePolicy fixed_scale = 1;
      // A scaling policy that dynamically adjusts the number of worker instances
      // based on the cluster's workload. The system automatically increases or
      // decreases the number of instances within the defined range.
      AutoScalePolicy auto_scale = 2;
    }
  }
}

message UpdateTrinoConfigSpec {
  // Configuration for the coordinator, specifying computational resources and other settings.
  UpdateCoordinatorConfig coordinator_config = 1;

  // Configuration for worker nodes, including scaling policy and computational resources.
  UpdateWorkerConfig worker_config = 2;

  // Trino version.
  // Format: "Number".
  string version = 3;

  // Configuration for retry policy, specifying the spooling storage destination and other settings.
  RetryPolicyConfig retry_policy = 4;

  // Configuration for access control, specifying the fine-grained access rules.
  AccessControlConfig access_control = 5;
}

message UpdateNetworkConfigSpec {
  // User security groups.
  repeated string security_group_ids = 1;
}

message UpdateClusterRequest {
  // ID of the Trino cluster.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  google.protobuf.FieldMask update_mask = 2;

  // Name of the Trino cluster. The name must be unique within the folder.
  string name = 3 [
    (length) = "<=63",
    (pattern) = "[a-zA-Z0-9_-]*"
  ];

  // Description of the Trino cluster.
  string description = 4 [(length) = "<=256"];

  // Custom labels for the Trino cluster as `` key:value `` pairs.
  // For example: {"env": "prod"}.
  map<string, string> labels = 5 [
    (yandex.cloud.size) = "<=64",
    (length) = "<=63",
    (pattern) = "[-_0-9a-z]*",
    (map_key).length = "1-63",
    (map_key).pattern = "[a-z][-_0-9a-z]*"
  ];

  // Deletion Protection inhibits deletion of the cluster.
  bool deletion_protection = 6;

  // Configuration of Trino components.
  UpdateTrinoConfigSpec trino = 7;

  // Network related configuration options.
  UpdateNetworkConfigSpec network_spec = 8;

  // Service account used to access Cloud resources.
  string service_account_id = 9 [(length) = "<=50"];

  // Cloud logging configuration.
  LoggingConfig logging = 10;

  // Window of maintenance operations.
  MaintenanceWindow maintenance_window = 11;
}

message UpdateClusterMetadata {
  // ID of the Trino cluster that is being updated.
  string cluster_id = 1;
}

message DeleteClusterRequest {
  // ID of the Trino cluster that is being deleted.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message DeleteClusterMetadata {
  // ID of the deleting Trino cluster.
  string cluster_id = 1;
}

message StartClusterRequest {
  // ID of the Trino cluster that is being started.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message StartClusterMetadata {
  // ID of the Trino cluster.
  string cluster_id = 1;
}

message StopClusterRequest {
  // ID of the Trino cluster that is being stopped.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message StopClusterMetadata {
  // ID of the Trino cluster.
  string cluster_id = 1;
}

message ListClusterOperationsRequest {
  // ID of the Trino Cluster resource to list operations for.
  string cluster_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token.  To get the next page of results, set [page_token] to the [ListClusterOperationsResponse.next_page_token]
  // returned by the previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterOperationsResponse {
  // List of Operation resources for the specified Trino cluster.
  repeated operation.Operation operations = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
  // for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

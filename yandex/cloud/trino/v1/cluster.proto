syntax = "proto3";

package yandex.cloud.trino.v1;

import "google/protobuf/timestamp.proto";
import "yandex/cloud/logging/v1/log_entry.proto";
import "yandex/cloud/trino/v1/access_control.proto";
import "yandex/cloud/trino/v1/maintenance.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/trino/v1;trino";
option java_package = "yandex.cloud.api.trino.v1";

// Trino cluster.
message Cluster {
  enum Status {
    // Cluster state is unknown.
    STATUS_UNKNOWN = 0;

    // Cluster is being created.
    CREATING = 1;

    // Cluster is running normally.
    RUNNING = 2;

    // Cluster encountered a problem and cannot operate.
    ERROR = 3;

    // Cluster is stopping.
    STOPPING = 4;

    // Cluster is stopped.
    STOPPED = 5;

    // Cluster is starting.
    STARTING = 6;

    // Cluster is being updated.
    UPDATING = 7;
  }

  // Unique ID of the Trino cluster.
  // This ID is assigned by Cloud in the process of creating a Trino cluster.
  string id = 1;

  // ID of the folder that the Trino cluster belongs to.
  string folder_id = 2;

  // The time when the Trino cluster was created.
  google.protobuf.Timestamp created_at = 3;

  // Name of the Trino cluster.
  // The name is unique within the folder. 1-64 characters long.
  string name = 4;

  // Description of the Trino cluster. 0-256 characters long.
  string description = 5;

  // Resource labels as `key:value` pairs. Maximum of 64 per resource.
  map<string, string> labels = 6;

  // Monitoring systems relevant to the Trino cluster.
  repeated Monitoring monitoring = 7;

  // Configuration of the Trino cluster.
  TrinoConfig trino = 8;

  // Aggregated cluster health.
  Health health = 9;

  // Cluster status.
  Status status = 10;

  // Network related configuration options.
  NetworkConfig network = 11;

  // Deletion Protection inhibits deletion of the cluster.
  bool deletion_protection = 12;

  // Service account used to access Cloud resources.
  string service_account_id = 13 [(length) = "<=50"];

  // Cloud logging configuration.
  LoggingConfig logging = 14;

  // Address of Trino Coordinator.
  string coordinator_url = 15;

  // Window of maintenance operations.
  MaintenanceWindow maintenance_window = 16;

  // Maintenance operation planned at nearest maintenance_window.
  MaintenanceOperation planned_operation = 17;
}

// Monitoring system.
message Monitoring {
  // Name of the monitoring system.
  string name = 1;

  // Description of the monitoring system.
  string description = 2;

  // Link to the monitoring system.
  string link = 3;
}

message LoggingConfig {
  // Logs generated by the Trino components are delivered to Cloud Logging.
  bool enabled = 1;

  // Destination of log records.
  oneof destination {
    // Logs should be written to default log group for specified folder.
    string folder_id = 2 [(pattern) = "([a-zA-Z][-a-zA-Z0-9_.]{0,63})?"];

    // Logs should be written to log group resolved by ID.
    string log_group_id = 3 [(pattern) = "([a-zA-Z][-a-zA-Z0-9_.]{0,63})?"];
  }

  // Minimum log entry level.
  //
  // See [LogLevel.Level] for details.
  yandex.cloud.logging.v1.LogLevel.Level min_level = 4;
}

message NetworkConfig {
  // IDs of VPC network subnets where instances of the cluster are attached.
  repeated string subnet_ids = 1;

  // User security groups.
  repeated string security_group_ids = 2;
}

enum Health {
  HEALTH_UNKNOWN = 0; // Object is in unknown state (we have no data)
  ALIVE = 1; // Object is alive and well (all hosts are alive)
  DEAD = 2; // Object is inoperable (it cannot perform any of its essential functions)
  DEGRADED = 3; // Object is partially alive (it can perform some of its essential functions)
}

message TrinoConfig {
  // Configuration for the coordinator, specifying computational resources and other settings.
  CoordinatorConfig coordinator_config = 1 [(required) = true];

  // Configuration for worker nodes, including scaling policy and computational resources.
  WorkerConfig worker_config = 2 [(required) = true];

  // Version of Trino.
  string version = 3;

  // Configuration for retry policy, specifying the spooling storage destination and other settings.
  RetryPolicyConfig retry_policy = 4;

  // Configuration for access control, specifying the fine-grained rules of accesses.
  AccessControlConfig access_control = 5;
}

message CoordinatorConfig {
  // Configuration for computational resources assigned to the coordinator instance.
  Resources resources = 1 [(required) = true];
}

message WorkerConfig {
  // Configuration for computational resources for worker instances.
  Resources resources = 1 [(required) = true];

  // Configuration for scaling policy for worker instances.
  WorkerScalePolicy scale_policy = 2 [(required) = true];

  message WorkerScalePolicy {
    // Defines the scaling type for worker instances.
    // Only one type of scaling can be specified at a time.
    oneof scale_type {
      option (exactly_one) = true;
      // A fixed scaling policy that specifies a fixed number of worker instances.
      FixedScalePolicy fixed_scale = 1;
      // A scaling policy that dynamically adjusts the number of worker instances
      // based on the cluster's workload. The system automatically increases or
      // decreases the number of instances within the defined range.
      AutoScalePolicy auto_scale = 2;
    }
  }
}

message RetryPolicyConfig {
  enum RetryPolicy {
    RETRY_POLICY_UNSPECIFIED = 0;
    QUERY = 1;
    TASK = 2;
  }

  // Retry policy level.
  RetryPolicy policy = 1;

  // Configuration for exchange manager.
  ExchangeManagerConfig exchange_manager = 2;

  // Additional properties.
  map<string, string> additional_properties = 3 [
    (yandex.cloud.size) = "<=256",
    (length) = "<=128",
    (pattern) = "[-_0-9a-zA-Z.,:\\/_ ]*",
    (map_key).length = "1-128",
    (map_key).pattern = "[a-z][-_0-9a-z.]*"
  ];
}

message ExchangeManagerStorage {
  message ServiceS3 {
  }

  oneof type {
    option (exactly_one) = true;
    // Use service side s3 bucket for exchange manager.
    ServiceS3 service_s3 = 1;
  }
}

message ExchangeManagerConfig {
  // Additional properties.
  map<string, string> additional_properties = 1 [
    (yandex.cloud.size) = "<=256",
    (length) = "<=128",
    (pattern) = "[-_0-9a-zA-Z.,:\\/_ ]*",
    (map_key).length = "1-128",
    (map_key).pattern = "[a-z][-_0-9a-z.]*"
  ];

  ExchangeManagerStorage storage = 2;
}

message Resources {
  // ID of the preset for computational resources allocated to a instance (e.g., CPU, memory, etc.).
  string resource_preset_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message FixedScalePolicy {
  // Specifies the number of worker instances.
  int64 count = 1 [(value) = "1-512"];
}

message AutoScalePolicy {
  int64 min_count = 1 [(value) = "0-512"];
  int64 max_count = 2 [(value) = "1-512"];
}

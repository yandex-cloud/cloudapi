syntax = "proto3";

package yandex.cloud.kms.v1.asymmetricsignature;

import "google/api/annotations.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/kms/v1/asymmetricsignature;kms";
option java_package = "yandex.cloud.api.kms.v1";

// Data plane for KMS symmetric cryptography operations

// Set of methods that perform asymmetric signature.
service AsymmetricSignatureCryptoService {

  // Signs data specified KMS key.
  rpc Sign (AsymmetricSignRequest) returns (AsymmetricSignResponse) {
    option (google.api.http) = {post: "/kms/v1/asymmetricSignatureKeys/{key_id}:sign" body: "*"};
  }

  // Signs hash value specified KMS key.
  rpc SignHash (AsymmetricSignHashRequest) returns (AsymmetricSignHashResponse) {
    option (google.api.http) = {post: "/kms/v1/asymmetricSignatureKeys/{key_id}:signHash" body: "*"};
  }

  // Gets value of public key.
  rpc GetPublicKey(AsymmetricGetPublicKeyRequest) returns (AsymmetricGetPublicKeyResponse) {
    option (google.api.http) = {get: "/kms/v1/asymmetricSignatureKeys/{key_id}/publicKey"};
  }
}

message AsymmetricSignRequest {
  // ID of the asymmetric KMS key to use for signature.
  string key_id = 1 [(required) = true, (length) = "<=50"];

  // Message to sign.
  // Should be encoded with base64.
  bytes message = 2 [(required) = true, (length) = "<=32768"];
}

message AsymmetricSignResponse {
  // ID of the asymmetric KMS key that was used for signature.
  string key_id = 1;

  // Value of signature.
  // Signature value is produced in accordance with RFC 8017 for RSA
  // and is a DER-encoded object as defined by ANSI X9.62-2005 and RFC 3279 Section 2.2.3 for ECDSA.
  bytes signature = 2;
}

message AsymmetricSignHashRequest {
  // ID of the asymmetric KMS key to use for signature.
  string key_id = 1 [(required) = true, (length) = "<=50"];

  // Hash value to be signed.
  // Should be encoded with base64.
  bytes hash = 2 [(required) = true, (length) = "<=4096"];
}

message AsymmetricSignHashResponse {
  // ID of the asymmetric KMS key that was used for signature.
  string key_id = 1;

  // Value of signature.
  // Signature value is produced in accordance with RFC 8017 for RSA
  // and is a DER-encoded object as defined by ANSI X9.62-2005 and RFC 3279 Section 2.2.3 for ECDSA.
  bytes signature = 2;
}

message AsymmetricGetPublicKeyRequest {
  // ID of the asymmetric KMS key to be used for public key retrieval.
  string key_id = 1 [(required) = true, (length) = "<=50"];
}

message AsymmetricGetPublicKeyResponse {
  // ID of the asymmetric KMS key to get public key of.
  string key_id = 1;

  // Public key value.
  // The value is a PEM-encoded X.509 public key, also known as SubjectPublicKeyInfo (SPKI),
  // as defined in RFC 5280.
  string public_key = 2;
}

syntax = "proto3";

package yandex.cloud.ytsaurus.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/ytsaurus/v1/cluster.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/ytsaurus/v1;ytsaurus";
option java_package = "yandex.cloud.api.ytsaurus.v1";

// A set of methods for managing Cluster resources.
service ClusterService {

    // Returns the specified cluster.
    rpc Get(GetClusterRequest) returns (Cluster) {
      option (google.api.http) = { get: "/ytsaurus/v1/clusters/{cluster_id}" };
    }

    // Retrieves the list of clusters in the specified folder.
    rpc List(ListClustersRequest) returns (ListClustersResponse) {
      option (google.api.http) = { get: "/ytsaurus/v1/clusters" };
    }

    // Creates a cluster in the specified folder.
    rpc Create (CreateClusterRequest) returns (operation.Operation) {
      option (google.api.http) = { post: "/ytsaurus/v1/clusters" body: "*" };
      option (yandex.cloud.api.operation) = {
        metadata: "CreateClusterMetadata"
        response: "Cluster"
      };
    }

    // Updates the specified cluster.
    rpc Update (UpdateClusterRequest) returns (operation.Operation) {
      option (google.api.http) = { patch: "/ytsaurus/v1/clusters" body: "*" };
      option (yandex.cloud.api.operation) = {
        metadata: "UpdateClusterMetadata"
        response: "Cluster"
      };
    }

    // Deletes the specified cluster.
    rpc Delete (DeleteClusterRequest) returns (operation.Operation) {
      option (google.api.http) = { delete: "/ytsaurus/v1/clusters/{cluster_id}" };
      option (yandex.cloud.api.operation) = {
        metadata: "DeleteClusterMetadata"
        response: "google.protobuf.Empty"
      };
    }

    // Starts the specified cluster.
    rpc Start (StartClusterRequest) returns (operation.Operation) {
      option (google.api.http) = { post: "/ytsaurus/v1/clusters/{cluster_id}:start" body: "*" };
      option (yandex.cloud.api.operation) = {
        metadata: "StartClusterMetadata"
        response: "Cluster"
      };
    }

    // Stops the specified cluster.
    rpc Stop (StopClusterRequest) returns (operation.Operation) {
      option (google.api.http) = { post: "/ytsaurus/v1/clusters/{cluster_id}:stop" body: "*" };
      option (yandex.cloud.api.operation) = {
        metadata: "StopClusterMetadata"
        response: "Cluster"
      };
    }
}

message GetClusterRequest {
  // ID of the cluster to return.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message ListClustersRequest {

  // ID of the folder to list clusters in.
  string folder_id = 1 [(required) = true];

  // The maximum number of results per page to return. If the number of available
  // results is larger than `page_size`, the service returns a [ListClustersResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 2;

  // Page token. To get the next page of results, set `page_token` to the
  // [ListClustersResponse.next_page_token] returned by a previous list request.
  string page_token = 3;

  // A filter expression that filters clusters listed in the response.
  repeated string filter = 4;
}

message ListClustersResponse {
  // List of clusters in the specified folder.
  repeated Cluster clusters = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
  // for the [ListClustersRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message CreateClusterRequest {

  // ID of the folder to create the cluster in.
  string folder_id = 1 [(required) = true];

  // ID of the availability zone where the cluster resides.
  string zone_id = 2 [(required) = true];

  // Name of the cluster.
  string name = 3 [(length) = "<=63", (pattern) = "[a-zA-Z0-9\u0401\u0451\u0410-\u044f]\\S{1,61}[a-zA-Z0-9\u0401\u0451\u0410-\u044f]"];

  // Description of the cluster.
  string description = 4;

  // Cluster labels as `key:value` pairs.
  map<string, string> labels = 5;

  // ID of the subnet to create the cluster in.
  string subnet_id = 6 [(required) = true];

  // IDs of the security groups to attach to the cluster.
  repeated string security_group_ids = 7;

  // Cluster specification.
  ClusterSpec spec = 8;
}

message CreateClusterMetadata {
  // ID of the cluster being created.
  string cluster_id = 1;
}

message UpdateClusterRequest {
  // ID of the cluster to update.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Field mask that specifies which attributes of the cluster should be updated.
  google.protobuf.FieldMask update_mask = 2;

  // New name for the cluster.
  // The name must be unique within the folder.
  string name = 3;

  // New description for the cluster.
  string description = 4;

  // Cluster labels as `key:value` pairs.
  //
  // Existing set of labels is completely replaced by the provided set, so if you just want
  // to add or remove a label:
  // 1. Get the current set of labels with a [ClusterService.Get] request.
  // 2. Add or remove a label in this set.
  // 3. Send the new set in this field.
  map<string, string> labels = 5;

  // New subnet for the cluster.
  string subnet_id = 6;

  // New security groups for the cluster.
  repeated string security_group_ids = 7;

  // New cluster specification.
  ClusterSpec spec = 8;
}

message UpdateClusterMetadata {
  // ID of the cluster that is being updated.
  string cluster_id = 1;
}

message DeleteClusterRequest {
  // ID of the cluster to delete.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteClusterMetadata {
  // ID of the cluster that is being deleted.
  string cluster_id = 1;
}

message StartClusterRequest {
  // ID of the cluster to start.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message StartClusterMetadata {
  // ID of the cluster that is being started.
  string cluster_id = 1;
}

message StopClusterRequest {
  // ID of the cluster to stop.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message StopClusterMetadata {
  // ID of the cluster that is being stopped.
  string cluster_id = 1;
}

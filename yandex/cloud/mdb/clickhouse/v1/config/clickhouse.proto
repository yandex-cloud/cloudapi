syntax = "proto3";

package yandex.cloud.mdb.clickhouse.v1.config;

import "google/protobuf/wrappers.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1/config;clickhouse";
option java_package = "yandex.cloud.api.mdb.clickhouse.v1.config";

// ClickHouse configuration settings. Supported settings are a subset of settings described
// in [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings).
message ClickhouseConfig {
  enum LogLevel {
    LOG_LEVEL_UNSPECIFIED = 0;
    TRACE = 1;
    DEBUG = 2;
    INFORMATION = 3;
    WARNING = 4;
    ERROR = 5;
  }

  // Access control settings.
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#access_control_improvements).
  message AccessControlImprovements {
    // Sets whether **SELECT * FROM system.<table>** requires any grants and can be executed by any user.
    // If set to true then this query requires **GRANT SELECT ON system.<table>** just as for non-system tables.
    //
    // Default value: **false**.
    google.protobuf.BoolValue select_from_system_db_requires_grant = 1;

    // Sets whether **SELECT * FROM information_schema.<table>** requires any grants and can be executed by any user.
    // If set to true, then this query requires **GRANT SELECT ON information_schema.<table>**, just as for ordinary tables.
    //
    // Default value: **false**.
    google.protobuf.BoolValue select_from_information_schema_requires_grant = 2;
  }

  // Settings for the MergeTree table engine family.
  message MergeTree {
    // Determines the behavior of background merges for MergeTree tables with projections.
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#deduplicate_merge_projection_mode).
    enum DeduplicateMergeProjectionMode {
      DEDUPLICATE_MERGE_PROJECTION_MODE_UNSPECIFIED = 0;
      DEDUPLICATE_MERGE_PROJECTION_MODE_IGNORE = 1;
      DEDUPLICATE_MERGE_PROJECTION_MODE_THROW = 2;
      DEDUPLICATE_MERGE_PROJECTION_MODE_DROP = 3;
      DEDUPLICATE_MERGE_PROJECTION_MODE_REBUILD = 4;
    }

    // Determines the behavior of lightweight deletes for MergeTree tables with projections.
    enum LightweightMutationProjectionMode {
      LIGHTWEIGHT_MUTATION_PROJECTION_MODE_UNSPECIFIED = 0;
      LIGHTWEIGHT_MUTATION_PROJECTION_MODE_THROW = 1;
      LIGHTWEIGHT_MUTATION_PROJECTION_MODE_DROP = 2;
      LIGHTWEIGHT_MUTATION_PROJECTION_MODE_REBUILD = 3;
    }

    // If the number of active parts in a single partition exceeds the **parts_to_delay_insert** value, an **INSERT** artificially slows down.
    //
    // Default value: **1000** for versions 25.1 and higher, **150** for versions 24.12 and lower.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#parts_to_delay_insert).
    google.protobuf.Int64Value parts_to_delay_insert = 3;

    // If the number of active parts in a single partition exceeds the **parts_to_throw_insert** value, an **INSERT**
    // is interrupted with the error "Too many parts (N). Merges are processing significantly slower than inserts".
    //
    // Default value: **3000** for versions 25.1 and higher, **300** for versions 24.12 and lower.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#parts_to_throw_insert).
    google.protobuf.Int64Value parts_to_throw_insert = 4;

    // If the number of inactive parts in a single partition in the table exceeds the **inactive_parts_to_delay_insert** value,
    // an **INSERT** is artificially slowed down.
    //
    // Default value: **0**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#inactive_parts_to_delay_insert).
    google.protobuf.Int64Value inactive_parts_to_delay_insert = 9 [(value) = ">=0"];

    // If the number of inactive parts in a single partition more than the **inactive_parts_to_throw_insert** value,
    // **INSERT** is interrupted with an error.
    //
    // Default value: **0**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#inactive_parts_to_throw_insert).
    google.protobuf.Int64Value inactive_parts_to_throw_insert = 10 [(value) = ">=0"];

    // The "Too many parts" check according to **parts_to_delay_insert** and **parts_to_throw_insert** will be active only if the average
    // part size (in the relevant partition) is not larger than the specified threshold. If it is larger than the specified threshold,
    // **INSERT** queries will be neither delayed or rejected. This allows to have hundreds of terabytes in a single table on a single server
    // if the parts are successfully merged to larger parts. This does not affect the thresholds on inactive parts or total parts.
    //
    // Default value: **1073741824** (1 GiB).
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_avg_part_size_for_too_many_parts).
    google.protobuf.Int64Value max_avg_part_size_for_too_many_parts = 21 [(value) = ">=0"];

    // If the total number of active parts in all partitions of a table exceeds the **max_parts_in_total** value,
    // an **INSERT** is interrupted with the error "Too many parts (N)".
    //
    // Default value: **20000** for versions 25.2 and higher, **100000** for versions 25.1 and lower.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_parts_in_total).
    google.protobuf.Int64Value max_parts_in_total = 17;

    // How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
    //
    // Default value: **16**.
    google.protobuf.Int64Value max_replicated_merges_in_queue = 5;

    // When there is less than the specified number of free entries in pool (or replicated queue), start to lower maximum size of
    // merge to process (or to put in queue). This is to allow small merges to process - not filling the pool with long running merges.
    //
    // Default value: **8**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#number_of_free_entries_in_pool_to_lower_max_size_of_merge).
    google.protobuf.Int64Value number_of_free_entries_in_pool_to_lower_max_size_of_merge = 6;

    // When there is less than specified number of free entries in pool, do not execute part mutations.
    // This is to leave free threads for regular merges and to avoid "Too many parts" errors.
    //
    // Default value: **20**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#number_of_free_entries_in_pool_to_execute_mutation).
    google.protobuf.Int64Value number_of_free_entries_in_pool_to_execute_mutation = 20;

    // The maximum total part size (in bytes) to be merged into one part, with the minimum available resources in the background pool.
    //
    // Default value: **1048576** (1 MiB).
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_bytes_to_merge_at_min_space_in_pool).
    google.protobuf.Int64Value max_bytes_to_merge_at_min_space_in_pool = 7;

    // The maximum total parts size (in bytes) to be merged into one part, if there are enough resources available.
    // Corresponds roughly to the maximum possible part size created by an automatic background merge. **0** means merges will be disabled.
    //
    // Default value: **161061273600** (150 GiB).
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_bytes_to_merge_at_max_space_in_pool).
    google.protobuf.Int64Value max_bytes_to_merge_at_max_space_in_pool = 8 [(value) = ">=0"];

    // Minimum number of bytes in a data part that can be stored in Wide format.
    //
    // Default value: **10485760** (10 MiB).
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_bytes_for_wide_part).
    google.protobuf.Int64Value min_bytes_for_wide_part = 11;

    // Minimum number of rows in a data part that can be stored in Wide format.
    //
    // Default value: **0**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_rows_for_wide_part).
    google.protobuf.Int64Value min_rows_for_wide_part = 12;

    // Minimum period to clean old queue logs, blocks hashes and parts.
    //
    // Default value: **30**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#cleanup_delay_period).
    google.protobuf.Int64Value cleanup_delay_period = 19 [(value) = ">=0"];

    // Maximum period to clean old queue logs, blocks hashes and parts.
    //
    // Default value: **300** (5 minutes).
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_cleanup_delay_period).
    google.protobuf.Int64Value max_cleanup_delay_period = 28 [(value) = ">=0"];

    // Minimum time to wait before trying to select parts to merge again after no parts were selected. A lower setting value will trigger
    // selecting tasks in background_schedule_pool frequently which result in large amount of requests to Keeper in large-scale clusters.
    //
    // Default value: **5000** (5 seconds).
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#merge_selecting_sleep_ms).
    google.protobuf.Int64Value merge_selecting_sleep_ms = 24 [(value) = ">=0"];

    // Maximum time to wait before trying to select parts to merge again after no parts were selected. A lower setting value will trigger
    // selecting tasks in background_schedule_pool frequently which result in large amount of requests to Keeper in large-scale clusters.
    //
    // Default value: **60000** (1 minute).
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_merge_selecting_sleep_ms).
    google.protobuf.Int64Value max_merge_selecting_sleep_ms = 27 [(value) = ">=0"];

    // Merge parts if every part in the range is older than the specified value. **0** means disabled.
    //
    // Default value: **0**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_age_to_force_merge_seconds).
    google.protobuf.Int64Value min_age_to_force_merge_seconds = 22 [(value) = ">=0"];

    // Whether **min_age_to_force_merge_seconds** should be applied only on the entire partition and not on subset.
    //
    // Default value: **false**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_age_to_force_merge_on_partition_only).
    google.protobuf.BoolValue min_age_to_force_merge_on_partition_only = 23;

    // The number of rows that are read from the merged parts into memory.
    //
    // Default value: **8192**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#merge_max_block_size).
    google.protobuf.Int64Value merge_max_block_size = 25;

    // Determines the behavior of background merges for MergeTree tables with projections.
    //
    // Default value: **DEDUPLICATE_MERGE_PROJECTION_MODE_THROW**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#deduplicate_merge_projection_mode).
    DeduplicateMergeProjectionMode deduplicate_merge_projection_mode = 29;

    // Determines the behavior of lightweight deletes for MergeTree tables with projections.
    //
    // Default value: **LIGHTWEIGHT_MUTATION_PROJECTION_MODE_THROW**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#lightweight_mutation_projection_mode).
    LightweightMutationProjectionMode lightweight_mutation_projection_mode = 30;

    // The number of most recently inserted blocks for which ClickHouse Keeper stores hash sums to check for duplicates.
    //
    // Default value: **1000** for versions 23.11 and higher, **100** for versions 23.10 and lower.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#replicated_deduplication_window).
    google.protobuf.Int64Value replicated_deduplication_window = 1;

    // The number of seconds after which the hash sums of the inserted blocks are removed from ClickHouse Keeper.
    //
    // Default value: **604800** (7 days).
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#replicated_deduplication_window_seconds).
    google.protobuf.Int64Value replicated_deduplication_window_seconds = 2;

    // Do fsync for every inserted part. Significantly decreases performance of inserts, not recommended to use with wide parts.
    //
    // Default value: **false**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#fsync_after_insert).
    google.protobuf.BoolValue fsync_after_insert = 32;

    // Do fsync for part directory after all part operations (writes, renames, etc.).
    //
    // Default value: **false**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#fsync_part_directory).
    google.protobuf.BoolValue fsync_part_directory = 33;

    // Minimal number of compressed bytes to do fsync for part after fetch. **0** means disabled.
    //
    // Default value: **0**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_compressed_bytes_to_fsync_after_fetch).
    google.protobuf.Int64Value min_compressed_bytes_to_fsync_after_fetch = 34;

    // Minimal number of compressed bytes to do fsync for part after merge. **0** means disabled.
    //
    // Default value: **0**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_compressed_bytes_to_fsync_after_merge).
    google.protobuf.Int64Value min_compressed_bytes_to_fsync_after_merge = 35;

    // Minimal number of rows to do fsync for part after merge. **0** means disabled.
    //
    // Default value: **0**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_rows_to_fsync_after_merge).
    google.protobuf.Int64Value min_rows_to_fsync_after_merge = 36;

    // Controls whether data parts are fully dropped in MergeTree tables when all rows in that part have expired according to their **TTL** settings.
    // * **true** - the entire part is dropped if all rows in that part have expired according to their **TTL** settings.
    // * **false** - only the rows that have expired based on their **TTL** settings are removed.
    //
    // Default value: **false**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#ttl_only_drop_parts).
    google.protobuf.BoolValue ttl_only_drop_parts = 13;

    // Minimum delay in seconds before repeating a merge with delete TTL.
    //
    // Default value: **14400** (4 hours).
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#merge_with_ttl_timeout).
    google.protobuf.Int64Value merge_with_ttl_timeout = 15;

    // Minimum delay in seconds before repeating a merge with recompression TTL.
    //
    // Default value: **14400** (4 hours).
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#merge_with_recompression_ttl_timeout).
    google.protobuf.Int64Value merge_with_recompression_ttl_timeout = 16;

    // When there is more than specified number of merges with TTL entries in pool, do not assign new merge with TTL.
    // This is to leave free threads for regular merges and avoid "Too many parts" errors.
    //
    // Default value: **2**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_number_of_merges_with_ttl_in_pool).
    google.protobuf.Int64Value max_number_of_merges_with_ttl_in_pool = 18;

    // Only recalculate ttl info when **MATERIALIZE TTL**.
    //
    // Default value: **true** for versions 25.2 and higher, **false** for versions 25.1 and lower.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#materialize_ttl_recalculate_only).
    google.protobuf.BoolValue materialize_ttl_recalculate_only = 31;

    // Enables the check at table creation, that the data type of a column for sampling or sampling expression is correct.
    // The data type must be one of unsigned integer types: UInt8, UInt16, UInt32, UInt64.
    //
    // Default value: **true**.
    //
    // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#check_sample_column_is_correct).
    google.protobuf.BoolValue check_sample_column_is_correct = 26;

    // Setting is automatically enabled if cloud storage is enabled, disabled otherwise.
    //
    // Default value: **true**.
    google.protobuf.BoolValue allow_remote_fs_zero_copy_replication = 14 [deprecated = true];
  }

  // Compression settings.
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#compression).
  message Compression {
    enum Method {
      METHOD_UNSPECIFIED = 0;
      // [LZ4 compression algorithm](https://lz4.github.io/lz4).
      LZ4 = 1;
      // [ZSTD compression algorithm](https://facebook.github.io/zstd).
      ZSTD = 2;
      // [LZ4 HC (high compression) algorithm](https://clickhouse.com/docs/sql-reference/statements/create/table#lz4hc).
      LZ4HC = 3;
    }

    // Compression method to use for the specified combination of **min_part_size** and **min_part_size_ratio**.
    Method method = 1 [(required) = true];

    // The minimum size of a data part.
    int64 min_part_size = 2;

    // The ratio of the data part size to the table size.
    double min_part_size_ratio = 3;

    // Compression level.
    google.protobuf.Int64Value level = 4;
  }

  // External dictionary configuration.
  message ExternalDictionary {
    // Configuration of external dictionary structure.
    message Structure {
      // Numeric key.
      message Id {
        // Name of the numeric key.
        string name = 1 [(required) = true];
      }

      // Complex key.
      message Key {
        // Attributes of a complex key.
        repeated Attribute attributes = 1 [(size) = ">0"];
      }

      message Attribute {
        // Name of the column.
        string name = 1 [(required) = true];

        // Type of the column.
        string type = 2 [(required) = true];

        // Default value for an element without data (for example, an empty string).
        string null_value = 3;

        // Expression, describing the attribute, if applicable.
        string expression = 4;

        // Indication of hierarchy support.
        //
        // Default value: **false**.
        bool hierarchical = 5;

        // Indication of injective mapping "id -> attribute".
        //
        // Default value: **false**.
        bool injective = 6;
      }

      // Single numeric key column for the dictionary.
      Id id = 1;

      // Composite key for the dictionary, containing of one or more key columns.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
      Key key = 3;

      // Field holding the beginning of the range for dictionaries with **RANGE_HASHED** layout.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
      Attribute range_min = 4;

      // Field holding the end of the range for dictionaries with **RANGE_HASHED** layout.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
      Attribute range_max = 5;

      // Description of the fields available for database queries.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
      repeated Attribute attributes = 2 [(size) = ">0"];
    }

    message Layout {
      // Layout type.
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/dictionaries#ways-to-store-dictionaries-in-memory).
      enum Type {
        TYPE_UNSPECIFIED = 0;
        // The dictionary is completely stored in memory in the form of flat arrays.
        // Applicable only for dictionaries with numeric keys of the UInt64 type.
        FLAT = 1;
        // The dictionary is completely stored in memory in the form of a hash table.
        // Applicable only for dictionaries with numeric keys of the UInt64 type.
        HASHED = 2;
        // The dictionary is completely stored in memory in the form of a hash table.
        // Applicable for dictionaries with composite keys of arbitrary type.
        COMPLEX_KEY_HASHED = 3;
        // The dictionary is stored in memory in the form of a hash table with an ordered array of ranges and their corresponding values.
        // Applicable only for dictionaries with numeric keys of the UInt64 type.
        RANGE_HASHED = 4;
        // The dictionary is stored in a cache that has a fixed number of cells. These cells contain frequently used elements.
        // Applicable only for dictionaries with numeric keys of the UInt64 type.
        CACHE = 5;
        // The dictionary is stored in a cache that has a fixed number of cells. These cells contain frequently used elements.
        // Applicable for dictionaries with composite keys of arbitrary type.
        COMPLEX_KEY_CACHE = 6;
        // The dictionary is completely stored in memory in the form of a hash table.
        // It's similar to HASHED layout type but uses less memory in favor of more CPU usage.
        // Applicable only for dictionaries with numeric keys of the UInt64 type.
        SPARSE_HASHED = 7;
        // The dictionary is completely stored in memory in the form of a hash table.
        // It's similar to COMPLEX_KEY_HASHED layout type but uses less memory in favor of more CPU usage.
        // Applicable for dictionaries with composite keys of arbitrary type.
        COMPLEX_KEY_SPARSE_HASHED = 8;
        // The dictionary is stored in memory in the form of a hash table with an ordered array of ranges and their corresponding values.
        // Applicable for dictionaries with composite keys of arbitrary type.
        COMPLEX_KEY_RANGE_HASHED = 9;
        // The dictionary is not stored in memory and directly goes to the source during the processing of a request.
        // Applicable only for dictionaries with numeric keys of the UInt64 type.
        DIRECT = 10;
        // The dictionary is not stored in memory and directly goes to the source during the processing of a request.
        // Applicable for dictionaries with composite keys of arbitrary type.
        COMPLEX_KEY_DIRECT = 11;
        // The specialized layout type for mapping network prefixes (IP addresses) to metadata such as ASN.
        IP_TRIE = 12;
      }

      // Layout type.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#ways-to-store-dictionaries-in-memory).
      Type type = 1 [(required) = true];

      // Number of cells in the cache. Rounded up to a power of two.
      // Applicable only for **CACHE** and **COMPLEX_KEY_CACHE** layout types.
      //
      // Default value: **1000000000**.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#cache).
      int64 size_in_cells = 2 [(value) = ">=0"];

      // Allows to read expired keys.
      // Applicable only for **CACHE** and **COMPLEX_KEY_CACHE** layout types.
      //
      // Default value: **false**.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#cache).
      google.protobuf.BoolValue allow_read_expired_keys = 5;

      // Max size of update queue.
      // Applicable only for **CACHE** and **COMPLEX_KEY_CACHE** layout types.
      //
      // Default value: **100000**.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#cache).
      int64 max_update_queue_size = 6 [(value) = ">=0"];

      // Max timeout in milliseconds for push update task into queue.
      // Applicable only for **CACHE** and **COMPLEX_KEY_CACHE** layout types.
      //
      // Default value: **10**.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#cache).
      int64 update_queue_push_timeout_milliseconds = 7 [(value) = ">=0"];

      // Max wait timeout in milliseconds for update task to complete.
      // Applicable only for **CACHE** and **COMPLEX_KEY_CACHE** layout types.
      //
      // Default value: **60000** (1 minute).
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#cache).
      int64 query_wait_timeout_milliseconds = 8 [(value) = ">=0"];

      // Max threads for cache dictionary update.
      // Applicable only for **CACHE** and **COMPLEX_KEY_CACHE** layout types.
      //
      // Default value: **4**.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#cache).
      int64 max_threads_for_updates = 9 [(value) = ">=0"];

      // Initial dictionary key size.
      // Applicable only for **FLAT** layout type.
      //
      // Default value: **1024**.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#flat).
      int64 initial_array_size = 10 [(value) = ">=0"];

      // Maximum dictionary key size.
      // Applicable only for **FLAT** layout type.
      //
      // Default value: **500000**.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#flat).
      int64 max_array_size = 3 [(value) = ">=0"];

      // Allows to retrieve key attribute using **dictGetString** function.
      // Enabling this option increases memory usage.
      // Applicable only for **IP_TRIE** layout type.
      //
      // For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#ip_trie).
      google.protobuf.BoolValue access_to_key_from_attributes = 4;
    }

    message Range {
      // Minimum dictionary lifetime.
      int64 min = 1;

      // Maximum dictionary lifetime.
      int64 max = 2;
    }

    message HttpSource {
      message Header {
        // Header name.
        string name = 1 [(required) = true];

        // Header value.
        string value = 2 [(required) = true];
      }

      // URL of the source dictionary available over HTTP.
      string url = 1 [(required) = true];

      // The data format. Valid values are all formats [supported by ClickHouse SQL dialect](https://clickhouse.com/docs/en/interfaces/formats/).
      string format = 2 [(required) = true];

      // HTTP headers.
      repeated Header headers = 3;
    }

    message MysqlSource {
      message Replica {
        // MySQL host of the replica.
        string host = 1 [(required) = true, (length) = "<=253"];

        // The priority of the replica that ClickHouse takes into account when connecting.
        // Replica with the highest priority should have this field set to the lowest number.
        int64 priority = 2 [(value) = ">=0"];

        // Port to use when connecting to the replica.
        // If a port is not specified for a replica, ClickHouse uses the port specified for the source.
        int64 port = 3 [(value) = "0-65535"];

        // Name of the MySQL database user.
        // If a user is not specified for a replica, ClickHouse uses the user specified for the source.
        string user = 4;

        // Password of the MySQL database user.
        // If a password is not specified for a replica, ClickHouse uses the password specified for the source.
        string password = 5;
      }

      // Database name.
      string db = 1 [(required) = true];

      // Table name.
      string table = 2 [(required) = true];

      // Port to use when connecting to a replica of the dictionary source.
      int64 port = 3 [(value) = "0-65535"];

      // Name of the user for replicas of the dictionary source.
      string user = 4 [(required) = true];

      // Password of the user for replicas of the dictionary source.
      string password = 5;

      // List of MySQL replicas of the database used as dictionary source.
      repeated Replica replicas = 6;

      // Selection criteria for the data in the specified MySQL table.
      string where = 7;

      // Query for checking the dictionary status, to pull only updated data.
      string invalidate_query = 8;

      // Should a connection be closed after each request.
      google.protobuf.BoolValue close_connection = 9;

      // Should a connection be shared for some requests.
      google.protobuf.BoolValue share_connection = 10;
    }

    message ClickhouseSource {
      // Database name.
      string db = 1 [(required) = true];

      // Table name.
      string table = 2 [(required) = true];

      // ClickHouse host.
      string host = 3 [(length) = "<=253"];

      // Port to use when connecting to the host.
      int64 port = 4 [(value) = "0-65535"];

      // Name of the ClickHouse database user.
      string user = 5 [(required) = true];

      // Password of the ClickHouse database user.
      string password = 6;

      // Selection criteria for the data in the specified ClickHouse table.
      string where = 7;

      // Determines whether to use TLS for connection.
      google.protobuf.BoolValue secure = 8;
    }

    message MongodbSource {
      // Database name.
      string db = 1 [(required) = true];

      // Collection name.
      string collection = 2 [(required) = true];

      // MongoDB host.
      string host = 3 [(required) = true, (length) = "<=253"];

      // Port to use when connecting to the host.
      int64 port = 4 [(value) = "0-65535"];

      // Name of the MongoDB database user.
      string user = 5 [(required) = true];

      // Password of the MongoDB database user.
      string password = 6;

      // Dictionary source options.
      string options = 7;
    }

    message PostgresqlSource {
      // Mode of SSL TCP/IP connection to a PostgreSQL host.
      // For details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
      enum SslMode {
        SSL_MODE_UNSPECIFIED = 0;
        // Only try a non-SSL connection.
        DISABLE = 1;
        // First try a non-SSL connection; if that fails, try an SSL connection.
        ALLOW = 2;
        // First try an SSL connection; if that fails, try a non-SSL connection.
        PREFER = 3;
        // Only try an SSL connection, and verify that the server certificate is issued by a trusted certificate authority (CA).
        VERIFY_CA = 4;
        // Only try an SSL connection, verify that the server certificate is issued by a trusted CA and that the requested server host name matches that in the certificate.
        VERIFY_FULL = 5;
      }

      // Database name.
      string db = 1 [(required) = true];

      // Table name.
      string table = 2 [(required) = true];

      // PostgreSQL hosts.
      repeated string hosts = 3;

      // Port to use when connecting to the PostgreSQL hosts.
      int64 port = 4 [(value) = "0-65535"];

      // Name of the PostrgreSQL database user.
      string user = 5 [(required) = true];

      // Password of the PostrgreSQL database user.
      string password = 6;

      // Query for checking the dictionary status, to pull only updated data.
      string invalidate_query = 7;

      // Mode of SSL TCP/IP connection to the PostgreSQL host.
      SslMode ssl_mode = 8;
    }

    // Name of the external dictionary.
    string name = 1 [(required) = true];

    // Structure of the external dictionary.
    Structure structure = 2 [(required) = true];

    // Layout determining how to store the dictionary in memory.
    //
    // For details, see https://clickhouse.com/docs/sql-reference/dictionaries#ways-to-store-dictionaries-in-memory.
    Layout layout = 3 [(required) = true];

    oneof lifetime {
      option (exactly_one) = true;

      // Fixed interval between dictionary updates.
      int64 fixed_lifetime = 4;

      // Range of intervals between dictionary updates for ClickHouse to choose from.
      Range lifetime_range = 5;
    }

    oneof source {
      option (exactly_one) = true;

      // HTTP source for the dictionary.
      HttpSource http_source = 6;

      // MySQL source for the dictionary.
      MysqlSource mysql_source = 7;

      // ClickHouse source for the dictionary.
      ClickhouseSource clickhouse_source = 8;

      // MongoDB source for the dictionary.
      MongodbSource mongodb_source = 9;

      // PostgreSQL source for the dictionary.
      PostgresqlSource postgresql_source = 10;
    }
  }

  // Rollup settings for the GraphiteMergeTree table engine.
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#graphite-rollup).
  message GraphiteRollup {
    message Pattern {
      message Retention {
        // The minimum age of the data in seconds.
        int64 age = 1;

        // Precision of determining the age of the data, in seconds. Should be a divisor for 86400 (seconds in a day).
        int64 precision = 2;
      }

      // A pattern for the metric name (a regular or DSL).
      string regexp = 1;

      // The name of the aggregating function to apply to data whose age falls within the range [age, age + precision].
      // Accepted functions: **min**, **max**, **any**, **avg**. The average is calculated imprecisely, like the average of the averages.
      string function = 2;

      // Retention rules.
      repeated Retention retention = 3;
    }

    // Name for the specified combination of settings for Graphite rollup.
    string name = 1 [(required) = true];

    // Pattern to use for the rollup.
    repeated Pattern patterns = 2 [(size) = ">0"];

    // The name of the column storing the metric name (Graphite sensor).
    //
    // Default value: **Path**.
    string path_column_name = 3;

    // The name of the column storing the time of measuring the metric.
    //
    // Default value: **Time**.
    string time_column_name = 4;

    // The name of the column storing the value of the metric at the time set in **time_column_name**.
    //
    // Default value: **Value**.
    string value_column_name = 5;

    // The name of the column storing the version of the metric.
    //
    // Default value: **Timestamp**.
    string version_column_name = 6;
  }

  // Kafka configuration settings.
  // For details, see [librdkafka documentation](https://github.com/confluentinc/librdkafka/blob/master/CONFIGURATION.md).
  message Kafka {
    enum SecurityProtocol {
      SECURITY_PROTOCOL_UNSPECIFIED = 0;
      SECURITY_PROTOCOL_PLAINTEXT = 1;
      SECURITY_PROTOCOL_SSL = 2;
      SECURITY_PROTOCOL_SASL_PLAINTEXT = 3;
      SECURITY_PROTOCOL_SASL_SSL = 4;
    }

    enum SaslMechanism {
      SASL_MECHANISM_UNSPECIFIED = 0;
      SASL_MECHANISM_GSSAPI = 1;
      SASL_MECHANISM_PLAIN = 2;
      SASL_MECHANISM_SCRAM_SHA_256 = 3;
      SASL_MECHANISM_SCRAM_SHA_512 = 4;
    }

    enum Debug {
      DEBUG_UNSPECIFIED = 0;
      DEBUG_GENERIC = 1;
      DEBUG_BROKER = 2;
      DEBUG_TOPIC = 3;
      DEBUG_METADATA = 4;
      DEBUG_FEATURE = 5;
      DEBUG_QUEUE = 6;
      DEBUG_MSG = 7;
      DEBUG_PROTOCOL = 8;
      DEBUG_CGRP = 9;
      DEBUG_SECURITY = 10;
      DEBUG_FETCH = 11;
      DEBUG_INTERCEPTOR = 12;
      DEBUG_PLUGIN = 13;
      DEBUG_CONSUMER = 14;
      DEBUG_ADMIN = 15;
      DEBUG_EOS = 16;
      DEBUG_MOCK = 17;
      DEBUG_ASSIGNOR = 18;
      DEBUG_CONF = 19;
      DEBUG_TELEMETRY = 20;
      DEBUG_ALL = 21;
    }

    enum AutoOffsetReset {
      AUTO_OFFSET_RESET_UNSPECIFIED = 0;
      AUTO_OFFSET_RESET_SMALLEST = 1;
      AUTO_OFFSET_RESET_EARLIEST = 2;
      AUTO_OFFSET_RESET_BEGINNING = 3;
      AUTO_OFFSET_RESET_LARGEST = 4;
      AUTO_OFFSET_RESET_LATEST = 5;
      AUTO_OFFSET_RESET_END = 6;
      AUTO_OFFSET_RESET_ERROR = 7;
    }

    // Protocol used to communicate with brokers.
    //
    // Default value: **SECURITY_PROTOCOL_PLAINTEXT**.
    SecurityProtocol security_protocol = 1;

    // SASL mechanism to use for authentication.
    //
    // Default value: **SASL_MECHANISM_GSSAPI**.
    SaslMechanism sasl_mechanism = 2;

    // SASL username for use with the PLAIN and SASL-SCRAM mechanisms.
    string sasl_username = 3;

    // SASL password for use with the PLAIN and SASL-SCRAM mechanisms.
    string sasl_password = 4;

    // Enable OpenSSL's builtin broker (server) certificate verification.
    //
    // Default value: **true**.
    google.protobuf.BoolValue enable_ssl_certificate_verification = 5;

    // Maximum allowed time between calls to consume messages for high-level consumers.
    // If this interval is exceeded the consumer is considered failed and the group will
    // rebalance in order to reassign the partitions to another consumer group member.
    //
    // Default value: **300000** (5 minutes).
    google.protobuf.Int64Value max_poll_interval_ms = 6 [(value) = ">=0"];

    // Client group session and failure detection timeout. The consumer sends periodic heartbeats (heartbeat.interval.ms)
    // to indicate its liveness to the broker. If no hearts are received by the broker for a group member within
    // the session timeout, the broker will remove the consumer from the group and trigger a rebalance.
    //
    // Default value: **45000** (45 seconds).
    google.protobuf.Int64Value session_timeout_ms = 7 [(value) = ">=0"];

    // Debug context to enable.
    Debug debug = 8;

    // Action to take when there is no initial offset in offset store or the desired offset is out of range.
    //
    // Default value: **AUTO_OFFSET_RESET_LARGEST**.
    AutoOffsetReset auto_offset_reset = 9;
  }

  message KafkaTopic {
    // Kafka topic name.
    string name = 1 [(required) = true];

    // Kafka topic settings.
    Kafka settings = 2 [(required) = true];
  }

  // RabbitMQ integration settings.
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/engines/table-engines/integrations/rabbitmq).
  message Rabbitmq {
    // RabbitMQ username.
    string username = 1;

    // RabbitMQ password.
    string password = 2;

    // RabbitMQ virtual host.
    string vhost = 3;
  }

  message QueryMaskingRule {
    // Name for the rule.
    string name = 1;

    // RE2 compatible regular expression.
    string regexp = 2 [(required) = true];

    // Substitution string for sensitive data.
    //
    // Default value: six asterisks.
    string replace = 3;
  }

  // Query cache configuration.
  message QueryCache {
    // The maximum cache size in bytes.
    //
    // Default value: **1073741824** (1 GiB).
    google.protobuf.Int64Value max_size_in_bytes = 1 [(value) = ">=0"];

    // The maximum number of **SELECT** query results stored in the cache.
    //
    // Default value: **1024**.
    google.protobuf.Int64Value max_entries = 2 [(value) = ">=0"];

    // The maximum size in bytes **SELECT** query results may have to be saved in the cache.
    //
    // Default value: **1048576** (1 MiB).
    google.protobuf.Int64Value max_entry_size_in_bytes = 3 [(value) = ">=0"];

    // The maximum number of rows **SELECT** query results may have to be saved in the cache.
    //
    // Default value: **30000000**.
    google.protobuf.Int64Value max_entry_size_in_rows = 4 [(value) = ">=0"];
  }

  // JDBC bridge configuration for queries to external databases.
  message JdbcBridge {
    // Host of jdbc bridge.
    string host = 1;

    // Port of jdbc bridge.
    //
    // Default value: **9019**.
    google.protobuf.Int64Value port = 2 [(value) = "0-65535"];
  }

  // ClickHouse macro.
  message Macro {
    // Name of the macro.
    string name = 1 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_][a-zA-Z0-9_-]*"];

    // Value of the macro.
    string value = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_][a-zA-Z0-9_-]*"];
  }

  // Sets the number of threads performing background merges and mutations for MergeTree-engine tables.
  //
  // Default value: **16**.
  //
  // Change of the setting is applied with restart on value decrease and without restart on value increase.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_pool_size).
  google.protobuf.Int64Value background_pool_size = 33 [(value) = ">=1"];

  // Sets a ratio between the number of threads and the number of background merges and mutations that can be executed concurrently.
  //
  // For example, if the ratio equals to **2** and **background_pool_size** is set to **16** then ClickHouse can execute **32** background merges concurrently.
  // This is possible, because background operations could be suspended and postponed. This is needed to give small merges more execution priority.
  //
  // Default value: **2**.
  //
  // Change of the setting is applied with restart on value decrease and without restart on value increase.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_merges_mutations_concurrency_ratio).
  google.protobuf.Int64Value background_merges_mutations_concurrency_ratio = 48;

  // The maximum number of threads that will be used for constantly executing some lightweight periodic operations
  // for replicated tables, Kafka streaming, and DNS cache updates.
  //
  // Default value: **512**.
  //
  // Change of the setting is applied with restart on value decrease and without restart on value increase.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_schedule_pool_size).
  google.protobuf.Int64Value background_schedule_pool_size = 34 [(value) = ">=1"];

  // The maximum number of threads that will be used for fetching data parts from another replica for MergeTree-engine tables in a background.
  //
  // Default value: **32** for versions 25.1 and higher, **16** for versions 24.12 and lower.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_fetches_pool_size).
  google.protobuf.Int64Value background_fetches_pool_size = 38 [(value) = ">=1"];

  // The maximum number of threads that will be used for moving data parts to another disk or volume for MergeTree-engine tables in a background.
  //
  // Default value: **8**.
  //
  // Change of the setting is applied with restart on value decrease and without restart on value increase.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_move_pool_size).
  google.protobuf.Int64Value background_move_pool_size = 39 [(value) = ">=1"];

  // The maximum number of threads that will be used for executing distributed sends.
  //
  // Default value: **16**.
  //
  // Change of the setting is applied with restart on value decrease and without restart on value increase.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_distributed_schedule_pool_size).
  google.protobuf.Int64Value background_distributed_schedule_pool_size = 40 [(value) = ">=1"];

  // The maximum number of threads that will be used for performing flush operations for Buffer-engine tables in the background.
  //
  // Default value: **16**.
  //
  // Change of the setting is applied with restart on value decrease and without restart on value increase.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_buffer_flush_schedule_pool_size).
  google.protobuf.Int64Value background_buffer_flush_schedule_pool_size = 41 [(value) = ">=1"];

  // The maximum number of threads that will be used for executing background operations for message streaming.
  //
  // Default value: **16**.
  //
  // Change of the setting is applied with restart on value decrease and without restart on value increase.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_message_broker_schedule_pool_size).
  google.protobuf.Int64Value background_message_broker_schedule_pool_size = 46 [(value) = ">=1"];

  // The maximum number of threads that will be used for performing a variety of operations (mostly garbage collection) for MergeTree-engine tables in a background.
  //
  // Default value: **8**.
  //
  // Change of the setting is applied with restart on value decrease and without restart on value increase.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_common_pool_size).
  google.protobuf.Int64Value background_common_pool_size = 47 [(value) = ">=1"];

  // Lazy loading of dictionaries. If enabled, then each dictionary is loaded on the first use. Otherwise, the server loads all dictionaries at startup.
  //
  // Default value: **true** for versions 25.1 and higher, **false** for versions 24.12 and lower.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#dictionaries_lazy_load).
  google.protobuf.BoolValue dictionaries_lazy_load = 68;

  // Logging level.
  LogLevel log_level = 1;

  // The maximum size that query_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of query_log data based on size is disabled.
  //
  // Default value: **1073741824** (1 GiB).
  google.protobuf.Int64Value query_log_retention_size = 16 [(value) = ">=0"];

  // The maximum time that query_log records will be retained before removal. If set to **0**, automatic removal of query_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value query_log_retention_time = 17 [(value) = ">=0"];

  // Enables or disables query_thread_log system table.
  //
  // Default value: **true**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/query_thread_log).
  google.protobuf.BoolValue query_thread_log_enabled = 18;

  // The maximum size that query_thread_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of query_thread_log data based on size is disabled.
  //
  // Default value: **536870912** (512 MiB).
  google.protobuf.Int64Value query_thread_log_retention_size = 19 [(value) = ">=0"];

  // The maximum time that query_thread_log records will be retained before removal. If set to **0**,
  // automatic removal of query_thread_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value query_thread_log_retention_time = 20 [(value) = ">=0"];

  // The maximum size that part_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of part_log data based on size is disabled.
  //
  // Default value: **536870912** (512 MiB).
  google.protobuf.Int64Value part_log_retention_size = 21 [(value) = ">=0"];

  // The maximum time that part_log records will be retained before removal. If set to **0**,
  // automatic removal of part_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value part_log_retention_time = 22 [(value) = ">=0"];

  // Enables or disables metric_log system table.
  //
  // Default value: **false** for versions 25.1 and higher, **true** for versions 24.12 and lower.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/metric_log).
  google.protobuf.BoolValue metric_log_enabled = 23;

  // The maximum size that metric_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of metric_log data based on size is disabled.
  //
  // Default value: **536870912** (512 MiB).
  google.protobuf.Int64Value metric_log_retention_size = 24 [(value) = ">=0"];

  // The maximum time that metric_log records will be retained before removal. If set to **0**,
  // automatic removal of metric_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value metric_log_retention_time = 25 [(value) = ">=0"];

  // Enables or disables trace_log system table.
  //
  // Default value: **true** for versions 25.2 and higher, **false** for versions 25.1 and lower.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/trace_log).
  google.protobuf.BoolValue trace_log_enabled = 26;

  // The maximum size that trace_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of trace_log data based on size is disabled.
  //
  // Default value: **536870912** (512 MiB).
  google.protobuf.Int64Value trace_log_retention_size = 27;

  // The maximum time that trace_log records will be retained before removal. If set to **0**,
  // automatic removal of trace_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value trace_log_retention_time = 28;

  // Enables or disables text_log system table.
  //
  // Default value: **false**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/text_log).
  google.protobuf.BoolValue text_log_enabled = 29;

  // The maximum size that text_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of text_log data based on size is disabled.
  //
  // Default value: **536870912** (512 MiB).
  google.protobuf.Int64Value text_log_retention_size = 30;

  // The maximum time that text_log records will be retained before removal. If set to **0**,
  // automatic removal of text_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value text_log_retention_time = 31;

  // Logging level for text_log system table.
  //
  // Default value: **TRACE**.
  //
  // Change of the setting is applied with restart.
  LogLevel text_log_level = 32;

  // Enables or disables opentelemetry_span_log system table.
  //
  // Default value: **false**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/opentelemetry_span_log).
  google.protobuf.BoolValue opentelemetry_span_log_enabled = 42;

  // The maximum size that opentelemetry_span_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of opentelemetry_span_log data based on size is disabled.
  //
  // Default value: **0**.
  google.protobuf.Int64Value opentelemetry_span_log_retention_size = 55 [(value) = ">=0"];

  // The maximum time that opentelemetry_span_log records will be retained before removal. If set to **0**,
  // automatic removal of opentelemetry_span_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value opentelemetry_span_log_retention_time = 56 [(value) = ">=0"];

  // Enables or disables query_views_log system table.
  //
  // Default value: **false**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/query_views_log).
  google.protobuf.BoolValue query_views_log_enabled = 49;

  // The maximum size that query_views_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of query_views_log data based on size is disabled.
  //
  // Default value: **0**.
  google.protobuf.Int64Value query_views_log_retention_size = 50 [(value) = ">=0"];

  // The maximum time that query_views_log records will be retained before removal. If set to **0**,
  // automatic removal of query_views_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value query_views_log_retention_time = 51 [(value) = ">=0"];

  // Enables or disables asynchronous_metric_log system table.
  //
  // Default value: **false**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/asynchronous_metric_log).
  google.protobuf.BoolValue asynchronous_metric_log_enabled = 52;

  // The maximum size that asynchronous_metric_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of asynchronous_metric_log data based on size is disabled.
  //
  // Default value: **0**.
  google.protobuf.Int64Value asynchronous_metric_log_retention_size = 53 [(value) = ">=0"];

  // The maximum time that asynchronous_metric_log records will be retained before removal. If set to **0**,
  // automatic removal of asynchronous_metric_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value asynchronous_metric_log_retention_time = 54 [(value) = ">=0"];

  // Enables or disables session_log system table.
  //
  // Default value: **true** for versions 25.8 and higher, **false** for versions 25.7 and lower.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/session_log).
  google.protobuf.BoolValue session_log_enabled = 57;

  // The maximum size that session_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of session_log data based on size is disabled.
  //
  // Default value: **536870912** (512 MiB) for versions 25.8 and higher, **0** for versions 25.7 and lower.
  google.protobuf.Int64Value session_log_retention_size = 58 [(value) = ">=0"];

  // The maximum time that session_log records will be retained before removal. If set to **0**,
  // automatic removal of session_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value session_log_retention_time = 59 [(value) = ">=0"];

  // Enables or disables zookeeper_log system table.
  //
  // Default value: **false**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/zookeeper_log).
  google.protobuf.BoolValue zookeeper_log_enabled = 60;

  // The maximum size that zookeeper_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of zookeeper_log data based on size is disabled.
  //
  // Default value: **0**.
  google.protobuf.Int64Value zookeeper_log_retention_size = 61 [(value) = ">=0"];

  // The maximum time that zookeeper_log records will be retained before removal. If set to **0**,
  // automatic removal of zookeeper_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value zookeeper_log_retention_time = 62 [(value) = ">=0"];

  // Enables or disables asynchronous_insert_log system table.
  //
  // Default value: **false**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/asynchronous_insert_log).
  google.protobuf.BoolValue asynchronous_insert_log_enabled = 63;

  // The maximum size that asynchronous_insert_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of asynchronous_insert_log data based on size is disabled.
  //
  // Default value: **0**.
  google.protobuf.Int64Value asynchronous_insert_log_retention_size = 64 [(value) = ">=0"];

  // The maximum time that asynchronous_insert_log records will be retained before removal. If set to **0**,
  // automatic removal of asynchronous_insert_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value asynchronous_insert_log_retention_time = 65 [(value) = ">=0"];

  // Enables or disables processors_profile_log system table.
  //
  // Default value: **true** for versions 25.2 and higher, **false** for versions 25.1 and lower.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/processors_profile_log).
  google.protobuf.BoolValue processors_profile_log_enabled = 71;

  // The maximum size that processors_profile_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of processors_profile_log data based on size is disabled.
  //
  // Default value: **0**.
  google.protobuf.Int64Value processors_profile_log_retention_size = 72 [(value) = ">=0"];

  // The maximum time that processors_profile_log records will be retained before removal. If set to **0**,
  // automatic removal of processors_profile_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value processors_profile_log_retention_time = 73 [(value) = ">=0"];

  // Enables or disables error_log system table.
  //
  // Default value: **false**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/error_log).
  google.protobuf.BoolValue error_log_enabled = 75;

  // The maximum size that error_log can grow to before old data will be removed. If set to **0**,
  // automatic removal of error_log data based on size is disabled.
  //
  // Default value: **0**.
  google.protobuf.Int64Value error_log_retention_size = 76 [(value) = ">=0"];

  // The maximum time that error_log records will be retained before removal. If set to **0**,
  // automatic removal of error_log data based on time is disabled.
  //
  // Default value: **2592000000** (30 days).
  google.protobuf.Int64Value error_log_retention_time = 77 [(value) = ">=0"];

  // Access control settings.
  AccessControlImprovements access_control_improvements = 74;

  // Maximum number of inbound connections.
  //
  // Default value: **4096**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#max_connections).
  google.protobuf.Int64Value max_connections = 6 [(value) = ">=10"];

  // Maximum number of concurrently executed queries.
  //
  // Default value: **500**.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#max_concurrent_queries).
  google.protobuf.Int64Value max_concurrent_queries = 7 [(value) = ">=50"];

  // Maximum size of the table that can be deleted using **DROP** or **TRUNCATE** query.
  //
  // Default value: **50000000000** (48828125 KiB).
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#max_table_size_to_drop).
  google.protobuf.Int64Value max_table_size_to_drop = 11 [(value) = ">=0"];

  // Maximum size of the partition that can be deleted using **DROP** or **TRUNCATE** query.
  //
  // Default value: **50000000000** (48828125 KiB).
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#max_partition_size_to_drop).
  google.protobuf.Int64Value max_partition_size_to_drop = 13 [(value) = ">=0"];

  // The number of seconds that ClickHouse waits for incoming requests for HTTP protocol before closing the connection.
  //
  // Default value: **30**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#keep_alive_timeout).
  google.protobuf.Int64Value keep_alive_timeout = 8;

  // Cache size (in bytes) for uncompressed data used by table engines from the MergeTree family. **0** means disabled.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#uncompressed_cache_size).
  google.protobuf.Int64Value uncompressed_cache_size = 9;

  // Maximum size (in bytes) of the cache of "marks" used by MergeTree tables.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#mark_cache_size).
  google.protobuf.Int64Value mark_cache_size = 10;

  // The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
  //
  // Default value: **Europe/Moscow**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#timezone).
  string timezone = 14;

  // Enables or disables geobase.
  //
  // Default value: **false** for versions 25.8 and higher, **true** for versions 25.7 and lower.
  //
  // Change of the setting is applied with restart.
  google.protobuf.BoolValue geobase_enabled = 66;

  // Address of the archive with the user geobase in Object Storage.
  //
  // Change of the setting is applied with restart.
  string geobase_uri = 15;

  // The default database.
  //
  // Default value: **default**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#default_database).
  google.protobuf.StringValue default_database = 43;

  // Whenever server memory usage becomes larger than every next step in number of bytes the memory profiler will collect
  // the allocating stack trace. **0** means disabled memory profiler.
  //
  // Default value: **0**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#total_memory_profiler_step).
  google.protobuf.Int64Value total_memory_profiler_step = 44;

  // Allows to collect random allocations and de-allocations and writes them in the system.trace_log system table
  // with trace_type equal to a MemorySample with the specified probability.
  //
  // Default value: **0**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#total_memory_tracker_sample_probability).
  google.protobuf.DoubleValue total_memory_tracker_sample_probability = 45;

  // Maximum number of threads to parse and insert data in background. If set to **0**, asynchronous mode is disabled.
  //
  // Default value: **16**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#async_insert_threads).
  google.protobuf.Int64Value async_insert_threads = 79 [(value) = ">=0"];

  // The maximum number of threads to execute **BACKUP** requests.
  //
  // Default value: **16**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#backup_threads).
  google.protobuf.Int64Value backup_threads = 80;

  // The maximum number of threads to execute **RESTORE** requests.
  //
  // Default value: **16**.
  //
  // Change of the setting is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#restore_threads).
  google.protobuf.Int64Value restore_threads = 81;

  // Settings for the MergeTree table engine family.
  //
  // Change of the settings of **merge_tree** is applied with restart.
  MergeTree merge_tree = 2;

  // Data compression settings for MergeTree engine tables.
  //
  // Change of the settings of **compression** is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#compression).
  repeated Compression compression = 3;

  // Configuration of external dictionaries.
  //
  // Change of the settings of **dictionaries** is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries).
  repeated ExternalDictionary dictionaries = 4;

  // Rollup settings for the GraphiteMergeTree engine tables.
  //
  // Change of the settings of **graphite_rollup** is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#graphite_rollup).
  repeated GraphiteRollup graphite_rollup = 5;

  // Kafka integration settings.
  //
  // Change of the settings of **kafka** is applied with restart.
  Kafka kafka = 35;

  // Per-topic Kafka integration settings.
  //
  // Change of the settings of **kafka_topics** is applied with restart.
  repeated KafkaTopic kafka_topics = 36;

  // RabbitMQ integration settings.
  //
  // Change of the settings of **rabbitmq** is applied with restart.
  Rabbitmq rabbitmq = 37;

  // Regexp-based rules, which will be applied to queries as well as all log messages before storing them in server logs,
  // system.query_log, system.text_log, system.processes tables, and in logs sent to the client. That allows preventing
  // sensitive data leakage from SQL queries (like names, emails, personal identifiers or credit card numbers) to logs.
  //
  // Change of the settings of **query_masking_rules** is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#query_masking_rules).
  repeated QueryMaskingRule query_masking_rules = 67;

  // [Query cache](https://clickhouse.com/docs/operations/query-cache) configuration.
  //
  // Change of the settings of **query_cache** is applied with restart.
  QueryCache query_cache = 69;

  // JDBC bridge configuration for queries to external databases.
  //
  // Change of the settings of **jdbc_bridge** is applied with restart.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/integrations/jdbc/jdbc-with-clickhouse).
  JdbcBridge jdbc_bridge = 70;

  // Enables or disables MySQL interface on ClickHouse server
  //
  // Default value: **false**.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/interfaces/mysql).
  google.protobuf.BoolValue mysql_protocol = 78;

  // Custom ClickHouse macros.
  repeated Macro custom_macros = 82;

  // The interval in seconds before reloading built-in dictionaries.
  //
  // Default value: **3600**.
  //
  // For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#builtin_dictionaries_reload_interval).
  google.protobuf.Int64Value builtin_dictionaries_reload_interval = 12 [deprecated = true];
}

message ClickhouseConfigSet {
  // Effective configuration (a combination of user-defined configuration and default configuration).
  ClickhouseConfig effective_config = 1 [(required) = true];

  // User-defined configuration.
  ClickhouseConfig user_config = 2 [(required) = true];

  // Default configuration.
  ClickhouseConfig default_config = 3 [(required) = true];
}

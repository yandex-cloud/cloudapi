syntax = "proto3";

package yandex.cloud.mdb.greenplum.v1;

import "google/protobuf/wrappers.proto";

import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/greenplum/v1;greenplum";
option java_package = "yandex.cloud.api.mdb.greenplum.v1";

// A list of computational resources allocated to a host.

message Resources {

  // ID of the preset for computational resources allocated to a host.
  //
  // Available presets are listed in the [documentation](/docs/managed-greenplum/concepts/instance-types).
  string resource_preset_id = 1;

  // Volume of the storage used by the host, in bytes.
  int64 disk_size = 2;

  // Type of the storage used by the host: `network-hdd`, `network-ssd` or `local-ssd`.
  string disk_type_id = 3;
}

// Route server configuration.

message ConnectionPoolerConfig {

  // Route server pool mode.

  enum PoolMode {
    POOL_MODE_UNSPECIFIED = 0;

    // Assign server connection to a client until it disconnects. Default value.
    SESSION = 1;

    // Assign server connection to a client for a transaction processing.
    TRANSACTION = 2;
  }

  // Route server pool mode.
  PoolMode mode = 1;

  // The number of servers in the server pool. Clients are placed in a wait queue when all servers are busy.
  //
  // Set to zero to disable the limit.
  google.protobuf.Int64Value size = 2;

  // Server pool idle timeout, in seconds.
  //
  // A server connection closes after being idle for the specified time.
  //
  // Set to zero to disable the limit.
  google.protobuf.Int64Value client_idle_timeout = 3;
}

message BackgroundActivityStartAt {
    int64 hours = 1 [(value) = "0-23"];
    int64 minutes = 2 [(value) = "0-59"];
}

message TableSizes {
    repeated BackgroundActivityStartAt starts = 1 [(size) = "<=4"];
}

message AnalyzeAndVacuum {
    BackgroundActivityStartAt start = 1;
    // Maximum duration of the `ANALYZE` operation, in seconds. The default value is `36000`. As soon as this period expires, the `ANALYZE` operation will be forced to terminate.
    google.protobuf.Int64Value analyze_timeout = 2[(value) = "7200-86399"];
    // Maximum duration of the `VACUUM` operation, in seconds. The default value is `36000`. As soon as this period expires, the `VACUUM` operation will be forced to terminate.
    google.protobuf.Int64Value vacuum_timeout = 3[(value) = "7200-86399"];
}

message BackgroundActivitiesConfig {
    // Enables scripts that collects tables sizes to `*_sizes` tables in `mdb_toolkit` schema.
    TableSizes table_sizes = 1;
    // Configuration for `ANALYZE` and `VACUUM` operations.
    AnalyzeAndVacuum analyze_and_vacuum = 2;
    // Configuration for long running queries killer.
    QueryKillerScripts query_killer_scripts = 3;
}

message QueryKiller {
  google.protobuf.BoolValue enable = 1;
  // Maximum duration for this type of queries (in seconds).
  google.protobuf.Int64Value max_age = 2[(value) = "1-86400"];
  // Ignore these users when considering queries to terminate
  repeated string ignore_users = 3;
}

message QueryKillerScripts {
  // Configuration of script that kills long running queries that are in `idle` state.
  QueryKiller idle = 1;
  // Configuration of script that kills long running queries that are in `idle in transaction` state.
  QueryKiller idle_in_transaction = 2;
  // Configuration of script that kills long running queries (in any state).
  QueryKiller long_running = 3;
}

// Configuration of the master subcluster.

message MasterSubclusterConfig {

  // Computational resources allocated to Greenplum速 master subcluster hosts.
  Resources resources = 1;
}

// Configuration of the segment subcluster.

message SegmentSubclusterConfig {

  // Computational resources allocated to Greenplum速 segment subcluster hosts.
  Resources resources = 1;
}

enum LogStatement {
    LOG_STATEMENT_UNSPECIFIED = 0;

    // None statements are logged.
    NONE = 1;

    // Logs all data definition commands like `CREATE`, `ALTER`, and `DROP`. Default value.
    DDL = 2;

    // Logs all `DDL` statements, plus `INSERT`, `UPDATE`, `DELETE`, `TRUNCATE`, and `COPY FROM`.
    MOD = 3;

    // Logs all statements.
    ALL = 4;
}

message GreenplumConfig6 {
  // Maximum number of inbound connections on master segment
  google.protobuf.Int64Value max_connections = 1;

  // Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
  // https://www.postgresql.org/docs/current/runtime-config-replication.html
  google.protobuf.Int64Value max_slot_wal_keep_size = 2;

  // Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
  // The default value is 0, which means a limit is not enforced.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_segment
  google.protobuf.Int64Value gp_workfile_limit_per_segment = 3;

  // Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
  // The default value is 0, which means a limit is not enforced.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_query
  google.protobuf.Int64Value gp_workfile_limit_per_query = 4;

  // Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
  // Spill files are created when executing a query that requires more memory than it is allocated.
  // The current query is terminated when the limit is exceeded.
  // Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_files_per_query
  // Default value is 10000
  google.protobuf.Int64Value gp_workfile_limit_files_per_query = 5;

  // Sets the maximum number of transactions that can be in the "prepared" state simultaneously
  // https://www.postgresql.org/docs/9.6/runtime-config-resource.html
  google.protobuf.Int64Value max_prepared_transactions = 6;

  // Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_compression
  google.protobuf.BoolValue gp_workfile_compression = 7;

  // Sets the maximum memory limit for a query. Helps avoid out-of-memory errors on a segment host during query processing as a result of setting statement_mem too high.
  // Taking into account the configuration of a single segment host, calculate max_statement_mem as follows:
  // (seghost_physical_memory) / (average_number_concurrent_queries)
  // When changing both max_statement_mem and statement_mem, max_statement_mem must be changed first, or listed first in the postgresql.conf file.
  // https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem
  // Default value is 2097152000 (2000MB)
  google.protobuf.Int64Value max_statement_mem = 8; // in bytes

  // Controls which SQL statements are logged. DDL logs all data definition commands like CREATE, ALTER, and DROP commands.
  // MOD logs all DDL statements, plus INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM.
  // PREPARE and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
  // https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#log_statement
  // Default value is ddl
  LogStatement log_statement = 9;

  // https://docs.vmware.com/en/VMware-Tanzu-Greenplum/6/greenplum-database/GUID-ref_guide-config_params-guc-list.html#gp_add_column_inherits_table_setting
  google.protobuf.BoolValue gp_add_column_inherits_table_setting = 10;

  // Controls whether the Greenplum Database Global Deadlock Detector is enabled to manage concurrent UPDATE and DELETE operations on heap tables to improve performance. See Inserting, Updating, and Deleting Datain the Greenplum Database Administrator Guide. The default is off, the Global Deadlock Detector is deactivated.
  // If the Global Deadlock Detector is deactivated (the default), Greenplum Database runs concurrent update and delete operations on a heap table serially.
  // If the Global Deadlock Detector is enabled, concurrent updates are permitted and the Global Deadlock Detector determines when a deadlock exists, and breaks the deadlock by cancelling one or more backend processes associated with the youngest transaction(s) involved.
  // https://techdocs.broadcom.com/us/en/vmware-tanzu/data-solutions/tanzu-greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_enable_global_deadlock_detector
  google.protobuf.BoolValue gp_enable_global_deadlock_detector = 11;

  // Specifies the executing interval (in seconds) of the global deadlock detector background worker process.
  // https://techdocs.broadcom.com/us/en/vmware-tanzu/data-solutions/tanzu-greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_global_deadlock_detector_period
  google.protobuf.Int64Value gp_global_deadlock_detector_period = 12;
}

message GreenplumConfig6_17 {
  // Maximum number of inbound connections on master segment.
  google.protobuf.Int64Value max_connections = 1;

  // The maximum size of WAL files that replication slots are allowed to retain in the `pg_wal` directory at checkpoint time.
  //
  // More info in [PostgreSQL速 documentation](https://www.postgresql.org/docs/current/runtime-config-replication.html).
  google.protobuf.Int64Value max_slot_wal_keep_size = 2;

  // The maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
  //
  // The default value is 0 (no limit).
  //
  // More info in [Greenplum速 documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_segment).
  google.protobuf.Int64Value gp_workfile_limit_per_segment = 3;

  // The maximum disk size that an individual query is allowed to use for creating temporary spill files at each segment.
  //
  // The default value is 0 (no limit).
  //
  // More info in [Greenplum速 documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_query).
  google.protobuf.Int64Value gp_workfile_limit_per_query = 4;

  // The maximum number of temporary spill files allowed per query at each segment.
  //
  // Spill files, also known as workfiles, are created when a query requires more memory than there is allocated.
  //
  // The current query is terminated if the limit is exceeded.
  //
  // Set to zero to disable the limit.
  //
  // Master session reloads if the parameter changes.
  //
  // Default value is 10000.
  //
  // More info in [Greenplum速 documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_files_per_query).
  google.protobuf.Int64Value gp_workfile_limit_files_per_query = 5;

  // The maximum number of transactions that can be in the `prepared` state simultaneously.
  //
  // More info in [PostgreSQL速 documentation](https://www.postgresql.org/docs/9.6/runtime-config-resource.html).
  google.protobuf.Int64Value max_prepared_transactions = 6;

  // Whether the spill files are compressed or not.
  //
  // More info in [Greenplum速 documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_compression).
  google.protobuf.BoolValue gp_workfile_compression = 7;
}

message GreenplumConfig6_19 {
  // Maximum number of inbound connections on master segment.
  google.protobuf.Int64Value max_connections = 1;

  // The maximum size of WAL files that replication slots are allowed to retain in the `pg_wal` directory at checkpoint time.
  //
  // More info in [PostgreSQL速 documentation](https://www.postgresql.org/docs/current/runtime-config-replication.html).
  google.protobuf.Int64Value max_slot_wal_keep_size = 2;

  // The maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
  //
  // The default value is 0 (no limit).
  //
  // More info in [Greenplum速 documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_segment).
  google.protobuf.Int64Value gp_workfile_limit_per_segment = 3;

  // The maximum disk size that an individual query is allowed to use for creating temporary spill files at each segment.
  //
  // The default value is 0 (no limit).
  //
  // More info in [Greenplum速 documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_query).
  google.protobuf.Int64Value gp_workfile_limit_per_query = 4;

  // The maximum number of temporary spill files allowed per query at each segment.
  //
  // Spill files, also known as workfiles, are created when a query requires more memory than there is allocated.
  //
  // The current query is terminated if the limit is exceeded.
  //
  // Set to zero to disable the limit.
  //
  // Master session reloads if the parameter changes.
  //
  // Default value is 10000.
  //
  // More info in [Greenplum速 documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_files_per_query).
  google.protobuf.Int64Value gp_workfile_limit_files_per_query = 5;

  // The maximum number of transactions that can be in the `prepared` state simultaneously.
  //
  // More info in [PostgreSQL速 documentation](https://www.postgresql.org/docs/9.6/runtime-config-resource.html).
  google.protobuf.Int64Value max_prepared_transactions = 6;

  // Whether the spill files are compressed or not.
  //
  // More info in [Greenplum速 documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_compression).
  google.protobuf.BoolValue gp_workfile_compression = 7;

  // The maximum memory limit for a query, in bytes.
  //
  // Helps to avoid out-of-memory errors on a segment host during query processing as a result of setting `statement_mem` too high.
  //
  // Taking into account the configuration of a single segment host, calculate [max_statement_mem] as follows: `seghost_physical_memory` / `average_number_concurrent_queries`.
  //
  // When changing both [max_statement_mem] and `statement_mem`, [max_statement_mem] must be changed first, or listed first in the `postgresql.conf` file.
  //
  // Default value is 2097152000 (2000 MB).
  //
  // More info in [Greenplum速 documentation](https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem).
  google.protobuf.Int64Value max_statement_mem = 8; // in bytes

  // Logged SQL statements.
  //
  // `PREPARE` and `EXPLAIN ANALYZE` statements are also logged if their contained command belongs to an appropriate type.
  //
  // More info in [Greenplum速 documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#log_statement).
  //
  LogStatement log_statement = 9;
}

message GreenplumConfig6_21 {
  // Maximum number of inbound connections on master segment
  google.protobuf.Int64Value max_connections = 1;

  // Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
  // https://www.postgresql.org/docs/current/runtime-config-replication.html
  google.protobuf.Int64Value max_slot_wal_keep_size = 2;

  // Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
  // The default value is 0, which means a limit is not enforced.
  // https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_segment
  google.protobuf.Int64Value gp_workfile_limit_per_segment = 3;

  // Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
  // The default value is 0, which means a limit is not enforced.
  // https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_query
  google.protobuf.Int64Value gp_workfile_limit_per_query = 4;

  // Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
  // Spill files are created when executing a query that requires more memory than it is allocated.
  // The current query is terminated when the limit is exceeded.
  // Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
  // https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_files_per_query
  // Default value is 10000
  google.protobuf.Int64Value gp_workfile_limit_files_per_query = 5;

  // Sets the maximum number of transactions that can be in the "prepared" state simultaneously
  // https://www.postgresql.org/docs/9.6/runtime-config-resource.html
  google.protobuf.Int64Value max_prepared_transactions = 6;

  // Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
  // https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_compression
  google.protobuf.BoolValue gp_workfile_compression = 7;

  // Sets the maximum memory limit for a query. Helps avoid out-of-memory errors on a segment host during query processing as a result of setting statement_mem too high.
  // Taking into account the configuration of a single segment host, calculate max_statement_mem as follows:
  // (seghost_physical_memory) / (average_number_concurrent_queries)
  // When changing both max_statement_mem and statement_mem, max_statement_mem must be changed first, or listed first in the postgresql.conf file.
  // https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem
  // Default value is 2097152000 (2000MB)
  google.protobuf.Int64Value max_statement_mem = 8; // in bytes

  // Controls which SQL statements are logged. DDL logs all data definition commands like CREATE, ALTER, and DROP commands.
  // MOD logs all DDL statements, plus INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM.
  // PREPARE and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
  // https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#log_statement
  // Default value is ddl
  LogStatement log_statement = 9;

  // https://docs.vmware.com/en/VMware-Tanzu-Greenplum/6/greenplum-database/GUID-ref_guide-config_params-guc-list.html#gp_add_column_inherits_table_setting
  google.protobuf.BoolValue gp_add_column_inherits_table_setting = 10;
}

message GreenplumConfig6_22 {
  // Maximum number of inbound connections on master segment
  google.protobuf.Int64Value max_connections = 1;

  // Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
  // https://www.postgresql.org/docs/current/runtime-config-replication.html
  google.protobuf.Int64Value max_slot_wal_keep_size = 2;

  // Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
  // The default value is 0, which means a limit is not enforced.
  // https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_segment
  google.protobuf.Int64Value gp_workfile_limit_per_segment = 3;

  // Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
  // The default value is 0, which means a limit is not enforced.
  // https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_query
  google.protobuf.Int64Value gp_workfile_limit_per_query = 4;

  // Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
  // Spill files are created when executing a query that requires more memory than it is allocated.
  // The current query is terminated when the limit is exceeded.
  // Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
  // https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_files_per_query
  // Default value is 10000
  google.protobuf.Int64Value gp_workfile_limit_files_per_query = 5;

  // Sets the maximum number of transactions that can be in the "prepared" state simultaneously
  // https://www.postgresql.org/docs/9.6/runtime-config-resource.html
  google.protobuf.Int64Value max_prepared_transactions = 6;

  // Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
  // https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_compression
  google.protobuf.BoolValue gp_workfile_compression = 7;

  // Sets the maximum memory limit for a query. Helps avoid out-of-memory errors on a segment host during query processing as a result of setting statement_mem too high.
  // Taking into account the configuration of a single segment host, calculate max_statement_mem as follows:
  // (seghost_physical_memory) / (average_number_concurrent_queries)
  // When changing both max_statement_mem and statement_mem, max_statement_mem must be changed first, or listed first in the postgresql.conf file.
  // https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem
  // Default value is 2097152000 (2000MB)
  google.protobuf.Int64Value max_statement_mem = 8; // in bytes

  // Controls which SQL statements are logged. DDL logs all data definition commands like CREATE, ALTER, and DROP commands.
  // MOD logs all DDL statements, plus INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM.
  // PREPARE and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
  // https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#log_statement
  // Default value is ddl
  LogStatement log_statement = 9;

  // https://docs.vmware.com/en/VMware-Tanzu-Greenplum/6/greenplum-database/GUID-ref_guide-config_params-guc-list.html#gp_add_column_inherits_table_setting
  google.protobuf.BoolValue gp_add_column_inherits_table_setting = 10;
}

// Configuration settings version 6.17
message GreenplumConfigSet6_17 {
  // Effective settings for a Greenplum速 cluster (a combination of settings defined in [user_config] and [default_config]).
  GreenplumConfig6_17 effective_config = 1 [(required) = true];

  // User-defined settings for a Greenplum速 cluster.
  GreenplumConfig6_17 user_config = 2;

  // Default configuration for a Greenplum速 cluster.
  GreenplumConfig6_17 default_config = 3;
}

// Configuration settings version 6.19
message GreenplumConfigSet6_19 {
  // Effective settings for a Greenplum速 cluster (a combination of settings defined in [user_config] and [default_config]).
  GreenplumConfig6_19 effective_config = 1 [(required) = true];

  // User-defined settings for a Greenplum速 cluster.
  GreenplumConfig6_19 user_config = 2;

  // Default configuration for a Greenplum速 cluster.
  GreenplumConfig6_19 default_config = 3;
}

message GreenplumConfigSet6_21 {
  // Effective settings for a Greenplum速  cluster (a combination of settings defined in [user_config] and [default_config]).
  GreenplumConfig6_21 effective_config = 1 [(required) = true];

  // User-defined settings for a Greenplum速 cluster.
  GreenplumConfig6_21 user_config = 2;

  // Default configuration for a Greenplum速 cluster.
  GreenplumConfig6_21 default_config = 3;
}

message GreenplumConfigSet6_22 {
  // Effective settings for a Greenplum速  cluster (a combination of settings defined in [user_config] and [default_config]).
  GreenplumConfig6_22 effective_config = 1 [(required) = true];

  // User-defined settings for a Greenplum速 cluster.
  GreenplumConfig6_22 user_config = 2;

  // Default configuration for a Greenplum速 cluster.
  GreenplumConfig6_22 default_config = 3;
}

message GreenplumConfigSet6 {
  // Effective settings for a Greenplum (a combination of settings defined
  // in [user_config] and [default_config]).
  GreenplumConfig6 effective_config = 1 [(required) = true];

  // User-defined settings for a Greenplum.
  GreenplumConfig6 user_config = 2;

  // Default configuration for a Greenplum.
  GreenplumConfig6 default_config = 3;
}

message ConnectionPoolerConfigSet {
  // Effective settings for an Odyssey速 pooler (a combination of settings defined in [ConnectionPoolerConfigSet.user_config] and [ConnectionPoolerConfigSet.default_config]).
  ConnectionPoolerConfig effective_config = 1 [(required) = true];

  // User-defined settings for an Odyssey速 pooler.
  ConnectionPoolerConfig user_config = 2;

  // Default configuration for an Odyssey速 pooler.
  ConnectionPoolerConfig default_config = 3;
}

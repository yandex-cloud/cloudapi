syntax = "proto3";

package yandex.cloud.mdb.opensearch.v1;

import "google/api/annotations.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/mdb/opensearch/v1/extension.proto";
import "yandex/cloud/operation/operation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/opensearch/v1;opensearch";
option java_package = "yandex.cloud.api.mdb.opensearch.v1";

service ExtensionService {
  // Returns the specified extension of OpenSearch cluster.
  rpc Get (GetExtensionRequest) returns (Extension) {
    option (google.api.http) = { get: "/managed-opensearch/v1/clusters/{cluster_id}/extensions/{extension_id}" };
  }

  // Returns the list of available extensions for the specified OpenSearch cluster.
  rpc List (ListExtensionsRequest) returns (ListExtensionsResponse) {
    option (google.api.http) = { get: "/managed-opensearch/v1/clusters/{cluster_id}/extensions" };
  }

  // Creates new extension version.
  rpc Create (CreateExtensionRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-opensearch/v1/clusters/{cluster_id}/extensions" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateExtensionMetadata"
      response: "Extension"
    };
  }

  // Updates the specified extension.
  rpc Update (UpdateExtensionRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/managed-opensearch/v1/clusters/{cluster_id}/extensions/{extension_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateExtensionMetadata"
      response: "Extension"
    };
  }

  // Deletes the specified extension.
  rpc Delete (DeleteExtensionRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/managed-opensearch/v1/clusters/{cluster_id}/extensions/{extension_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteExtensionMetadata"
      response: "google.protobuf.Empty"
    };
  }

}

message GetExtensionRequest {
  // Required. ID of the cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required. ID of the extension to return.
  string extension_id = 2 [(required) = true];
}

message ListExtensionsRequest {
  // Required. ID of the cluster to list extensions in.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a `next_page_token` that can be used
  // to get the next page of results in subsequent ListBackups requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. Set `page_token` to the `next_page_token` returned by a previous ListBackups
  // request to get the next page of results.
  string page_token = 3 [(length) = "<=100"];
}

message ListExtensionsResponse {
  // Requested list of extensions.
  repeated Extension extensions = 1;

  // This token allows you to get the next page of results for ListBackups requests,
  // if the number of results is larger than `page_size` specified in the request.
  // To get the next page, specify the value of `next_page_token` as a value for
  // the `page_token` parameter in the next ListBackups request. Subsequent ListBackups
  // requests will have their own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}

message DeleteExtensionRequest {
  // Required. ID of the cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required. ID of the extension to delete.
  string extension_id = 2 [(required) = true];
}

message DeleteExtensionMetadata {
  // Required. ID of the cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required. ID of the extension to delete.
  string extension_id = 2 [(required) = true];
}

message UpdateExtensionRequest {
  // Required. ID of the cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required. ID of the extension to update.
  string extension_id = 2 [(required) = true];

  bool active = 3;
}

message UpdateExtensionMetadata {
  // Required. ID of the cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required. ID of the extension.
  string extension_id = 2 [(required) = true];
}

message CreateExtensionRequest {
  reserved 2 to 4;

  // Required. ID of the cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  ExtensionSpec extension_spec = 5 [(required) = true];
}

message CreateExtensionMetadata {
  // Required. ID of the cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required. ID of the extension.
  string extension_id = 2 [(required) = true];
}

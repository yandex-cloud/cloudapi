syntax = "proto3";

package yandex.cloud.mdb.opensearch.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/mdb/opensearch/v1/config/opensearch.proto";
import "yandex/cloud/mdb/opensearch/v1/backup.proto";
import "yandex/cloud/mdb/opensearch/v1/maintenance.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/opensearch/v1;opensearch";
option java_package = "yandex.cloud.api.mdb.opensearch.v1";

// An OpenSearch cluster resource.
message Cluster {
  reserved 18;

  enum Environment {
    ENVIRONMENT_UNSPECIFIED = 0;

    // Stable environment with a conservative update policy:
    // only hotfixes are applied during regular maintenance.
    PRODUCTION = 1;

    // Environment with more aggressive update policy: new versions
    // are rolled out irrespective of backward compatibility.
    PRESTABLE = 2;
  }

  enum Health {

    // Health of the cluster is unknown ([Host.health] for every host in the cluster is UNKNOWN).
    HEALTH_UNKNOWN = 0;

    // Cluster is working normally ([Host.health] for every host in the cluster is ALIVE).
    ALIVE = 1;

    // Cluster is inoperable ([Host.health] for every host in the cluster is DEAD).
    DEAD = 2;

    // Cluster is working below capacity ([Host.health] for at least one host in the cluster is not ALIVE).
    DEGRADED = 3;
  }

  // Current state of the cluster.
  enum Status {

    // Cluster state is unknown.
    STATUS_UNKNOWN = 0;

    // Cluster is being created.
    CREATING = 1;

    // Cluster is running normally.
    RUNNING = 2;

    // Cluster has encountered a problem and cannot operate.
    ERROR = 3;

    // Cluster is being updated.
    UPDATING = 4;

    // Cluster is stopping.
    STOPPING = 5;

    // Cluster has stopped.
    STOPPED = 6;

    // Cluster is starting.
    STARTING = 7;
  }

  // ID of the OpenSearch cluster.
  // This ID is assigned by the platform at the moment of cluster creation.
  string id = 1;

  // ID of the folder that the OpenSearch cluster belongs to.
  string folder_id = 2;

  // Time when the cluster was created.
  google.protobuf.Timestamp created_at = 3;

  // Name of the OpenSearch cluster.
  // The name is unique within the folder. 1-63 characters long.
  string name = 4;

  // Description of the OpenSearch cluster. 0-256 characters long.
  string description = 5;

  // Custom labels for the OpenSearch cluster as `key:value` pairs.
  // Maximum 64 labels per resource.
  map<string, string> labels = 6;

  // Deployment environment of the OpenSearch cluster.
  Environment environment = 7;

  // Description of monitoring systems relevant to the OpenSearch cluster.
  repeated Monitoring monitoring = 8;

  // Configuration of the OpenSearch cluster.
  ClusterConfig config = 9;

  // ID of the cloud network that the cluster belongs to.
  string network_id = 10;

  // Aggregated cluster health.
  Health health = 11;

  // Current state of the cluster.
  Status status = 12;

  // User security groups.
  repeated string security_group_ids = 13;

  // ID of the service account used to access Object Storage.
  string service_account_id = 14;

  // Determines whether the cluster is protected from being deleted.
  bool deletion_protection = 15;

  // Cluster maintenance window. Should be defined by either one of the two options.
  MaintenanceWindow maintenance_window = 16;

  // Maintenance operation planned at nearest [maintenance_window].
  MaintenanceOperation planned_operation = 17;

  // ID of the key to encrypt cluster disks.
  google.protobuf.StringValue disk_encryption_key_id = 19;
}

// Monitoring system metadata.
message Monitoring {
  // Name of the monitoring system.
  string name = 1;

  // Description of the monitoring system.
  string description = 2;

  // Link to the monitoring system charts for the OpenSearch cluster.
  string link = 3;
}

// The OpenSearch cluster configuration.
message ClusterConfig {
  // Version of the OpenSearch server software.
  string version = 1;

  // OpenSearch configuration.
  OpenSearch opensearch = 2;

  // Dashboards configuration.
  Dashboards dashboards = 3;

  // Access policy for external services.
  Access access = 4;

  // Snapshot management configuration
  SnapshotManagement snapshot_management = 5;
}

// The OpenSearch host group type configuration.
message OpenSearch {
  enum GroupRole {
    GROUP_ROLE_UNSPECIFIED = 0;
    DATA = 1;
    MANAGER = 2;
  }

  // Configuration of the host group.
  message NodeGroup {
    reserved 8;

    // Name of the group. Must be 1-63 characters long.
    string name = 1;

    // Resources allocated to the hosts.
    Resources resources = 2;

    // Number of hosts in the group.
    int64 hosts_count = 3;

    // IDs of the availability zones the hosts belong to.
    repeated string zone_ids = 4;

    // IDs of the subnets that the hosts belong to.
    repeated string subnet_ids = 5;

    // Determines whether a public IP is assigned to the hosts in the group.
    bool assign_public_ip = 6;

    // Roles of the host group.
    repeated GroupRole roles = 7;

    // Disk size autoscaling settings
    DiskSizeAutoscaling disk_size_autoscaling =  9;
  }

  // Names of the cluster plugins.
  repeated string plugins = 1;

  // Host groups of the OpenSearch type.
  repeated NodeGroup node_groups = 2;

  oneof config {
    config.OpenSearchConfigSet2 opensearch_config_set_2 = 3 [json_name = "opensearchConfigSet_2"];
  }

  // Keystore entries names.
  repeated string keystore_settings = 4;
}

// The Dashboards host group type configuration.
message Dashboards {
  message NodeGroup {
    reserved 7 to 8;

    // Name of the group. 1-63 characters long.
    string name = 1;

    // Resources allocated to the hosts.
    Resources resources = 2;

    // Number of hosts in the group.
    int64 hosts_count = 3;

    // IDs of the availability zones the hosts belong to.
    repeated string zone_ids = 4;

    // IDs of the subnets that the hosts belong to.
    repeated string subnet_ids = 5;

    // Determines whether a public IP is assigned to the hosts in the group.
    bool assign_public_ip = 6;

    // Disk size autoscaling settings
    DiskSizeAutoscaling disk_size_autoscaling =  9;
  }

  // Host groups of the Dashboards type.
  repeated NodeGroup node_groups = 2;
}

// A list of computational resources allocated to a host.
message Resources {
  // ID of the preset for computational resources allocated to a host.
  string resource_preset_id = 1;

  // Volume of the storage used by the host, in bytes.
  int64 disk_size = 2;

  // Type of the storage used by the host: `network-hdd`, `network-ssd` or `local-ssd`.
  string disk_type_id = 3;
}

// An OpenSearch cluster host resource.
message Host {
  reserved 7;

  enum Health {

    // Health of the host is unknown. Default value.
    UNKNOWN = 0;

    // The host is performing all its functions normally.
    ALIVE = 1;

    // The host is inoperable and cannot perform any of its essential functions.
    DEAD = 2;

    // The host is working below capacity or not fully functional.
    DEGRADED = 3;
  }

  enum Type {
    // Type of the host is unspecified. Default value.
    TYPE_UNSPECIFIED = 0;

    // An OpenSearch type host.
    OPENSEARCH = 1;

    // A Dashboards type host.
    DASHBOARDS = 2;
  }

  // CPU usage of the host.
  message CPUMetric {
    // Time of the record.
    int64 timestamp = 1;

    // Percentage of the CPU used.
    double used = 2;
  }

  // RAM usage of the host.
  message MemoryMetric {
    // Time of the record.
    int64 timestamp = 1;

    // The amount of RAM used, in bytes.
    int64 used = 2;

    // Total amount of RAM allocated to the host.
    int64 total = 3;
  }

  // Disk usage of the host.
  message DiskMetric {
    // Time of the record.
    int64 timestamp = 1;

    // The amount of disk space used, in bytes.
    int64 used = 2;

    // Total amount of disk space allocated to the host.
    int64 total = 3;
  }

  // Resources used by the host.
  message SystemMetrics {
    // CPU usage of the host.
    CPUMetric cpu = 1;

    // RAM usage of the host.
    MemoryMetric memory = 2;

    // Disk usage of the host.
    DiskMetric disk = 3;
  }

  // Required. Name of the OpenSearch host.
  //
  // The host name is assigned by the platform at creation time and cannot be changed.
  //
  // The name is unique across all MDB hosts that exist on the platform, as it defines the FQDN of the host.
  string name = 1;

  // Required. ID of the OpenSearch cluster. The ID is assigned by the platform at creation time.
  string cluster_id = 2;

  // ID of the availability zone the OpenSearch host belongs to.
  string zone_id = 3;

  // Resources allocated to the OpenSearch host.
  Resources resources = 4;

  // Type of the host. If the field has default value, it is not returned in the response.
  Type type = 5;

  // Aggregated health of the host. If the field has default value, it is not returned in the response.
  Health health = 6;

  // ID of the subnet that the host belongs to.
  string subnet_id = 8;

  // Determines whether a public IP is assigned to the host.
  bool assign_public_ip = 9;

  // Resources used by the host.
  SystemMetrics system = 10;

  // Name of the host group that the host belongs to.
  string node_group = 11;

  // Roles of the host.
  repeated OpenSearch.GroupRole roles = 12;
}

// Access policy for external services.
message Access {
  // Determines whether the access to Data Transfer is allowed.
  bool data_transfer = 1;

  // Determines whether the access to Serverless is allowed.
  bool serverless = 2;
}

message DiskSizeAutoscaling {
    // Amount of used storage for automatic disk scaling in the maintenance window, 0 means disabled, in percent.
    int64 planned_usage_threshold = 1 [(required) = false, (value) = "0-100"];

    // Amount of used storage for immediately  automatic disk scaling, 0 means disabled, in percent.
    int64 emergency_usage_threshold = 2 [(required) = false, (value) = "0-100"];

    // Limit on how large the storage for database instances can automatically grow, in bytes.
    int64 disk_size_limit = 3;
}

syntax = "proto3";

package yandex.cloud.mdb.mysql.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/wrappers.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/mdb/mysql/v1/user.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/mysql/v1;mysql";
option java_package = "yandex.cloud.api.mdb.mysql.v1";

// A set of methods for managing MySQL users.
//
// See [the documentation](/docs/managed-mysql/operations/cluster-users) for details.
service UserService {

  // Retrieves information about the specified user.
  rpc Get (GetUserRequest) returns (User) {
    option (google.api.http) = { get: "/managed-mysql/v1/clusters/{cluster_id}/users/{user_name}" };
  }

  // Retrieves the list of users in a cluster.
  rpc List (ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = { get: "/managed-mysql/v1/clusters/{cluster_id}/users" };
  }

  // Creates a user in a cluster.
  rpc Create (CreateUserRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-mysql/v1/clusters/{cluster_id}/users" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateUserMetadata"
      response: "User"
    };
  }

  // Updates a user in a cluster.
  rpc Update (UpdateUserRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/managed-mysql/v1/clusters/{cluster_id}/users/{user_name}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateUserMetadata"
      response: "User"
    };
  }

  // Deletes a user in a cluster.
  rpc Delete (DeleteUserRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/managed-mysql/v1/clusters/{cluster_id}/users/{user_name}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteUserMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Grants permission to access a database to a user in a cluster.
  rpc GrantPermission (GrantUserPermissionRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-mysql/v1/clusters/{cluster_id}/users/{user_name}:grantPermission" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "GrantUserPermissionMetadata"
      response: "User"
    };
  }

  // Revokes permission to access a database from a user in a cluster.
  rpc RevokePermission (RevokeUserPermissionRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-mysql/v1/clusters/{cluster_id}/users/{user_name}:revokePermission" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "RevokeUserPermissionMetadata"
      response: "User"
    };
  }
}

message GetUserRequest {

  // ID of the cluster the user belongs to.
  //
  // To get this ID, make a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the user to return information about.
  //
  // To get this name, make a [UserService.List] request.
  string user_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
}

message ListUsersRequest {

  // ID of the cluster to list the users in.
  //
  // To get this ID, make a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return.
  //
  // If the number of available results is larger than [page_size], the API returns a [ListUsersResponse.next_page_token] that can be used to get the next page of results in the subsequent [UserService.List] requests.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token that can be used to iterate through multiple pages of results.
  //
  // To get the next page of results, set [page_token] to the [ListUsersResponse.next_page_token] returned by the previous [UserService.List] request.
  string page_token = 3 [(length) = "<=100"];
}

message ListUsersResponse {

  // List of users.
  repeated User users = 1;

  // The token that can be used to get the next page of results.
  //
  // If the number of results is larger than [ListUsersRequest.page_size], use the [next_page_token] as the value for the [ListUsersRequest.page_token] in the subsequent [UserService.List] request to iterate through multiple pages of results.
  //
  // Each of the subsequent [UserService.List] requests should use the [next_page_token] value returned by the previous request to continue paging through the results.
  string next_page_token = 2;
}

message CreateUserRequest {

  // ID of the cluster to create the user in.
  //
  // To get this ID, make a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Configuration of the user.
  UserSpec user_spec = 2 [(required) = true];
}

message CreateUserMetadata {

  // ID of the cluster the user is being created in.
  string cluster_id = 1;

  // Name of the user that is being created.
  string user_name = 2;
}

message UpdateUserRequest {

  // ID of the cluster to update the user in.
  //
  // To get this ID, make a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the user to update.
  //
  // To get this name, make a [UserService.List] request.
  string user_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Field mask that specifies which settings of the user should be updated.
  google.protobuf.FieldMask update_mask = 3;

  // New password for the user.
  string password = 4 [(length) = "8-128"];

  // A new set of permissions that should be granted to the user.
  repeated Permission permissions = 5;

  // New set of global permissions to grant to the user.
  repeated GlobalPermission global_permissions = 6;

  // Set of changed user connection limits.
  ConnectionLimits connection_limits = 7;

  // New user authentication plugin.
  AuthPlugin authentication_plugin = 8;

  // Generate password using Connection Manager.
  google.protobuf.BoolValue generate_password = 9;
}

message UpdateUserMetadata {

  // ID of the cluster the user is being updated in.
  string cluster_id = 1;

  // Name of the user that is being updated.
  string user_name = 2;
}

message DeleteUserRequest {

  // ID of the cluster to delete the user from.
  //
  // To get this ID, make a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the user to delete.
  //
  // To get this name, make a [UserService.List] request.
  string user_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
}

message DeleteUserMetadata {

  // ID of the cluster the user is being deleted from.
  string cluster_id = 1;

  // Name of the user that is being deleted.
  string user_name = 2;
}

message GrantUserPermissionRequest {

  // ID of the cluster to grant permission to the user in.
  //
  // To get this ID, make a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the user to grant permission to.
  //
  // To get this name, make a [UserService.List] request.
  string user_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Permission that should be granted to the specified user.
  Permission permission = 3 [(required) = true];
}

message GrantUserPermissionMetadata {

  // ID of the cluster the user is being granted a permission in.
  string cluster_id = 1;

  // Name of the user that is being granted a permission.
  string user_name = 2;
}

message RevokeUserPermissionRequest {

  // ID of the cluster to revoke permission from the user in.
  //
  // To get this ID, make a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the user to revoke permission from.
  //
  // To get this name, make a [UserService.List] request.
  string user_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Permission that should be revoked from the user.
  Permission permission = 3 [(required) = true];
}

message RevokeUserPermissionMetadata {

  // ID of the cluster the user is being revoked a permission in.
  string cluster_id = 1;

  // Name of the user whose permission is being revoked.
  string user_name = 2;
}

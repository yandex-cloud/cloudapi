syntax = "proto3";

package yandex.cloud.mdb.redis.v1.config;

import "google/protobuf/wrappers.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/redis/v1/config;redis";
option java_package = "yandex.cloud.api.mdb.redis.v1.config";

// Fields and structure of `RedisConfig` reflects Redis configuration file
// parameters.
message RedisConfig {
  enum MaxmemoryPolicy {
    MAXMEMORY_POLICY_UNSPECIFIED = 0;

    // Try to remove less recently used (LRU) keys with `expire set`.
    VOLATILE_LRU = 1;

    // Remove less recently used (LRU) keys.
    ALLKEYS_LRU = 2;

    // Try to remove least frequently used (LFU) keys with `expire set`.
    VOLATILE_LFU = 3;

    // Remove least frequently used (LFU) keys.
    ALLKEYS_LFU = 4;

    // Try to remove keys with `expire set` randomly.
    VOLATILE_RANDOM = 5;

    // Remove keys randomly.
    ALLKEYS_RANDOM = 6;

    // Try to remove less recently used (LRU) keys with `expire set`
    // and shorter TTL first.
    VOLATILE_TTL = 7;

    // Return errors when memory limit was reached and commands could require
    // more memory to be used.
    NOEVICTION = 8;
  }

  message ClientOutputBufferLimit {
    reserved 4;
    reserved 2;
    // Total limit in bytes.
    google.protobuf.Int64Value hard_limit = 1 [(value) = ">=0"];
    // Limit in bytes during certain time period.
    google.protobuf.Int64Value soft_limit = 3 [(value) = ">=0"];
    // Seconds for soft limit.
    google.protobuf.Int64Value soft_seconds = 5 [(value) = ">=0"];
  }

  // Redis key eviction policy for a dataset that reaches maximum memory,
  // available to the host. Redis maxmemory setting depends on Managed
  // Service for Redis [host class](/docs/managed-redis/concepts/instance-types).
  //
  // All policies are described in detail in [Redis documentation](https://redis.io/topics/lru-cache).
  MaxmemoryPolicy maxmemory_policy = 1;

  // Time that Redis keeps the connection open while the client is idle.
  // If no new command is sent during that time, the connection is closed.
  google.protobuf.Int64Value timeout = 2;

  // Authentication password.
  string password = 3 [(pattern) = "[a-zA-Z0-9@=+?*.,!&#$^<>_-]{8,128}"];

  // Number of database buckets on a single redis-server process.
  google.protobuf.Int64Value databases = 4 [(value) = ">0"];

  // Threshold for logging slow requests to server in microseconds (log only slower than it).
  google.protobuf.Int64Value slowlog_log_slower_than = 5 [(value) = ">=0"];

  // Max slow requests number to log.
  google.protobuf.Int64Value slowlog_max_len = 6 [(value) = ">=0"];

  // String setting for pub\sub functionality.
  string notify_keyspace_events = 7 [(pattern) = "[KEg$lshzxeAtm]{0,13}"];

  // Redis connection output buffers limits for pubsub operations.
  ClientOutputBufferLimit client_output_buffer_limit_pubsub = 8;

  // Redis connection output buffers limits for clients.
  ClientOutputBufferLimit client_output_buffer_limit_normal = 9;

  // Redis maxmemory percent
  google.protobuf.Int64Value maxmemory_percent = 10 [(value) = "1-75"];

  // Maximum time in milliseconds for Lua scripts, 0 - disabled mechanism
  google.protobuf.Int64Value lua_time_limit = 11 [(value) = ">=0"];

  // Replication backlog size as a percentage of flavor maxmemory
  google.protobuf.Int64Value repl_backlog_size_percent = 12 [(value) = ">0"];

  // Controls whether all hash slots must be covered by nodes
  google.protobuf.BoolValue cluster_require_full_coverage = 13;

  // Allows read operations when cluster is down
  google.protobuf.BoolValue cluster_allow_reads_when_down = 14;

  // Permits Pub/Sub shard operations when cluster is down
  google.protobuf.BoolValue cluster_allow_pubsubshard_when_down = 15;

  // The time, in minutes, that must elapse in order for the key counter to be divided by two (or decremented if it has a value less <= 10)
  google.protobuf.Int64Value lfu_decay_time = 16 [(value) = ">=0"];

  // Determines how the frequency counter represents key hits.
  google.protobuf.Int64Value lfu_log_factor = 17 [(value) = ">=0"];

  // Allows to turn before switchover in RDSync
  google.protobuf.BoolValue turn_before_switchover = 18;

  // Allows some data to be lost in favor of faster switchover/restart
  google.protobuf.BoolValue allow_data_loss = 19;

    // Use JIT for lua scripts and functions
  google.protobuf.BoolValue use_luajit = 20;

  // Allow redis to use io-threads
  google.protobuf.BoolValue io_threads_allowed = 21;
}

message RedisConfigSet {
  // Effective settings for a Redis cluster (a combination of settings
  // defined in [user_config] and [default_config]).
  RedisConfig effective_config = 1;

  // User-defined settings for a Redis cluster.
  RedisConfig user_config = 2;

  // Default configuration for a Redis cluster.
  RedisConfig default_config = 3;
}

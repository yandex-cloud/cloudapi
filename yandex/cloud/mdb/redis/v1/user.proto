syntax = "proto3";

package yandex.cloud.mdb.redis.v1;

import "google/protobuf/wrappers.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/redis/v1;redis";
option java_package = "yandex.cloud.api.mdb.redis.v1";

// A Redis User resource. For more information, see the
// [Developer's Guide](/docs/managed-redis/concepts).
message User {
  // Name of the Redis user.
  string name = 1;

  // ID of the Redis cluster the user belongs to.
  string cluster_id = 2;

  // Set of permissions to grant to the user.
  Permissions permissions = 3;

  // Is redis user enabled
  bool enabled = 4;

  // Raw ACL string inside of Redis
  string acl_options = 5;
}

message Permissions {
  // Keys patterns user has permission to.
  google.protobuf.StringValue patterns = 1;

  // Channel patterns user has permissions to.
  google.protobuf.StringValue pub_sub_channels = 2;

  // Command categories user has permissions to.
  google.protobuf.StringValue categories = 3;

  // Commands user can execute.
  google.protobuf.StringValue commands = 4;

  // SanitizePayload parameter.
  google.protobuf.StringValue sanitize_payload = 5;

}

message UserSpec {
  // Name of the Redis user.
  string name = 1 [(required) = true, (length) = "<=32", (pattern) = "^[a-zA-Z0-9_][a-zA-Z0-9_-]*$"];

  // Password of the Redis user.
  repeated string passwords = 2 [(size) = "1", (unique) = true, (pattern) = "^[a-zA-Z0-9@=+?*.,!&#$^<>_-]*$"];

  // Set of permissions to grant to the user.
  Permissions permissions = 3;

  // Is Redis user enabled
  google.protobuf.BoolValue enabled = 4;
}

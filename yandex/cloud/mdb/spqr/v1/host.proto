syntax = "proto3";

package yandex.cloud.mdb.spqr.v1;

import "yandex/cloud/mdb/spqr/v1/config.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/spqr/v1;spqr";
option java_package = "yandex.cloud.api.mdb.spqr.v1";

message Host {
  enum Type {
    TYPE_UNSPECIFIED = 0;

    // accidentally missed a value
    reserved 1; 

    // A SPQR Router host.
    ROUTER = 2;

    // A SPQR Coordinator host.
    COORDINATOR = 3;

    // A SPQR Infra host (router+coordinator)
    INFRA = 4;

    // A PostgreSQL host.
    POSTGRESQL = 5;

    // An External PostgreSQL host.
    EXTERNAL_POSTGRESQL = 6;

    // A Managed PostgreSQL host
    MDB_POSTGRESQL = 7;
  }

  enum Role {

    // Role of the host in the cluster is unknown.
    ROLE_UNKNOWN = 0;

    // Host is the primary SPQR server in the cluster.
    PRIMARY = 1;

    // Host is a secondary SPQR server in the cluster.
    SECONDARY = 2;

    // Host is the master PostgreSQL server in the cluster.
    MASTER = 3;

    // Host is a replica (standby) PostgreSQL server in the cluster.
    REPLICA = 4;
  }

  enum Health {

    // Health of the host is unknown.
    HEALTH_UNKNOWN = 0;

    // The host is performing all its functions normally.
    ALIVE = 1;

    // The host is inoperable, and cannot perform any of its essential functions.
    DEAD = 2;

    // The host is degraded, and can perform only some of its essential functions.
    DEGRADED = 3;
  }

    message CPUMetric {
        int64 timestamp = 1;
        double used = 2;
    }

    message MemoryMetric {
        int64 timestamp = 1;
        int64 used = 2;
        int64 total = 3;
    }

    message DiskMetric {
        int64 timestamp = 1;
        int64 used = 2;
        int64 total = 3;
    }

    message SystemMetrics {
        CPUMetric cpu = 1;
        MemoryMetric memory = 2;
        DiskMetric disk = 3;
    }

  // Name of the SPQR host. The host name is assigned by MDB at creation time, and cannot be changed.
  // 1-63 characters long.
  //
  // The name is unique across all MDB hosts that exist on the platform, as it defines the FQDN of the host.
  string name = 1;

  // The ID of the SPQR cluster that the host belongs to.
  string cluster_id = 2;

  // ID of the availability zone where the SPQR host resides.
  string zone_id = 3;

  // Resources allocated to the SPQR host.
  Resources resources = 4;

  // Role of the host in the cluster.
  Role role = 5;

  // Status code of the aggregated health of the host.
  Health health = 6;

  // Services provided by the host.
  repeated Service services = 7;

  // ID of the subnet that the host belongs to.
  string subnet_id = 8;

  // Flag showing public IP assignment status to this host.
  bool assign_public_ip = 9;

  // Host type
  Type type = 10;

  // link to wall-e (porto only)
  string walle_link = 11;

  // host state reason from cms (porto only)
  string state_reason = 12;

  // System metrics
  SystemMetrics system = 13;

  // Shard which this host belongs to.
  string shard_name = 14;
}

message Service {
  enum Type {
    TYPE_UNSPECIFIED = 0;

    // accidentally missed a value
    reserved 1; 

    // The host is running a SPQR Router.
    ROUTER = 2;

    // The host is running a SPQR Coordinator.
    COORDINATOR = 3;

    // The host is running a SPQR router and coordinator
    INFRA = 4;

    // The host is running a PostgreSQL.
    POSTGRESQL = 5;

    // The host is running a PostgreSQL.
    EXTERNAL_POSTGRESQL = 6;

    // The host is running a PostgreSQL
    MDB_POSTGRESQL = 7;
  }

  enum Health {

    // Health of the server is unknown.
    HEALTH_UNKNOWN = 0;

    // The server is working normally.
    ALIVE = 1;

    // The server is dead or unresponsive.
    DEAD = 2;
  }

  // Type of the service provided by the host.
  Type type = 1;

  // Status code of server availability.
  Health health = 2;
}

message HostSpec {
  // ID of the availability zone where the host resides.
  // To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
  string zone_id = 1 [(length) = "<=50"];

  // ID of the subnet that the host should belong to. This subnet should be a part
  // of the network that the cluster belongs to.
  // The network ID is set in the [Cluster.network_id] field.
  string subnet_id = 2 [(length) = "<=50"];

  // Whether the host should get a public IP address on creation.
  //
  // After a host has been created, this setting cannot be changed. To remove an assigned public IP, or to assign
  // a public IP to a host without one, recreate the host with [assign_public_ip] set as needed.
  //
  // Possible values:
  // * false - don't assign a public IP to the host.
  // * true - the host should have a public IP address.
  bool assign_public_ip = 3;

  // Type of the host to be deployed.
  Host.Type type = 4 [(required) = true];

  // Name of the shard that the host belongs to.
  // If empty, host doesn't belong to any shard
  string shard_name = 5 [(length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  MDBPostgreSQL mdb_postgresql = 6;
}

syntax = "proto3";

package yandex.cloud.mdb.spqr.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/type/timeofday.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/mdb/spqr/v1/backup.proto";
import "yandex/cloud/mdb/spqr/v1/cluster.proto";
import "yandex/cloud/mdb/spqr/v1/config.proto";
import "yandex/cloud/mdb/spqr/v1/database.proto";
import "yandex/cloud/mdb/spqr/v1/host.proto";
import "yandex/cloud/mdb/spqr/v1/user.proto";
import "yandex/cloud/mdb/spqr/v1/maintenance.proto";
import "yandex/cloud/mdb/spqr/v1/shard.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/spqr/v1;spqr";
option java_package = "yandex.cloud.api.mdb.spqr.v1";

// A set of methods for managing SPQR Cluster resources.
service ClusterService {
  // Returns the specified SPQR Cluster resource.
  //
  // To get the list of available SPQR Cluster resources, make a [List] request.
  rpc Get (GetClusterRequest) returns (Cluster) {
    option (google.api.http) = { get: "/managed-spqr/v1/clusters/{cluster_id}" };
  }

  rpc GetAtRevision (GetClusterAtRevisionRequest) returns (Cluster) {
    option (google.api.http) = { get: "/managed-spqr/v1/clusters/{cluster_id}:atRevision" };
  }

  // Retrieves the list of SPQR Cluster resources that belong
  // to the specified folder.
  rpc List (ListClustersRequest) returns (ListClustersResponse) {
    option (google.api.http) = { get: "/managed-spqr/v1/clusters" };
  }

  // Creates a SPQR cluster in the specified folder.
  rpc Create (CreateClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/clusters" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateClusterMetadata"
      response: "Cluster"
    };
  }

  // Updates the specified SPQR cluster.
  rpc Update (UpdateClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/managed-spqr/v1/clusters/{cluster_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterMetadata"
      response: "Cluster"
    };
  }

  // Deletes the specified SPQR cluster.
  rpc Delete (DeleteClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/managed-spqr/v1/clusters/{cluster_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterMetadata"
      response: "google.protobuf.Empty"
    };
  }

  rpc AddSubcluster(AddSubclusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/subclusters" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AddClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Start the specified SPQR cluster.
  rpc Start (StartClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/clusters/{cluster_id}:start" };
    option (yandex.cloud.api.operation) = {
      metadata: "StartClusterMetadata"
      response: "Cluster"
    };
  }

  // Stop the specified SPQR cluster.
  rpc Stop (StopClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/clusters/{cluster_id}:stop" };
    option (yandex.cloud.api.operation) = {
      metadata: "StopClusterMetadata"
      response: "Cluster"
    };
  }

  // Moves the specified SPQR cluster to the specified folder.
  rpc Move (MoveClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/clusters/{cluster_id}:move" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "MoveClusterMetadata"
      response: "Cluster"
    };
  }

  // Creates a backup for the specified SPQR cluster.
  rpc Backup (BackupClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/clusters/{cluster_id}:backup" };
    option (yandex.cloud.api.operation) = {
      metadata: "BackupClusterMetadata"
      response: "Cluster"
    };
  }

  // Creates a new SPQR cluster using the specified backup.
  rpc Restore (RestoreClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/clusters:restore" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "RestoreClusterMetadata"
      response: "Cluster"
    };
  }

  // Reschedules planned maintenance operation.
  rpc RescheduleMaintenance (RescheduleMaintenanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/clusters/{cluster_id}:rescheduleMaintenance" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "RescheduleMaintenanceMetadata"
      response: "Cluster"
    };
  }

  // Retrieves logs for the specified SPQR cluster.
  // See the [Logs](/yandex-mdb-guide/concepts/logs.html) section in the developers guide for detailed logs description.
  rpc ListLogs (ListClusterLogsRequest) returns (ListClusterLogsResponse) {
    option (google.api.http) = { get: "/managed-spqr/v1/clusters/{cluster_id}:logs" };
  }

  // Same as ListLogs but using server-side streaming. Also allows for 'tail -f' semantics.
  rpc StreamLogs (StreamClusterLogsRequest) returns (stream StreamLogRecord) {
    option (google.api.http) = { get: "/managed-spqr/v1/clusters/{cluster_id}:stream_logs" };
  }

  // Retrieves the list of Operation resources for the specified cluster.
  rpc ListOperations (ListClusterOperationsRequest) returns (ListClusterOperationsResponse) {
    option (google.api.http) = { get: "/managed-spqr/v1/clusters/{cluster_id}/operations" };
  }

  // Retrieves the list of available backups for the specified SPQR cluster.
  rpc ListBackups (ListClusterBackupsRequest) returns (ListClusterBackupsResponse) {
    option (google.api.http) = { get: "/managed-spqr/v1/clusters/{cluster_id}/backups" };
  }

    // Retrieves a list of hosts for the specified cluster.
  rpc ListHosts (ListClusterHostsRequest) returns (ListClusterHostsResponse) {
    option (google.api.http) = { get: "/managed-spqr/v1/clusters/{cluster_id}/hosts" };
  }

  // Retrieves a list of hosts for the specified cluster.
  rpc ListHostsAtRevision (ListClusterHostsAtRevisionRequest) returns (ListClusterHostsResponse) {
    option (google.api.http) = { get: "/managed-spqr/v1/clusters/{cluster_id}/hosts" };
  }

  // Creates new hosts for a cluster.
  rpc AddHosts (AddClusterHostsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/clusters/{cluster_id}/hosts:batchCreate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AddClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Updates the specified hosts.
  rpc UpdateHosts (UpdateClusterHostsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/clusters/{cluster_id}/hosts:batchUpdate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Deletes the specified hosts for a cluster.
  rpc DeleteHosts (DeleteClusterHostsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/clusters/{cluster_id}/hosts:batchDelete" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Resetups hosts.
  rpc ResetupHosts (ResetupHostsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/clusters/{cluster_id}:resetupHosts" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "ResetupHostsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Returns the specified shard.
  rpc GetShard (GetClusterShardRequest) returns (Shard) {
    option (google.api.http) = { get: "/managed-spqr/v1/clusters/{cluster_id}/shards/{shard_name}" };
  }

  // Retrieves a list of shards.
  rpc ListShards (ListClusterShardsRequest) returns (ListClusterShardsResponse) {
    option (google.api.http) = { get: "/managed-spqr/v1/clusters/{cluster_id}/shards" };
  }

  // Retrieves a list of shards.
  rpc ListShardsAtRevision (ListClusterShardsAtRevisionRequest) returns (ListClusterShardsResponse) {
    option (google.api.http) = { get: "/managed-spqr/v1/clusters/{cluster_id}/shards" };
  }

  // Creates a new shard.
  rpc AddShard (AddClusterShardRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-spqr/v1/clusters/{cluster_id}/shards" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AddClusterShardMetadata"
      response: "Shard"
    };
  }

  // Deletes the specified shard.
  rpc DeleteShard (DeleteClusterShardRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/managed-spqr/v1/clusters/{cluster_id}/shards/{shard_name}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterShardMetadata"
      response: "google.protobuf.Empty"
    };
  }
}

message GetClusterRequest {
  // ID of the SPQR Cluster resource to return.
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message GetClusterAtRevisionRequest {
  // ID of the SPQR Cluster resource to return.
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Cluster revision
  int64 revision = 2 [(value) = ">0"];
}

message ListClustersRequest {
  // ID of the folder to list SPQR clusters in.
  // To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token]
  // to the [ListClustersResponse.next_page_token] returned by the previous list request.
  string page_token = 3 [(length) = "<=100"];

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
  // 2. An `=` operator.
  // 3. The value in double quotes (`"`). Must be 1-63 characters long and match the regular expression `[a-zA-Z0-9_-]+`.
  string filter = 4 [(length) = "<=1000"];
}

message ListClustersResponse {
  // List of SPQR Cluster resources.
  repeated Cluster clusters = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
  // for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent
  // list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message CreateClusterRequest {
  // ID of the folder to create SPQR cluster in.
  string folder_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the SPQR cluster. The name must be unique within the folder.
  string name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Description of the SPQR cluster.
  string description = 3 [(length) = "<=256"];

  // Custom labels for the SPQR cluster as `` key:value `` pairs. Maximum 64 per resource.
  // For example, "project": "mvp" or "source": "dictionary".
  map<string, string> labels = 4 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_./\\@0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_./\\@0-9a-z]*"];

  // Deployment environment of the SPQR cluster.
  Cluster.Environment environment = 5 [(required) = true];

  // Configuration and resources for hosts that should be created for the SPQR cluster.
  ConfigSpec config_spec = 6 [(required) = true];

  // Descriptions of databases to be created in the SPQR cluster.
  repeated DatabaseSpec database_specs = 7;

  // Descriptions of database users to be created in the SPQR cluster.
  repeated UserSpec user_specs = 8;

  // Individual configurations for hosts that should be created for the SPQR cluster.
  repeated HostSpec host_specs = 9 [(size) = ">0"];

  // ID of the network to create the cluster in.
  string network_id = 10 [(required) = true, (length) = "<=150"];

  // User security groups
  repeated string security_group_ids = 11;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 12;

  // New maintenance window settings for the cluster.
  MaintenanceWindow maintenance_window = 13;

  // Descriptions of shards to be created in the SPQR cluster.
  repeated ShardSpec shard_specs = 14;
}

message CreateClusterMetadata {
  // ID of the SPQR cluster that is being created.
  string cluster_id = 1;
}

message UpdateClusterRequest {
  // ID of the SPQR Cluster resource to update.
  // To get the SPQR cluster ID use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Field mask that specifies which fields of the SPQR Cluster resource should be updated.
  google.protobuf.FieldMask update_mask = 2;

  // New name for the cluster.
  string name = 3 [(length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // New description of the SPQR cluster.
  string description = 4 [(length) = "<=256"];

  // Custom labels for the SPQR cluster as `` key:value `` pairs. Maximum 64 per resource.
  // For example, "project": "mvp" or "source": "dictionary".
  //
  // The new set of labels will completely replace the old ones. To add a label, request the current
  // set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
  map<string, string> labels = 5 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_./\\@0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_./\\@0-9a-z]*"];

  // New configuration and resources for hosts in the cluster.
  ConfigSpec config_spec = 6;

  // New maintenance window settings for the cluster.
  MaintenanceWindow maintenance_window = 7;

  // User security groups
  repeated string security_group_ids = 8;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 9;

  // ID of the network to move the cluster to.
  string network_id = 10 [(length) = "<=150"];
}

message UpdateClusterMetadata {
  // ID of the SPQR Cluster resource that is being updated.
  string cluster_id = 1;
}

message DeleteClusterRequest {
  // ID of the SPQR cluster to delete.
  // To get the SPQR cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteClusterMetadata {
  // ID of the SPQR cluster that is being deleted.
  string cluster_id = 1;
}

message StartClusterRequest {
  // ID of the SPQR cluster to start.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message StartClusterMetadata {
  // ID of the SPQR cluster.
  string cluster_id = 1;
}

message StopClusterRequest {
  // ID of the SPQR cluster to stop.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message StopClusterMetadata {
  // ID of the SPQR cluster.
  string cluster_id = 1;
}

message MoveClusterRequest {
  // ID of the SPQR cluster to move.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
  // ID of the destination folder.
  string destination_folder_id = 2 [(required) = true, (length) = "<=50"];
}

message MoveClusterMetadata {
  // ID of the SPQR cluster being moved.
  string cluster_id = 1;
  // ID of the source folder.
  string source_folder_id = 2;
  // ID of the destnation folder.
  string destination_folder_id = 3;
}

message BackupClusterRequest {
  // ID of the SPQR cluster to back up.
  // To get the SPQR cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message BackupClusterMetadata {
  // ID of the SPQR cluster that is being backed up.
  string cluster_id = 1;
}

message RestoreClusterRequest {
reserved 10;
  // ID of the backup to create a cluster from.
  // To get the backup ID, use a [ClusterService.ListBackups] request.
  string backup_id = 1 [(required) = true];

  // Name of the new SPQR cluster. The name must be unique within the folder.
  // The name can't be changed after the SPQR cluster is created.
  string name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Description of the new SPQR cluster.
  string description = 3 [(length) = "<=256"];

  // Custom labels for the SPQR cluster as `` key:value `` pairs. Maximum 64 per resource.
  // For example, "project": "mvp" or "source": "dictionary".
  map<string, string> labels = 4 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_./\\@0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_./\\@0-9a-z]*"];

  // Deployment environment of the new SPQR cluster.
  Cluster.Environment environment = 5 [(required) = true];

  // Configuration for the SPQR cluster to be created.
  ConfigSpec config_spec = 6 [(required) = true];

  // Configurations for SPQR hosts that should be created for
  // the cluster that is being created from the backup.
  repeated HostSpec host_specs = 7 [(size) = ">0"];

  // ID of the network to create the SPQR cluster in.
  string network_id = 8 [(required) = true, (length) = "<=150"];

  // Required. ID of the folder to create the SPQR cluster in.
  string folder_id = 9 [(length) = "<=50"];

  // User security groups
  repeated string security_group_ids = 11;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 12;

  // Timestamp of the moment to which the SPQR cluster should be restored.
  google.protobuf.Timestamp time = 13;

  // Flag that indicates whether a database should be restored to the first backup point
  // available just after the timestamp specified in the [time] field instead of just before.
  //
  // Possible values:
  // * false (default) - the restore point refers to the first backup moment before [time].
  // * true - the restore point refers to the first backup point after [time].
  bool time_inclusive = 14;
}

message RestoreClusterMetadata {
  // ID of the new SPQR cluster that is being created from a backup.
  string cluster_id = 1;

  // ID of the backup that is being used for creating a cluster.
  string backup_id = 2;
}

message RescheduleMaintenanceRequest {
  // ID of the SPQR cluster to reschedule the maintenance operation for.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  enum RescheduleType {
    RESCHEDULE_TYPE_UNSPECIFIED = 0;

    // Start the maintenance operation immediately.
    IMMEDIATE = 1;

    // Start the maintenance operation within the next available maintenance window.
    NEXT_AVAILABLE_WINDOW = 2;

    // Start the maintenance operation at the specific time.
    SPECIFIC_TIME = 3;
  }

  // The type of reschedule request.
  RescheduleType reschedule_type = 2[(required) = true];

  // The time until which this maintenance operation should be delayed. The value should be ahead of the first time when the maintenance operation has been scheduled for no more than two weeks. The value can also point to the past moment of time if [reschedule_type.IMMEDIATE] reschedule type is chosen.
  google.protobuf.Timestamp delayed_until = 3;
}

// Rescheduled maintenance operation metadata.
message RescheduleMaintenanceMetadata {
reserved 2 to 3;
  // Required. ID of the SPQR cluster.
  string cluster_id = 1;

  // Required. The time until which this maintenance operation is to be delayed.
  // Can be in the past for rescheduled to "IMMEDIATE".
  google.protobuf.Timestamp delayed_until = 4;
}

message LogRecord {
  // Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
  google.protobuf.Timestamp timestamp = 1;

  // Contents of the log record.
  map<string, string> message = 2;
}

message ListClusterLogsRequest {
  // ID of the SPQR cluster to request logs for.
  // To get the SPQR cluster ID use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Columns from the logs table to request.
  // If no columns are specified, entire log records are returned.
  repeated string column_filter = 2;

  // Type of the service to request logs about.
  ServiceType service_type = 3;

  enum ServiceType {
    SERVICE_TYPE_UNSPECIFIED = 0;

    // Logs of SPQR activity.
    POSTGRESQL = 1;
    ROUTER = 2;
    COORDINATOR = 3;
    INFRA = 4;
  }

  // Start timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
  google.protobuf.Timestamp from_time = 4;

  // End timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
  google.protobuf.Timestamp to_time = 5;

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterLogsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 6 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListClusterLogsResponse.next_page_token] returned by the previous list request.
  string page_token = 7 [(length) = "<=100"];

  // Always return `next_page_token`, even if current page is empty.
  bool always_next_page_token = 8;

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname], [LogRecord.logs.message.severity] fields.
  // 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
  // 3. The value. Must be 1-63 characters long and match the regular expression `^[a-z0-9.-]{1,61}$`.
  // Examples of a filter: `message.hostname='node1.db.cloud.yandex.net'`, `message.severity IN ('E', 'F')`
  string filter = 9 [(length) = "<=1000"];

  string order_by = 10;
}

message ListClusterLogsResponse {
  // Requested log records.
  repeated LogRecord logs = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value
  // for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  // This value is interchangeable with `next_record_token` from StreamLogs method.
  string next_page_token = 2;
}

message StreamLogRecord {
  // One of the requested log records.
  LogRecord record = 1;

  // This token allows you to continue streaming logs starting from the exact
  // same record. To continue streaming, specify value of `next_record_token`
  // as value for `record_token` parameter in the next StreamLogs request.
  // This value is interchangeable with `next_page_token` from ListLogs method.
  string next_record_token = 2;
}

message StreamClusterLogsRequest {
  // Required. ID of the SPQR cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Columns from logs table to get in the response.
  repeated string column_filter = 2;

  ServiceType service_type = 3;

  enum ServiceType {
    SERVICE_TYPE_UNSPECIFIED = 0;

    // Logs of SPQR activity.
    POSTGRESQL = 1;
    ROUTER = 2;
    COORDINATOR = 3;
    INFRA = 4;
  }

  // Start timestamp for the logs request.
  google.protobuf.Timestamp from_time = 4;

  // End timestamp for the logs request.
  // If this field is not set, all existing logs will be sent and then the new ones as
  // they appear. In essence it has 'tail -f' semantics.
  google.protobuf.Timestamp to_time = 5;

  // Record token. Set `record_token` to the `next_record_token` returned by a previous StreamLogs
  // request to start streaming from next log record.
  string record_token = 6 [(length) = "<=100"];

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname], [LogRecord.logs.message.severity] fields.
  // 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
  // 3. The value. Must be 1-63 characters long and match the regular expression `^[a-z0-9.-]{1,61}$`.
  // Examples of a filter: `message.hostname='node1.db.cloud.yandex.net'`, `message.severity IN ('E', 'F')`
  string filter = 7 [(length) = "<=1000"];
}

message ListClusterOperationsRequest {
  // ID of the SPQR Cluster resource to list operations for.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListClusterOperationsResponse.next_page_token] returned by the previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterOperationsResponse {
  // List of Operation resources for the specified SPQR cluster.
  repeated operation.Operation operations = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
  // for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message BackupListFilter {
    // Start time for the filter.
    google.protobuf.Timestamp start_time = 1;

    // End time for the filter.
    google.protobuf.Timestamp end_time = 2;

    // Retention ID [Backup.retention_policy_id] of the associated backup policy.
    string retention_policy_id = 3;
}

message ListClusterBackupsRequest {
  // ID of the SPQR cluster.
  // To get the SPQR cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterBackupsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token.  To get the next page of results, set [page_token] to the
  // [ListClusterBackupsResponse.next_page_token] returned by the previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterBackupsResponse {
  // List of SPQR Backup resources.
  repeated Backup backups = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value
  // for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message SpqrSpec {
  message Router {
    // Configuration for router hosts.
    RouterSettings config = 1;

    // Resources allocated to each host.
    Resources resources = 2;
  }

  message Coordinator {
    // Configuration for coordinator hosts.
    CoordinatorSettings config = 1;

    // Resources allocated to each host.
    Resources resources = 2;
  }

  message PostgreSQL {
    // Configuration for PostgreSQL hosts.
    PostgreSQLSettings config = 1;

    // Resources allocated to each host.
    Resources resources = 2;
  }

  message Infra {
    // accidentally missed a value
    reserved 1;

    // Resources allocated to each host
    Resources resources = 2;

    // Router related configuration
    RouterSettings router = 3;

    // Coordinator related configuration
    CoordinatorSettings coordinator = 4;
  }

  // Configuration and resource allocation for SPQR Router hosts.
  Router router = 1;

  // Configuration and resource allocation for SPQR Coordinator hosts.
  Coordinator coordinator = 2;

  // Configuration and resource allocation for PostgreSQL hosts.
  PostgreSQL postgresql = 3;

  // accidentally missed a value
  reserved 4;

  // Configuration and resource allocation for SPQR Infra (router+coordinator) hosts.
  Infra infra = 5;

  // Password of the SPQR console.
  string console_password = 6;

  LogLevel log_level = 7;

  // Configuration for SPQR Balancer.
  BalancerSettings balancer = 8;
}

message ConfigSpec {
  // Configuration and resource allocation for a SPQR Beta cluster.
  SpqrSpec spqr_spec = 1;

  // Time to start the daily backup, in the UTC timezone.
  google.type.TimeOfDay backup_window_start = 2;

  // Retain period of automatically created backup in days
  google.protobuf.Int64Value backup_retain_period_days = 3;

  // Access policy to DB
  Access access = 4;

  google.protobuf.BoolValue sox_audit = 5;
}

message ListClusterHostsRequest {
  // ID of the SPQR cluster.
  // To get the SPQR cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListClusterHostsResponse.next_page_token] returned by the previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterHostsAtRevisionRequest {
  // ID of the SPQR cluster.
  // To get the SPQR cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListClusterHostsResponse.next_page_token] returned by the previous list request.
  string page_token = 3 [(length) = "<=100"];

  // Cluster revision
  int64 revision = 4 [(value) = ">0"];
}

message ListClusterHostsResponse {
  // List of Host resources.
  repeated Host hosts = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value
  // for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message AddClusterHostsRequest {
  // ID of the SPQR cluster to add hosts to.
  // To get the SPQR cluster ID use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Configurations for SPQR hosts that should be added to the cluster.
  repeated HostSpec host_specs = 2 [(size) = "1"];
}

message AddClusterHostsMetadata {
  // ID of the SPQR cluster to which the hosts are being added.
  string cluster_id = 1;

  // Names of hosts that are being added to the cluster.
  repeated string host_names = 2;
}

message UpdateClusterHostsRequest {
  // ID of the SPQR cluster to update hosts in.
  // To get the SPQR cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // New configurations to apply to hosts.
  repeated UpdateHostSpec update_host_specs = 2 [(size) = "1"];
}

message UpdateClusterHostsMetadata {
  // ID of the SPQR cluster to update hosts in.
  string cluster_id = 1;

  // Names of hosts that are being updated.
  repeated string host_names = 2;
}

message UpdateHostSpec {
  // Name of the host to update.
  // To get the SPQR host name, use a [ClusterService.ListHosts] request.
  string host_name = 1 [(required) = true];

  // Field mask that specifies which fields of the SPQR host should be updated.
  google.protobuf.FieldMask update_mask = 2;

  // Whether the host should get a public IP address on creation.
  bool assign_public_ip = 3;
}

message DeleteClusterHostsRequest {
  // ID of the SPQR cluster to remove hosts from.
  // To get the SPQR cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Names of hosts to delete.
  repeated string host_names = 2 [(size) = "1", (length) = "<=253"];
}

message DeleteClusterHostsMetadata {
  // ID of the SPQR cluster to remove hosts from.
  string cluster_id = 1;

  // Names of hosts that are being deleted.
  repeated string host_names = 2;
}

message ResetupHostsRequest {
  // Required. ID of the SPQR cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required. Name of the hosts to resetup.
  repeated string host_names = 2 [(size) = ">0", (length) = "<=253"];
}

message ResetupHostsMetadata {
  // Required. ID of the SPQR cluster.
  string cluster_id = 1;

  // Required. The name of hosts to resetup.
  repeated string host_names = 2;
}

message GetClusterShardRequest {
  // ID of the SPQR cluster that the shard belongs to.
  // To get the cluster ID use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the SPQR shard to return.
  // To get the name of the shard use a [ClusterService.ListShards] request.
  string shard_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
}

message ListClusterShardsRequest {
  // ID of the SPQR cluster to list databases in.
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterShardsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListClusterShardsResponse.next_page_token] returned by the previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterShardsAtRevisionRequest {
  // ID of the SPQR cluster to list databases in.
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterShardsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListClusterShardsResponse.next_page_token] returned by the previous list request.
  string page_token = 3 [(length) = "<=100"];

  // Cluster revision
  int64 revision = 4 [(value) = ">0"];
}

message ListClusterShardsResponse {
  // List of SPQR shards.
  repeated Shard shards = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClusterShardsRequest.page_size], use the [next_page_token] as the value
  // for the [ListClusterShardsRequest.page_token] parameter in the next list request. Each subsequent
  // list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message AddClusterShardRequest {
  // ID of the SPQR cluster to add a shard to.
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  reserved 2,3;

  // Properties of the shard to be created.
  ShardSpec shard_spec = 4 [(required) = true];
}

message AddClusterShardMetadata {
  // ID of the SPQR cluster that a shard is being added to.
  string cluster_id = 1;

  // Name of the shard being added.
  string shard_name = 2;
}

message DeleteClusterShardRequest {
  // ID of the SPQR cluster to delete a shard in.
  // To get the cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the SPQR shard to delete.
  // To get the name of the shard use a [ClusterService.ListShards] request.
  string shard_name = 2 [(required) = true, (length) = "<=63", (pattern) = "^[a-zA-Z0-9][a-zA-Z0-9-]*$"];
}

message DeleteClusterShardMetadata {
  // ID of the SPQR cluster that a shard is being deleted in.
  string cluster_id = 1;

  // Name of the shard being deleted.
  string shard_name = 2;
}

message AddSubclusterRequest {
  // ID of the SPQR cluster that subcluster is being added to.
  string cluster_id = 1 [(required) = true];

  // Configurations for SPQR hosts that should be created
  repeated HostSpec host_specs = 2 [(size) = "1"];

  // Resources allocated to each host.
  Resources resources = 3 [(required) = true];
}

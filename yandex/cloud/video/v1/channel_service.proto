syntax = "proto3";

package yandex.cloud.video.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/access/access.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/video/v1/channel.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;video";
option java_package = "yandex.cloud.api.video.v1";

// Channel management service.
service ChannelService {
  // Get the specific channel.
  rpc Get(GetChannelRequest) returns (Channel) {
    option (google.api.http) = {
      get: "/video/v1/channels/{channel_id}"
    };
  }

  // List channels for organization.
  rpc List(ListChannelsRequest) returns (ListChannelsResponse) {
    option (google.api.http) = {
      get: "/video/v1/channels"
    };
  }

  // Create channel.
  rpc Create(CreateChannelRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/channels"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateChannelMetadata"
      response: "Channel"
    };
  }

  // Update channel.
  rpc Update(UpdateChannelRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/video/v1/channels/{channel_id}"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateChannelMetadata"
      response: "Channel"
    };
  }

  // Delete channel.
  rpc Delete(DeleteChannelRequest) returns (operation.Operation) {
    option (google.api.http) = {
      delete: "/video/v1/channels/{channel_id}"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteChannelMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Batch delete channels.
  rpc BatchDelete(BatchDeleteChannelsRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/channels:batchDelete"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "BatchDeleteChannelsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // List existing access bindings for the specified channel.
  rpc ListAccessBindings (access.ListAccessBindingsRequest) returns (access.ListAccessBindingsResponse) {
    option (google.api.http) = {get: "/video/v1/channels/{resource_id}:listAccessBindings"};
  }

  // Set access bindings for the channel.
  rpc SetAccessBindings (access.SetAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/channels/{resource_id}:setAccessBindings"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
        metadata: "access.SetAccessBindingsMetadata"
        response: "access.AccessBindingsOperationResult"
    };
  }

  // Update access bindings for the specified channel.
  rpc UpdateAccessBindings (access.UpdateAccessBindingsRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/video/v1/channels/{resource_id}:updateAccessBindings"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "access.UpdateAccessBindingsMetadata"
      response: "access.AccessBindingsOperationResult"
    };
  }
}

message GetChannelRequest {
  // ID of the channel.
  string channel_id = 1 [(required) = true, (length) = "<=50"];
}

message ListChannelsRequest {
  // Reserved for future use.
  reserved 2 to 99;

  // ID of the organization.
  string organization_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of the results per page to return.
  // Default value: 100.
  int64 page_size = 100 [(value) = "<=100"];
  // Page token for getting the next page of the result.
  string page_token = 101 [(length) = "<=15000"];

  // By which column the listing should be ordered and in which direction,
  // format is "<field> <order>" (e.g. "createdAt desc").
  // Default: "id asc".
  // Possible fields: ["id", "title", "createdAt", "updatedAt"].
  // Both snake_case and camelCase are supported for fields.
  string order_by = 102;

  // Filter expression that filters resources listed in the response.
  // Expressions are composed of terms connected by logic operators.
  // If value contains spaces or quotes,
  // it should be in quotes (`'` or `"`) with the inner quotes being backslash escaped.
  // Supported logical operators: ["AND", "OR"].
  // Supported string match operators: ["=", "!=", ":"].
  // Operator ":" stands for substring matching.
  // Filter expressions may also contain parentheses to group logical operands.
  // Example: `key1='value' AND (key2!='\'value\'' OR key2:"\"value\"")`
  // Supported fields: ["id", "title"].
  // Both snake_case and camelCase are supported for fields.
  string filter = 103 [(length) = "<=1000"];
}

message ListChannelsResponse {
  // Reserved for future use.
  reserved 2 to 99;

  // List of channels for specific organization.
  repeated Channel channels = 1;

  // Token for getting the next page.
  string next_page_token = 100;
}

message CreateChannelRequest {
  // Reserved for future use.
  reserved 4 to 199;

  // ID of the organization.
  string organization_id = 1 [(required) = true, (length) = "<=50"];

  // Channel title.
  string title = 2 [(required) = true, (length) = "<=2500"];
  // Channel description.
  string description = 3;

  // Custom labels as `` key:value `` pairs. Maximum 64 per resource.
  map<string, string> labels = 200 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_.@:/0-9a-zA-Z]*", (map_key).length = "<=63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
  // Channel settings.
  ChannelSettings settings = 201;
}

message CreateChannelMetadata {
  // ID of the channel.
  string channel_id = 1;
}

message UpdateChannelRequest {
  // Reserved for future use.
  reserved 5 to 199;

  // ID of the channel.
  string channel_id = 1 [(required) = true, (length) = "<=50"];
  // Field mask that specifies which fields of the channel are going to be updated.
  google.protobuf.FieldMask field_mask = 2 [(required) = true];

  // Channel title.
  string title = 3 [(length) = "<=2500"];
  // Channel description.
  string description = 4;

  // Custom labels as `` key:value `` pairs. Maximum 64 per resource.
  map<string, string> labels = 200 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_.@:/0-9a-zA-Z]*", (map_key).length = "<=63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
  // Channel settings.
  ChannelSettings settings = 201;
}

message UpdateChannelMetadata {
  // ID of the channel.
  string channel_id = 1;
}

message DeleteChannelRequest {
  // ID of the channel.
  string channel_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteChannelMetadata {
  // ID of the channel.
  string channel_id = 1;
}

message BatchDeleteChannelsRequest {
  // ID of the organization.
  string organization_id = 1 [(required) = true, (length) = "<=50"];
  // List of channel IDs.
  repeated string channel_ids = 2 [(size) = "1-100", (length) = "<=50"];
}

message BatchDeleteChannelsMetadata {
  // List of channel IDs.
  repeated string channel_ids = 1;
}

syntax = "proto3";

package yandex.cloud.video.v1;

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/wrappers.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/video/v1/manifest.proto";
import "yandex/cloud/video/v1/video.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;video";
option java_package = "yandex.cloud.api.video.v1";

// Video management service.
service VideoService {
  // Get the specific video.
  rpc Get(GetVideoRequest) returns (Video) {
    option (google.api.http) = {
      get: "/video/v1/videos/{video_id}"
    };
  }

  // List videos for channel.
  rpc List(ListVideoRequest) returns (ListVideoResponse) {
    option (google.api.http) = {
      get: "/video/v1/videos"
    };
  }

  // Batch get videos in specific channel.
  rpc BatchGet(BatchGetVideosRequest) returns (BatchGetVideosResponse) {
    option (google.api.http) = {
      post: "/video/v1/videos:batchGet"
      body: "*"
    };
  }

  // Create video.
  rpc Create(CreateVideoRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/videos"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateVideoMetadata"
      response: "Video"
    };
  }

  // Update video.
  rpc Update(UpdateVideoRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/video/v1/videos/{video_id}"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateVideoMetadata"
      response: "Video"
    };
  }

  // Transcode video.
  rpc Transcode(TranscodeVideoRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/videos/{video_id}:transcode"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "TranscodeVideoMetadata"
      response: "Video"
    };
  }

  // Delete video.
  rpc Delete(DeleteVideoRequest) returns (operation.Operation) {
    option (google.api.http) = {
      delete: "/video/v1/videos/{video_id}"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteVideoMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Batch delete videos.
  rpc BatchDelete(BatchDeleteVideosRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/videos:batchDelete"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "BatchDeleteVideosMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Perform an action on the video.
  rpc PerformAction(PerformVideoActionRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/videos/{video_id}:performAction"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "PerformVideoActionMetadata"
      response: "Video"
    };
  }

  // Get player url.
  rpc GetPlayerURL(GetVideoPlayerURLRequest) returns (GetVideoPlayerURLResponse) {
    option (google.api.http) = {
      get: "/video/v1/videos/{video_id}:getPlayerURL"
    };
  }

  // Batch get player urls.
  rpc BatchGetPlayerURLs(BatchGetVideoPlayerURLsRequest) returns (BatchGetVideoPlayerURLsResponse) {
    option (google.api.http) = {
      post: "/video/v1/videos:batchGetPlayerURLs"
      body: "*"
    };
  }

  // Get manifest urls.
  rpc GetManifests(GetVideoManifestsRequest) returns (GetVideoManifestsResponse) {
    option (google.api.http) = {
      get: "/video/v1/videos/{video_id}:getManifests"
    };
  }
}

message GetVideoRequest {
  // ID of the video.
  string video_id = 1 [(required) = true, (length) = "<=50"];
}

message ListVideoRequest {
  // Reserved for future use.
  reserved 2 to 99;

  // ID of the channel.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of the results per page to return.
  // Default value: 100.
  int64 page_size = 100 [(value) = "<=100"];
  // Page token for getting the next page of the result.
  string page_token = 101 [(length) = "<=15000"];

  // By which column the listing should be ordered and in which direction,
  // format is "<field> <order>" (e.g. "createdAt desc").
  // Default: "id asc".
  // Possible fields: ["id", "title", "createdAt", "updatedAt"].
  // Both snake_case and camelCase are supported for fields.
  string order_by = 102;

  // Filter expression that filters resources listed in the response.
  // Expressions are composed of terms connected by logic operators.
  // If value contains spaces or quotes,
  // it should be in quotes (`'` or `"`) with the inner quotes being backslash escaped.
  // Supported logical operators: ["AND", "OR"].
  // Supported string match operators: ["=", "!=", ":"].
  // Operator ":" stands for substring matching.
  // Filter expressions may also contain parentheses to group logical operands.
  // Example: `key1='value' AND (key2!='\'value\'' OR key2:"\"value\"")`
  // Supported fields: ["id", "title", "status", "visibilityStatus"].
  // Both snake_case and camelCase are supported for fields.
  string filter = 103 [(length) = "<=1000"];
}

message ListVideoResponse {
  // Reserved for future use.
  reserved 2 to 99;

  repeated Video videos = 1;

  // Token for getting the next page.
  string next_page_token = 100;
}

message BatchGetVideosRequest {
  // ID of the channel.
  string channel_id = 1 [(required) = true, (length) = "<=50"];
  // List of requested video IDs.
  repeated string video_ids = 2 [(size) = "1-100", (length) = "<=50"];
}

message BatchGetVideosResponse {
  // List of videos for channel.
  repeated Video videos = 1;
}

message CreateVideoRequest {
  reserved 2001, 2002;

  // Reserved for future use.
  reserved 6, 9 to 199, 201 to 999, 1001 to 1999;

  // ID of the channel.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // Video title.
  string title = 2 [(required) = true, (length) = "<=2500"];
  // Video description.
  string description = 3;
  // ID of the thumbnail.
  string thumbnail_id = 4 [(length) = "<=50"];
  // Auto start transcoding.
  AutoTranscode auto_transcode = 5;

  // Automatically publish video after transcoding.
  // Switches visibility status to PUBLISHED.
  google.protobuf.BoolValue auto_publish = 7;
  // Enable advertisement for this video.
  // Default: true.
  // Set explicitly to false to disable advertisements for a specific video.
  google.protobuf.BoolValue enable_ad = 8;

  // Custom labels as `` key:value `` pairs. Maximum 64 per resource.
  map<string, string> labels = 200 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_.@:/0-9a-zA-Z]*", (map_key).length = "<=63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Source type.
  oneof source {
    option (exactly_one) = true;
    // Upload video using the tus protocol.
    VideoTUSDParams tusd = 1000;
  }

  // Video access permission settings.
  oneof access_rights {
    // Publicly accessible video available for viewing by anyone with the direct link.
    // No additional authorization or access control is applied.
    VideoPublicAccessParams public_access = 2000;
    // Checking access rights using url's signature.
    VideoSignURLAccessParams sign_url_access = 2003;
  }
}

message VideoTUSDParams {
  // File size.
  int64 file_size = 1 [(value) = ">0"];
  // File name.
  string file_name = 2;
}

message VideoPublicAccessParams {}

message VideoSignURLAccessParams {}

message CreateVideoMetadata {
  // ID of the video.
  string video_id = 1;
}

message UpdateVideoRequest {
  reserved 2001, 2002;

  // Reserved for future use.
  reserved 7, 9 to 199, 201 to 1999;

  // ID of the video.
  string video_id = 1 [(required) = true, (length) = "<=50"];
  // Field mask that specifies which fields of the video are going to be updated.
  google.protobuf.FieldMask field_mask = 2 [(required) = true];

  // Video title.
  string title = 3 [(length) = "<=2500"];
  // Video description.
  string description = 4;
  // ID of the thumbnail.
  string thumbnail_id = 5 [(length) = "<=50"];
  // Auto start transcoding.
  AutoTranscode auto_transcode = 6;

  // Enable advertisement for this video.
  // Default: true.
  // Use this to disable advertisement for a specific video.
  google.protobuf.BoolValue enable_ad = 8;
 
  // Custom labels as `` key:value `` pairs. Maximum 64 per resource.
  map<string, string> labels = 200 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_.@:/0-9a-zA-Z]*", (map_key).length = "<=63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Video access permission settings.
  oneof access_rights {
    // Publicly accessible video available for viewing by anyone with the direct link.
    // No additional authorization or access control is applied.
    VideoPublicAccessParams public_access = 2000;
    // Checking access rights using url's signature.
    VideoSignURLAccessParams sign_url_access = 2003;
  }
}

message UpdateVideoMetadata {
  // ID of the video.
  string video_id = 1;
}

message TranscodeVideoRequest {
  // ID of the video.
  string video_id = 1;

  // Field mask that specifies which transcoding specific fields of the video
  // are going to be updated.
  google.protobuf.FieldMask field_mask = 2 [(required) = true];

  // IDs of active manually uploaded video subtitles.
  repeated string subtitle_ids = 3;
  // Video translation settings.
  VideoTranslationSettings translation_settings = 4;
  // Video summarization settings.
  VideoSummarizationSettings summarization_settings = 5;
}

message VideoTranslationSettings {
  // Translation settings for each track.
  repeated TranslationTrack tracks = 1;

  message TranslationTrack {
    // Input track settings.
    InputTrack input_track = 1 [(required) = true];
    // Settings for target subtitle tracks.
    repeated SubtitleTrack subtitles = 2;
    // Settings for target audio tracks.
    repeated AudioTrack audio = 3;
  }

  message InputTrack {
    // Input audio track index (one-based).
    int64 track_index = 1 [(value) = ">=1"];
    // Source track language in any of the following formats:
    // * three-letter code according to ISO 639-2/T, ISO 639-2/B, or ISO 639-3 
    // * two-letter code according to ISO 639-1                          
    // Track language will be deduced automatically if not provided.
    // In the latter case the deduction accuracy is not guaranteed.
    // For better performance please do specify the source track language when possible.
    string src_lang = 2 [(length) = "<=3"];
  }

  message SubtitleTrack {
    // Target language in any of the following formats:
    // * three-letter code according to ISO 639-2/T, ISO 639-2/B, or ISO 639-3 
    // * two-letter code according to ISO 639-1                          
    string dst_lang = 1 [(required) = true, (length) = "2-3"];
    // Track label to be displayed on the screen during video playback.
    string label = 2 [(required) = true, (length) = "<=50"];
  }

  message AudioTrack {
    // Target language in any of the following formats:
    // * three-letter code according to ISO 639-2/T, ISO 639-2/B, or ISO 639-3 
    // * two-letter code according to ISO 639-1                          
    string dst_lang = 1 [(required) = true, (length) = "2-3"];
    // Track label to be displayed on the screen during video playback.
    string label = 2 [(required) = true, (length) = "<=50"];
  }
}

message VideoSummarizationSettings {
  reserved 1;

  // Summarization settings for each track.
  repeated SummarizationTrack tracks = 2;
  // Summarize all available tracks.
  // If enabled, `tracks` parameter is ignored.
  // Enables automatic source language deduction for each track
  // and thus may lead to performance degradation.
  bool process_all_tracks = 3;

  message SummarizationTrack {
    // Input track settings.
    InputTrack input_track = 1 [(required) = true];
  }

  message InputTrack {
    // Input audio track index (one-based).
    int64 track_index = 1 [(value) = ">=1"];
    // Source track language (three-letter code according to ISO 639-2/T, ISO 639-2/B, or ISO 639-3).
    // It will be deduced automatically if not provided.
    // In the latter case the deduction accuracy is not guaranteed.
    // For better performance please do specify the source track language when possible.
    string src_lang = 2 [(length) = "<=3"];
  }
}

message TranscodeVideoMetadata {
  // ID of the video.
  string video_id = 1;
}

message DeleteVideoRequest {
  // ID of the video.
  string video_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteVideoMetadata {
  // ID of the video.
  string video_id = 1;
}

message BatchDeleteVideosRequest {
  // ID of the channel.
  string channel_id = 1 [(required) = true, (length) = "<=50"];
  // List of video IDs.
  repeated string video_ids = 2 [(size) = "1-100", (length) = "<=50"];
}

message BatchDeleteVideosMetadata {
  // List of video IDs.
  repeated string video_ids = 1;
}

message PerformVideoActionRequest {
  // Reserved for future use.
  reserved 2 to 999;

  // ID of the video.
  string video_id = 1 [(required) = true, (length) = "<=50"];
  oneof action {
    option (exactly_one) = true;
    PublishVideoAction publish = 1000;
    UnpublishVideoAction unpublish = 1001;
  }
}

message PublishVideoAction {}

message UnpublishVideoAction {}

message PerformVideoActionMetadata {
  // ID of the video.
  string video_id = 1;
}

message GetVideoPlayerURLRequest {
  // ID of the video.
  string video_id = 1 [(required) = true, (length) = "<=50"];
  VideoPlayerParams params = 2;

  // Optional field, used to set custom url expiration duration for videos with sign_url_access
  google.protobuf.Duration signed_url_expiration_duration = 3;
}

message VideoPlayerParams {
  // If true, a player will be muted by default.
  bool mute = 1;
  // If true, playback will start automatically.
  bool autoplay = 2;
  // If true, a player interface will be hidden by default.
  bool hidden = 3;
}

message GetVideoPlayerURLResponse {
  // Direct link to the video.
  string player_url = 1;
  // HTML embed code in Iframe format.
  string html = 2;
}

message BatchGetVideoPlayerURLsRequest {
  // ID of the channel.
  string channel_id = 1 [(required) = true, (length) = "<=50"];
  // List of requested video IDs.
  repeated string video_ids = 2 [(size) = "1-100", (length) = "<=50"];

  VideoPlayerParams params = 3;

  // Optional field, used to set custom url expiration duration for videos with sign_url_access
  google.protobuf.Duration signed_url_expiration_duration = 4;
}

message BatchGetVideoPlayerURLsResponse {
  repeated string player_urls = 1;
}

message GetVideoManifestsRequest {
    // ID of the video.
    string video_id = 1 [(required) = true, (length) = "<=50"];
}

message GetVideoManifestsResponse {
    repeated Manifest manifests = 1;
}

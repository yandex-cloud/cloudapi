syntax = "proto3";

package yandex.cloud.video.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/video/v1/playlist.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;video";
option java_package = "yandex.cloud.api.video.v1";

// Playlist management service.
service PlaylistService {
  // Returns the specific playlist.
  rpc Get(GetPlaylistRequest) returns (Playlist) {
    option (google.api.http) = {
      get: "/video/v1/playlists/{playlist_id}"
    };
  }

  // List playlists for a channel.
  rpc List(ListPlaylistsRequest) returns (ListPlaylistsResponse) {
    option (google.api.http) = {
      get: "/video/v1/playlists"
    };
  }

  // Create playlist.
  rpc Create(CreatePlaylistRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/playlists"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreatePlaylistMetadata"
      response: "Playlist"
    };
  }

  // Update playlist.
  rpc Update(UpdatePlaylistRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/video/v1/playlists/{playlist_id}"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdatePlaylistMetadata"
      response: "Playlist"
    };
  }

  // Delete playlist.
  rpc Delete(DeletePlaylistRequest) returns (operation.Operation) {
    option (google.api.http) = {
      delete: "/video/v1/playlists/{playlist_id}"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "DeletePlaylistMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Batch delete playlist.
  rpc BatchDelete(BatchDeletePlaylistsRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/playlists:batchDelete"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "BatchDeletePlaylistsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Returns player's url.
  rpc GetPlayerURL(GetPlaylistPlayerURLRequest) returns (GetPlaylistPlayerURLResponse) {
    option (google.api.http) = {
      get: "/video/v1/playlists/{playlist_id}:getPlayerURL"
    };
  }
}

message GetPlaylistRequest {
  // ID of the playlist.
  string playlist_id = 1 [(required) = true, (length) = "<=50"];
}

message ListPlaylistsRequest {
  // Reserved for future use.
  reserved 2 to 99;

  // ID of the channel.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of the results per page to return.
  int64 page_size = 100 [(value) = "<=100"];
  // Page token for getting the next page of the result.
  string page_token = 101 [(length) = "<=200"];

  // By which column the listing should be ordered and in which direction,
  // format is "createdAt desc". "id asc" if omitted.
  // Possible fields: ["id", "title", "createdAt", "updatedAt"]
  // Both snake_case and camelCase are supported for fields.
  string order_by = 102;

  // Filter expression that filters resources listed in the response.
  // Expressions are composed of terms connected by logic operators.
  // Example: "key1=value AND key2=value"
  // Supported operators: ["AND"].
  // Supported fields: ["title"]
  // Both snake_case and camelCase are supported for fields.
  string filter = 103 [(length) = "<=1000"];
}

message ListPlaylistsResponse {
  // Reserved for future use.
  reserved 2 to 99;

  // List of playlists for specific channel.
  repeated Playlist playlists = 1;

  // Token for getting the next page.
  string next_page_token = 100;
}

message CreatePlaylistRequest {
  // ID of the channel.
  string channel_id = 1 [(required) = true, (length) = "<=50"];
  // Playlist title.
  string title = 2 [(required) = true];
  // Playlist description.
  string description = 3;
  // List of playlist items.
  repeated PlaylistItem items = 4 [(size) = "<=100"];
}

message CreatePlaylistMetadata {
  // ID of the playlist.
  string playlist_id = 1;
}

message UpdatePlaylistRequest {
  // ID of the playlist.
  string playlist_id = 1 [(required) = true, (length) = "<=50"];
  // Field mask that specifies which fields of the playlist are going to be updated.
  google.protobuf.FieldMask field_mask = 2;

  // Playlist title.
  string title = 3;
  // Playlist description.
  string description = 4;
  // List of playlist items.
  repeated PlaylistItem items = 5 [(size) = "<=100"];
}

message UpdatePlaylistMetadata {
  // ID of the playlist.
  string playlist_id = 1;
}

message DeletePlaylistRequest {
  // ID of the playlist.
  string playlist_id = 1 [(required) = true, (length) = "<=50"];
}

message DeletePlaylistMetadata {
  // ID of the playlist.
  string playlist_id = 1;
}

message BatchDeletePlaylistsRequest {
  // ID of the channel.
  string channel_id = 1 [(required) = true, (length) = "<=50"];
  // List of playlist IDs.
  repeated string playlist_ids = 2 [(size) = "1-100", (length) = "<=50"];
}

message BatchDeletePlaylistsMetadata {
  // List of playlist IDs.
  repeated string playlist_ids = 1;
}

message GetPlaylistPlayerURLRequest {
  // ID of the playlist.
  string playlist_id = 1 [(required) = true, (length) = "<=50"];
  PlaylistPlayerParams params = 2;
}

message PlaylistPlayerParams {
  // If true, a player will be muted by default.
  bool mute = 1;
  // If true, playback will start automatically.
  bool autoplay = 2;
  // If true, a player interface will be hidden by default.
  bool hidden = 3;
}

message GetPlaylistPlayerURLResponse {
  // Direct link to the playlist.
  string player_url = 1;
  // HTML embed code in Iframe format.
  string html = 2;
}

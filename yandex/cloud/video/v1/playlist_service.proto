syntax = "proto3";

package yandex.cloud.video.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/video/v1/playlist.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;video";
option java_package = "yandex.cloud.api.video.v1";

// Playlist management service.
// Provides methods for creating, retrieving, updating, and deleting playlists,
// which are collections of videos or episodes that can be played sequentially.
service PlaylistService {
  // Retrieves detailed information about a specific playlist by its ID.
  // Returns all playlist metadata, items, and related information.
  rpc Get(GetPlaylistRequest) returns (Playlist) {
    option (google.api.http) = {
      get: "/video/v1/playlists/{playlist_id}"
    };
  }

  // Lists all playlists in a specific channel with pagination support.
  // Results can be filtered and sorted using the provided parameters.
  rpc List(ListPlaylistsRequest) returns (ListPlaylistsResponse) {
    option (google.api.http) = {
      get: "/video/v1/playlists"
    };
  }

  // Creates a new playlist in the specified channel with the provided items.
  // Playlists can contain videos, episodes, or a mix of both content types.
  rpc Create(CreatePlaylistRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/playlists"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreatePlaylistMetadata"
      response: "Playlist"
    };
  }

  // Updates an existing playlist's metadata and items.
  // Only fields specified in the field_mask will be updated.
  rpc Update(UpdatePlaylistRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/video/v1/playlists/{playlist_id}"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdatePlaylistMetadata"
      response: "Playlist"
    };
  }

  // Deletes a specific playlist by its ID.
  // This removes the playlist but does not affect the videos or episodes it contains.
  rpc Delete(DeletePlaylistRequest) returns (operation.Operation) {
    option (google.api.http) = {
      delete: "/video/v1/playlists/{playlist_id}"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "DeletePlaylistMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Deletes multiple playlists in a specific channel in a single request.
  // This is more efficient than making multiple Delete requests when removing several playlists.
  rpc BatchDelete(BatchDeletePlaylistsRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/playlists:batchDelete"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "BatchDeletePlaylistsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Generates a player URL for watching the playlist.
  // The URL can include player parameters such as autoplay, mute, and visibility of interface controls.
  rpc GetPlayerURL(GetPlaylistPlayerURLRequest) returns (GetPlaylistPlayerURLResponse) {
    option (google.api.http) = {
      get: "/video/v1/playlists/{playlist_id}:getPlayerURL"
    };
  }
}

message GetPlaylistRequest {
  // ID of the playlist to retrieve.
  string playlist_id = 1 [(required) = true, (length) = "<=50"];
}

message ListPlaylistsRequest {
  // Reserved for future use.
  reserved 2 to 99;

  // ID of the channel containing the playlists to list.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of playlists to return per page.
  int64 page_size = 100 [(value) = "<=100"];

  // Page token for retrieving the next page of results.
  // This token is obtained from the next_page_token field in the previous ListPlaylistsResponse.
  string page_token = 101 [(length) = "<=15000"];

  // Specifies the ordering of results.
  // Format is "<field> <order>" (e.g., "createdAt desc").
  // Default: "id asc".
  // Supported fields: ["id", "title", "createdAt", "updatedAt"].
  // Both snake_case and camelCase field names are supported.
  string order_by = 102 [(length) = "<=50"];

  // Filter expression to narrow down the list of returned playlists.
  // Expressions consist of terms connected by logical operators.
  // Values containing spaces or quotes must be enclosed in quotes (`'` or `"`)
  // with inner quotes being backslash-escaped.
  //
  // Supported logical operators: ["AND", "OR"].
  // Supported comparison operators: ["=", "!=", ":"] where ":" enables substring matching.
  // Parentheses can be used to group logical expressions.
  //
  // Example: `title:'highlights' AND id='playlist-1'`
  //
  // Filterable fields: ["id", "title"].
  // Both snake_case and camelCase field names are supported.
  string filter = 103 [(length) = "<=1000"];
}

message ListPlaylistsResponse {
  // Reserved for future use.
  reserved 2 to 99;

  // List of playlists matching the request criteria.
  // May be empty if no playlists match the criteria or if the channel has no playlists.
  repeated Playlist playlists = 1;

  // Token for retrieving the next page of results.
  // Empty if there are no more results available.
  string next_page_token = 100;
}

message CreatePlaylistRequest {
  // ID of the channel where the playlist will be created.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // Title of the playlist to be displayed in interfaces and players.
  string title = 2 [(required) = true, (length) = "<=300"];

  // Detailed description of the playlist content and context.
  // Optional field that can provide additional information about the playlist.
  string description = 3 [(length) = "<=4000"];

  // List of items to include in the playlist.
  // Each item represents a video or episode to be played in sequence.
  // The order of items in this list determines the playback order.
  repeated PlaylistItem items = 4 [(size) = "<=100"];

  // ID of the style preset to be applied to the playlist player.
  // Style presets control the visual appearance of the player.
  string style_preset_id = 5 [(length) = "<=50"];
}

message CreatePlaylistMetadata {
  // ID of the playlist being created.
  string playlist_id = 1;
}

message UpdatePlaylistRequest {
  // ID of the playlist to update.
  string playlist_id = 1 [(required) = true, (length) = "<=50"];

  // Field mask specifying which fields of the playlist should be updated.
  // Only fields specified in this mask will be modified;
  // all other fields will retain their current values.
  // This allows for partial updates.
  google.protobuf.FieldMask field_mask = 2 [(required) = true];

  // New title for the playlist.
  string title = 3 [(length) = "<=300"];

  // New description for the playlist.
  // Optional field that can provide additional information about the playlist.
  string description = 4 [(length) = "<=4000"];

  // New list of items to include in the playlist.
  // This completely replaces the existing items if specified in the field mask.
  // The order of items in this list determines the playback order.
  repeated PlaylistItem items = 5 [(size) = "<=100"];

  // New ID of the style preset to be applied to the playlist player.
  string style_preset_id = 6 [(length) = "<=50"];
}

message UpdatePlaylistMetadata {
  // ID of the playlist being updated.
  string playlist_id = 1;
}

message DeletePlaylistRequest {
  // ID of the playlist to delete.
  string playlist_id = 1 [(required) = true, (length) = "<=50"];
}

message DeletePlaylistMetadata {
  // ID of the playlist being deleted.
  // This identifier can be used to track the playlist deletion operation.
  string playlist_id = 1;
}

message BatchDeletePlaylistsRequest {
  // ID of the channel containing the playlists to delete.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // List of playlist IDs to delete.
  // All playlists must exist in the specified channel.
  repeated string playlist_ids = 2 [(size) = "1-100", (length) = "<=50"];
}

message BatchDeletePlaylistsMetadata {
  // List of playlist IDs being deleted.
  // This list can be used to track which playlists are included
  // in the batch deletion operation.
  repeated string playlist_ids = 1;
}

message GetPlaylistPlayerURLRequest {
  // ID of the playlist for which to generate a player URL.
  string playlist_id = 1 [(required) = true, (length) = "<=50"];

  // Optional player parameters to customize the playback experience.
  // These parameters control initial player state such as mute, autoplay, and visibility of interface controls.
  PlaylistPlayerParams params = 2;
}

message PlaylistPlayerParams {
  // If true, the player will start with audio muted.
  // Users can unmute the audio manually after playback starts.
  bool mute = 1;

  // If true, the playlist will start playing automatically when the player loads.
  // This may be subject to browser autoplay policies that restrict autoplay with sound.
  bool autoplay = 2;

  // If true, the player interface controls will be hidden initially.
  // Users can typically reveal the controls by moving the mouse over the player.
  bool hidden = 3;
}

message GetPlaylistPlayerURLResponse {
  // Direct URL to the playlist player.
  // This URL can be used to access the playlist in a web browser
  // or shared with users who have appropriate permissions.
  string player_url = 1;

  // HTML embed code in iframe format that can be inserted into web pages.
  // This code allows the playlist to be embedded directly in third-party websites.
  string html = 2;
}

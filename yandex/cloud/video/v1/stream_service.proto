syntax = "proto3";

package yandex.cloud.video.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/video/v1/stream.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;video";
option java_package = "yandex.cloud.api.video.v1";

// Stream management service.
// Provides methods for creating, retrieving, updating, and deleting live streams,
// as well as managing stream-related operations
// such as publishing, stopping, and generating playback URLs.
service StreamService {
  // Retrieves detailed information about a specific stream by its ID.
  // Returns all stream metadata, status, and related information.
  rpc Get(GetStreamRequest) returns (Stream) {
    option (google.api.http) = {
      get: "/video/v1/streams/{stream_id}"
    };
  }

  // Lists all streams in a specific channel with pagination support.
  // Results can be filtered and sorted using the provided parameters.
  rpc List(ListStreamsRequest) returns (ListStreamsResponse) {
    option (google.api.http) = {
      get: "/video/v1/streams"
    };
  }

  // Retrieves multiple streams by their IDs in a specific channel in a single request.
  // This is more efficient than making multiple Get requests when retrieving several streams.
  rpc BatchGet(BatchGetStreamsRequest) returns (BatchGetStreamsResponse) {
    option (google.api.http) = {
      post: "/video/v1/streams:batchGet"
      body: "*"
    };
  }

  // Creates a new stream in the specified channel.
  // Streams can be created as on-demand (starting when a signal appears)
  // or scheduled (starting and finishing at specified time).
  rpc Create(CreateStreamRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/streams"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateStreamMetadata"
      response: "Stream"
    };
  }

  // Updates an existing stream's metadata and settings.
  // Only fields specified in the field_mask will be updated.
  rpc Update(UpdateStreamRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/video/v1/streams/{stream_id}"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateStreamMetadata"
      response: "Stream"
    };
  }

  // Deletes a specific stream by its ID.
  rpc Delete(DeleteStreamRequest) returns (operation.Operation) {
    option (google.api.http) = {
      delete: "/video/v1/streams/{stream_id}"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteStreamMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Deletes multiple streams in a specific channel in a single request.
  // This is more efficient than making multiple Delete requests when removing several streams.
  rpc BatchDelete(BatchDeleteStreamsRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/streams:batchDelete"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "BatchDeleteStreamsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Performs a specific action on a stream, such as publishing or stopping.
  // Actions change the stream's state without modifying its content or metadata.
  rpc PerformAction(PerformStreamActionRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/streams/{stream_id}:performAction"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "PerformStreamActionMetadata"
      response: "Stream"
    };
  }
}

message GetStreamRequest {
  // ID of the stream to retrieve.
  string stream_id = 1 [(required) = true, (length) = "<=50"];
}

message ListStreamsRequest {
  // Reserved for future use.
  reserved 2 to 99;

  // ID of the channel containing the streams to list.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of streams to return per page.
  int64 page_size = 100 [(value) = "<=100"];

  // Page token for retrieving the next page of results.
  // This token is obtained from the next_page_token field in the previous ListStreamsResponse.
  string page_token = 101 [(length) = "<=15000"];

  // Specifies the ordering of results.
  // Format is "<field> <order>" (e.g., "startTime desc").
  // Default: "id asc".
  // Supported fields: ["id", "title", "startTime", "finishTime", "createdAt", "updatedAt"].
  // Both snake_case and camelCase field names are supported.
  string order_by = 102 [(length) = "<=50"];

  // Filter expression to narrow down the list of returned streams.
  // Expressions consist of terms connected by logical operators.
  // Values containing spaces or quotes must be enclosed in quotes (`'` or `"`)
  // with inner quotes being backslash-escaped.
  //
  // Supported logical operators: ["AND", "OR"].
  // Supported comparison operators: ["=", "!=", ":"] where ":" enables substring matching.
  // Parentheses can be used to group logical expressions.
  //
  // Example: `title:'live' AND (status='READY' OR status='ONAIR')`
  //
  // Filterable fields: ["id", "title", "lineId", "status"].
  // Both snake_case and camelCase field names are supported.
  string filter = 103 [(length) = "<=1000"];
}

message ListStreamsResponse {
  // Reserved for future use.
  reserved 2 to 99;

  // List of streams matching the request criteria.
  // May be empty if no streams match the criteria or if the channel has no streams.
  repeated Stream streams = 1;

  // Token for retrieving the next page of results.
  // Empty if there are no more results available.
  string next_page_token = 100;
}

message BatchGetStreamsRequest {
  // ID of the channel containing the streams to retrieve.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // List of stream IDs to retrieve.
  repeated string stream_ids = 2 [(size) = "1-100", (length) = "<=50"];
}

message BatchGetStreamsResponse {
  // List of streams matching the requested IDs.
  repeated Stream streams = 1;
}

message CreateStreamRequest {
  // Reserved for future use.
  reserved 7 to 199, 201 to 999;

  // ID of the channel where the stream will be created.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // ID of the stream line to which this stream will be linked.
  // Stream lines define the technical configuration for streaming.
  string line_id = 2 [(required) = true, (length) = "<=50"];

  // Title of the stream to be displayed in interfaces and players.
  string title = 3 [(required) = true, (length) = "<=300"];

  // Detailed description of the stream content and context.
  // Optional field that can provide additional information about the stream.
  string description = 4 [(length) = "<=4000"];

  // ID of the thumbnail image to be used for the stream.
  string thumbnail_id = 5 [(length) = "<=50"];

  // Controls whether the stream is automatically published when ready.
  // When set to true, the stream's status will automatically change from
  // READY to ONAIR when the streaming infrastructure is prepared,
  // making it available for viewing without manual intervention.
  google.protobuf.BoolValue auto_publish = 6;

  // Custom user-defined labels as `key:value` pairs.
  // Maximum 64 labels per stream.
  // Keys must be lowercase alphanumeric strings with optional hyphens/underscores.
  // Values can contain alphanumeric characters and various symbols.
  map<string, string> labels = 200 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_.@:/0-9a-zA-Z]*", (map_key).length = "<=63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Specifies the stream scheduling type (exactly one must be chosen).
  oneof stream_type {
    option (exactly_one) = true;

    // On-demand stream that starts immediately when a video signal appears.
    // This type of stream has no predetermined start or end time.
    OnDemandParams on_demand = 1000;

    // Scheduled stream that starts and finishes at specified time.
    // This type of stream has predetermined start and end time.
    ScheduleParams schedule = 1001;
  }
}

// On-demand streams start automatically when a video signal is detected
// and must be manually stopped when no longer needed.
message OnDemandParams {
}

message ScheduleParams {
  // Scheduled time when the stream should automatically start.
  // The streaming infrastructure will be prepared at this time
  // and will begin accepting the video signal.
  google.protobuf.Timestamp start_time = 1 [(required) = true];

  // Scheduled time when the stream should automatically finish.
  // The streaming infrastructure will be shut down at this time
  // and the stream will be marked as FINISHED.
  google.protobuf.Timestamp finish_time = 2 [(required) = true];
}

message CreateStreamMetadata {
  // ID of the stream being created.
  string stream_id = 1;
}

message UpdateStreamRequest {
  // Reserved for future use.
  reserved 8 to 199, 201 to 999;

  // ID of the stream.
  string stream_id = 1 [(required) = true, (length) = "<=50"];

  // Field mask specifying which fields of the stream should be updated.
  // Only fields specified in this mask will be modified;
  // all other fields will retain their current values.
  // This allows for partial updates.
  google.protobuf.FieldMask field_mask = 2 [(required) = true];

  // DEPRECATED.
  string line_id = 3 [(length) = "<=50"];

  // Stream title.
  string title = 4 [(length) = "<=300"];

  // Stream description.
  string description = 5 [(length) = "<=4000"];

  // ID of the thumbnail.
  string thumbnail_id = 6 [(length) = "<=50"];

  // Automatically publish stream when ready.
  // Switches status from READY to ONAIR.
  google.protobuf.BoolValue auto_publish = 7;

  // New custom labels for the stream as `key:value` pairs.
  // Maximum 64 labels per stream.
  // If provided, replaces all existing labels.
  map<string, string> labels = 200 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_.@:/0-9a-zA-Z]*", (map_key).length = "<=63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Stream type.
  oneof stream_type {
    // On demand stream.
    // It starts immediately when a signal appears.
    OnDemandParams on_demand = 1000;

    // Scheduled stream.
    // It starts and finishes at specified time.
    ScheduleParams schedule = 1001;
  }
}

message UpdateStreamMetadata {
  // ID of the stream.
  string stream_id = 1;
}

message DeleteStreamRequest {
  // ID of the stream to delete.
  string stream_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteStreamMetadata {
  // ID of the stream.
  // This identifier can be used to track the stream deletion operation.
  string stream_id = 1;
}

message BatchDeleteStreamsRequest {
  // ID of the channel containing the streams to delete.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // List of stream IDs to delete.
  // All streams must exist in the specified channel.
  repeated string stream_ids = 2 [(size) = "1-100", (length) = "<=50"];
}

message BatchDeleteStreamsMetadata {
  // List of stream IDs being deleted.
  // This list can be used to track which streams are included
  // in the batch deletion operation.
  repeated string stream_ids = 1;
}

message PerformStreamActionRequest {
  reserved 1001;

  // Reserved for future use.
  reserved 2 to 999;

  // ID of the stream on which to perform the action.
  string stream_id = 1 [(required) = true, (length) = "<=50"];

  // Specifies which action to perform on the stream (exactly one must be chosen).
  oneof action {
    option (exactly_one) = true;

    // Publish the stream, changing its status from READY to ONAIR.
    // This makes the stream available for watching.
    PublishAction publish = 1000;

    // Stop the stream, changing its status to FINISHED.
    // This terminates the streaming session and releases resources.
    StopAction stop = 1002;
  }
}

// Parameters for the publish action.
// The action changes the stream's status from READY to ONAIR.
message PublishAction {}

// Parameters for the stop action.
// The action changes the stream's status to FINISHED.
message StopAction {}

message PerformStreamActionMetadata {
  // ID of the stream on which the action is being performed.
  // This identifier can be used to track the action operation
  // and to verify that the action is being applied to the correct stream.
  string stream_id = 1;
}

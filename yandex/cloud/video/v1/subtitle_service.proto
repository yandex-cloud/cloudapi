syntax = "proto3";

import "google/api/annotations.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/video/v1/subtitle.proto";

package yandex.cloud.video.v1;

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;video";
option java_package = "yandex.cloud.api.video.v1";

// Subtitle management service.
service SubtitleService {
  // Return a specific subtitle.
  rpc Get(GetSubtitleRequest) returns (Subtitle) {
    option (google.api.http) = {
      get: "/video/v1/subtitles/{subtitle_id}"
    };
  }

  // List subtitles.
  rpc List(ListSubtitlesRequest) returns (ListSubtitlesResponse) {
    option (google.api.http) = {
      get: "/video/v1/subtitles"
    };
  }

  // Create a new subtitle.
  rpc Create(CreateSubtitleRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/subtitles"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateSubtitleMetadata"
      response: "Subtitle"
    };
  }

  // Generate an upload URL to add a new subtitle file.
  rpc GenerateUploadURL(GenerateSubtitleUploadURLRequest) returns (GenerateSubtitleUploadURLResponse) {
    option (google.api.http) = {
      get: "/video/v1/subtitles/{subtitle_id}:generateUploadURL"
    };
  }

  // Delete a specific subtitle.
  rpc Delete(DeleteSubtitleRequest) returns (operation.Operation) {
    option (google.api.http) = {
      delete: "/video/v1/subtitles/{subtitle_id}"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteSubtitleMetadata"
      response: "google.protobuf.Empty"
    };
  }
}

message GetSubtitleRequest {
  // ID of the subtitle.
  string subtitle_id = 1 [(required) = true, (length) = "<=50"];
}

message ListSubtitlesRequest {
  // Reserved for future use.
  reserved 1 to 99, 102 to 999;

  // The maximum number of the results per page to return.
  int64 page_size = 100 [(value) = "<=1000"];
  // Page token for getting the next page of the result.
  string page_token = 101 [(length) = "<=200"];

  oneof parent_id {
    option (exactly_one) = true;
    // ID of the video.
    string video_id = 1000 [(length) = "<=50"];
  }
}

message ListSubtitlesResponse {
  // Reserved for future use.
  reserved 2 to 99;

  repeated Subtitle subtitles = 1;

  // Token for getting the next page.
  string next_page_token = 100;
}

message CreateSubtitleRequest {
  // Reserved for future use.
  reserved 3 to 999, 1001 to 1099;

  // The language of the subtitles, represented as a three-letter ISO 639 code.
  // Supports ISO 639-2/T (terminological), ISO 639-2/B (bibliographical) variants and ISO 639-3.
  // Valid ISO language code corresponding to the subtitle text must be provided.
  string language = 1;

  // Contains the subtitle label (or title) that will be displayed on screen during video playback.
  // Should provide a concise and accurate representation of the spoken content.
  // If not provided, will be auto-generated based on the specified language.
  string label = 2;

  oneof parent_id {
    option (exactly_one) = true;
    // ID of the video.
    string video_id = 1000 [(length) = "<=50"];
  }

  // Source type.
  oneof source {
    option (exactly_one) = true;
    // Upload subtitle.
    SubtitleUploadParams upload = 1100;
  }
}

message SubtitleUploadParams {
   string filename = 1 [(required) = true];
}

message CreateSubtitleMetadata {
  // ID of the subtitle.
  string subtitle_id = 1;
}

message GenerateSubtitleUploadURLRequest {
  // ID of the subtitle.
  string subtitle_id = 1 [(required) = true, (length) = "<=50"];
}

message GenerateSubtitleUploadURLResponse {
  // Upload url.
  string upload_url = 1;
}

message DeleteSubtitleRequest {
  // ID of the subtitle.
  string subtitle_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteSubtitleMetadata {
  // ID of the subtitle.
  string subtitle_id = 1;
}

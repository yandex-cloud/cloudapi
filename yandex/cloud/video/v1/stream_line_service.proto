syntax = "proto3";

package yandex.cloud.video.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/video/v1/stream_line.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;video";
option java_package = "yandex.cloud.api.video.v1";

// Stream line management service.
// Provides methods for creating, retrieving, updating, and deleting stream lines,
// which define the technical configuration for receiving and processing video signals.
service StreamLineService {
  // Retrieves detailed information about a specific stream line by its ID.
  // Returns all stream line metadata, configuration, and related information.
  rpc Get(GetStreamLineRequest) returns (StreamLine) {
    option (google.api.http) = {
      get: "/video/v1/streamLines/{stream_line_id}"
    };
  }

  // Lists all stream lines in a specific channel with pagination support.
  // Results can be filtered and sorted using the provided parameters.
  rpc List(ListStreamLinesRequest) returns (ListStreamLinesResponse) {
    option (google.api.http) = {
      get: "/video/v1/streamLines"
    };
  }

  // Retrieves multiple stream lines by their IDs in a specific channel in a single request.
  // This is more efficient than making multiple Get requests when retrieving several stream lines.
  rpc BatchGet(BatchGetStreamLinesRequest) returns (BatchGetStreamLinesResponse) {
    option (google.api.http) = {
      post: "/video/v1/streamLines:batchGet"
      body: "*"
    };
  }

  // Creates a new stream line in the specified channel with the provided configuration.
  // Stream lines define the technical settings for receiving and processing video signals.
  rpc Create(CreateStreamLineRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/streamLines"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateStreamLineMetadata"
      response: "StreamLine"
    };
  }

  // Updates an existing stream line's metadata and configuration.
  // Only fields specified in the field_mask will be updated.
  rpc Update(UpdateStreamLineRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/video/v1/streamLines/{stream_line_id}"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateStreamLineMetadata"
      response: "StreamLine"
    };
  }

  // Deletes a specific stream line by its ID.
  rpc Delete(DeleteStreamLineRequest) returns (operation.Operation) {
    option (google.api.http) = {
      delete: "/video/v1/streamLines/{stream_line_id}"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteStreamLineMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Deletes multiple stream lines in a specific channel in a single request.
  // This is more efficient than making multiple Delete requests when removing several stream lines.
  rpc BatchDelete(BatchDeleteStreamLinesRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/streamLines:batchDelete"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "BatchDeleteStreamLinesMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Performs a specific action on a stream line, such as activation or deactivation.
  // Actions change the stream line's state without modifying its configuration.
  rpc PerformAction(PerformLineActionRequest) returns (operation.Operation) {
    option (google.api.http) = {
      post: "/video/v1/streamLines/{stream_line_id}:performAction"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "PerformLineActionMetadata"
      response: "StreamLine"
    };
  }

  // Retrieves the unique stream key for a push-type stream line.
  // This key is used to authenticate when pushing video streams to the platform.
  rpc GetStreamKey(GetStreamKeyRequest) returns (PushStreamKey) {
    option (google.api.http) = {
      get: "/video/v1/streamLines/{stream_line_id}:getStreamKey"
    };
  }

  // Regenerates and updates the stream key for a push-type stream line.
  // This is useful for security purposes when the existing key may be compromised.
  rpc UpdateStreamKey(UpdateStreamKeyRequest) returns (operation.Operation) {
    option (google.api.http) = {
      patch: "/video/v1/streamLines/{stream_line_id}:updateStreamKey"
      body: "*"
    };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateStreamKeyMetadata"
      response: "PushStreamKey"
    };
  }
}

message GetStreamLineRequest {
  // ID of the stream line to retrieve.
  string stream_line_id = 1 [(required) = true, (length) = "<=50"];
}

message ListStreamLinesRequest {
  // Reserved for future use.
  reserved 2 to 99;

  // ID of the channel containing the stream lines to list.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of stream lines to return per page.
  int64 page_size = 100 [(value) = "<=100"];

  // Page token for retrieving the next page of results.
  // This token is obtained from the next_page_token field in the previous ListStreamLinesResponse.
  string page_token = 101 [(length) = "<=15000"];

  // Specifies the ordering of results.
  // Format is "<field> <order>" (e.g., "createdAt desc").
  // Default: "id asc".
  // Supported fields: ["id", "title", "createdAt", "updatedAt"].
  // Both snake_case and camelCase field names are supported.
  string order_by = 102 [(length) = "<=50"];

  // Filter expression to narrow down the list of returned stream lines.
  // Expressions consist of terms connected by logical operators.
  // Values containing spaces or quotes must be enclosed in quotes (`'` or `"`)
  // with inner quotes being backslash-escaped.
  //
  // Supported logical operators: ["AND", "OR"].
  // Supported comparison operators: ["=", "!=", ":"] where ":" enables substring matching.
  // Parentheses can be used to group logical expressions.
  //
  // Example: `title:'main' AND id='line-1'`
  //
  // Filterable fields: ["id", "title"].
  // Both snake_case and camelCase field names are supported.
  string filter = 103 [(length) = "<=1000"];
}

message ListStreamLinesResponse {
  // Reserved for future use.
  reserved 2 to 99;

  // List of stream lines matching the request criteria.
  // May be empty if no stream lines match the criteria or if the channel has no stream lines.
  repeated StreamLine stream_lines = 1;

  // Token for retrieving the next page of results.
  // Empty if there are no more results available.
  string next_page_token = 100;
}

message BatchGetStreamLinesRequest {
  // ID of the channel containing the stream lines to retrieve.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // List of stream line IDs to retrieve.
  repeated string stream_line_ids = 2 [(size) = "1-100", (length) = "<=50"];
}

message BatchGetStreamLinesResponse {
  // List of stream lines matching the requested IDs.
  repeated StreamLine stream_lines = 1;
}

message CreateStreamLineRequest {
  reserved 3;

  // Reserved for future use.
  reserved 4 to 199, 201 to 999, 1001, 1003 to 1999;

  // ID of the channel.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // Line title.
  string title = 2 [(required) = true, (length) = "<=300"];

  // Video signal settings.
  oneof input_params {
    option (exactly_one) = true;

    // RTMP push input type.
    RTMPPushParams rtmp_push = 1000;

    // RTMP pull input type.
    RTMPPullParams rtmp_pull = 1002;
  }

  // Line type.
  oneof line_type_params {
    option (exactly_one) = true;

    // Manual stream control.
    ManualLineParams manual_line = 2000;

    // Automatic stream control.
    AutoLineParams auto_line = 2001;
  }

  // Custom user-defined labels as key:value pairs.
  // Maximum 64 labels per stream line.
  // Keys must be lowercase alphanumeric strings with optional hyphens/underscores.
  // Values can contain alphanumeric characters and various symbols.
  map<string, string> labels = 200 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_.@:/0-9a-zA-Z]*", (map_key).length = "<=63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
}

message CreateStreamLineMetadata {
  // ID of the stream line.
  string stream_line_id = 1;
}

message UpdateStreamLineRequest {
  reserved 4;

  // Reserved for future use.
  reserved 5 to 199, 201 to 999, 1001, 1003 to 1006;

  // ID of the line.
  string stream_line_id = 1 [(required) = true, (length) = "<=50"];

  // Field mask specifying which fields of the stream line should be updated.
  // Only fields specified in this mask will be modified;
  // all other fields will retain their current values.
  // This allows for partial updates.
  google.protobuf.FieldMask field_mask = 2 [(required) = true];

  // Line title.
  string title = 3 [(length) = "<=300"];

  // Video signal settings.
  oneof input_params {
    // RTMP push input type.
    RTMPPushParams rtmp_push = 1000;

    // RTMP pull input type.
    RTMPPullParams rtmp_pull = 1002;
  }

  // New custom labels for the stream line as `key:value` pairs.
  // Maximum 64 labels per stream line.
  // If provided, replaces all existing labels.
  map<string, string> labels = 200 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_.@:/0-9a-zA-Z]*", (map_key).length = "<=63", (map_key).pattern = "[a-z][-_0-9a-z]*"];
}

message UpdateStreamLineMetadata {
  // ID of the stream line.
  string stream_line_id = 1;
}

message DeleteStreamLineRequest {
  // ID of the stream line to delete.
  string stream_line_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteStreamLineMetadata {
  // ID of the stream line.
  // This identifier can be used to track the stream line deletion operation.
  string stream_line_id = 1;
}

message BatchDeleteStreamLinesRequest {
  // ID of the channel containing the stream lines to delete.
  string channel_id = 1 [(required) = true, (length) = "<=50"];

  // List of stream line IDs to delete.
  // All stream lines must exist in the specified channel.
  repeated string stream_line_ids = 2 [(size) = "1-100", (length) = "<=50"];
}

message BatchDeleteStreamLinesMetadata {
  // List of stream line IDs being deleted.
  // This list can be used to track which stream lines are included
  // in the batch deletion operation.
  repeated string stream_line_ids = 1;
}

message PerformLineActionRequest {
  // Reserved for future use.
  reserved 2 to 999;

  // ID of the stream line on which to perform the action.
  string stream_line_id = 1 [(required) = true, (length) = "<=50"];

  // Specifies which action to perform on the stream line.
  oneof action {
    option (exactly_one) = true;

    // Activate the stream line, enabling it to receive and process video signals.
    // This is typically used for automatic stream lines.
    ActivateAction activate = 1000;

    // Deactivate the stream line, disabling it from receiving and processing video signals.
    // This is typically used for automatic stream lines.
    DeactivateAction deactivate = 1001;
  }
}

message PerformLineActionMetadata {
  // ID of the stream line on which the action is being performed.
  // This identifier can be used to track the action operation
  // and to verify that the action is being applied to the correct stream line.
  string stream_line_id = 1;
}

// Parameters for creating an RTMP push input type stream line.
message RTMPPushParams {}

// Parameters for creating an RTMP pull input type stream line.
message RTMPPullParams {
  // The RTMP URL from which to pull the video stream.
  // Must be a valid RTMP URL starting with "rtmp://".
  string url = 1 [(required) = true, (pattern) = "rtmp://.*"];
}

// Parameters for manual stream line.
message ManualLineParams {}

// Parameters for auto stream line.
message AutoLineParams {}

// Parameters for the activate action.
message ActivateAction {}

// Parameters for the deactivate action.
message DeactivateAction {}

message GetStreamKeyRequest {
  // ID of the stream line for which to retrieve the stream key.
  // The stream line must be a push-type input (RTMP push or SRT push).
  string stream_line_id = 1 [(required) = true, (length) = "<=50"];
}

message UpdateStreamKeyRequest {
  // ID of the stream line for which to update the stream key.
  // The stream line must be a push-type input (RTMP push or SRT push).
  string stream_line_id = 1 [(required) = true, (length) = "<=50"];
}

message UpdateStreamKeyMetadata {
  // ID of the stream line.
  string stream_line_id = 1;
}

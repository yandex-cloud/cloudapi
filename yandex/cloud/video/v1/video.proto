syntax = "proto3";

package yandex.cloud.video.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;video";
option java_package = "yandex.cloud.api.video.v1";

// Main entity representing a video in the platform.
message Video {
  reserved 10, 2001, 2002;

  // Reserved for future use.
  reserved 7, 14 to 15, 19 to 99, 102 to 199, 201 to 999, 1001 to 1999;

  // Unique identifier of the video.
  string id = 1;

  // Identifier of the channel where the video is created and managed.
  string channel_id = 2;

  // Title of the video displayed to users in interfaces and players.
  string title = 3;

  // Detailed description of the video content and context.
  string description = 4;

  // Identifier of the thumbnail image used to represent the video visually.
  string thumbnail_id = 5;

  // Current processing status of the video.
  VideoStatus status = 6;

  // Error message describing the reason for video processing failure, if any.
  string error_message = 18;

  // Current visibility status controlling whether the video is publicly available.
  VisibilityStatus visibility_status = 9;

  // Total duration of the video.
  // Optional, may be empty until the transcoding result is ready.
  google.protobuf.Duration duration = 8;

  // Auto-transcoding setting that controls the video processing workflow.
  // Set ENABLE to automatically initiate transcoding after upload,
  // or DISABLE for manual initiation via the Transcode() method.
  AutoTranscode auto_transcode = 11;

  // Identifier of the style preset applied to the video during processing.
  string style_preset_id = 16;

  // Controls the ability to display advertisements for this video.
  // Default: true.
  // Set explicitly to false to disable advertisements for a specific video.
  google.protobuf.BoolValue enable_ad = 17;

  // List of identifiers defining the active subtitles available for the video.
  repeated string subtitle_ids = 12;

  // Additional video processing features and their results, such as summarization.
  VideoFeatures features = 13;

  // Specifies the video upload source method (one source variant must be chosen).
  oneof source {
    // Upload video using the TUS (Tus Resumable Upload Protocol) protocol.
    // @see https://tus.io/
    VideoTUSDSource tusd = 1000;
  }

  // Specifies the video access permission settings.
  oneof access_rights {
    // Allows unrestricted public access to the video via direct link.
    // No additional authorization or access control is applied.
    VideoPublicAccessRights public_access = 2000;

    // Restricts video access using URL signatures for secure time-limited access.
    VideoSignURLAccessRights sign_url_access = 2003;
  }

  // Timestamp when the video was initially created in the system.
  google.protobuf.Timestamp created_at = 100;

  // Timestamp of the last modification to the video or its metadata.
  google.protobuf.Timestamp updated_at = 101;

  // Custom user-defined labels as `key:value` pairs.
  // Maximum 64 labels per video.
  // Labels can be used for organization, filtering, and metadata purposes.
  map<string, string> labels = 200;

  // Current processing status of the video.
  enum VideoStatus {
    reserved 3, 6;

    // The video status is not specified.
    VIDEO_STATUS_UNSPECIFIED = 0;

    // The video upload is in progress, waiting for all bytes to be received.
    WAIT_UPLOADING = 1;

    // The video has been fully uploaded and is ready for transcoding.
    UPLOADED = 2;

    // The video is currently being processed.
    PROCESSING = 4;

    // The video has been successfully processed and is ready for watching.
    READY = 5;

    // An error occurred during video processing.
    ERROR = 7;
  }

  // Visibility status of the video.
  enum VisibilityStatus {
    // The visibility status is not specified.
    VISIBILITY_STATUS_UNSPECIFIED = 0;

    // The video is publicly available, subject to its access permission settings.
    PUBLISHED = 1;

    // The video is available only to administrators.
    UNPUBLISHED = 2;
  }
}

// Represents a video upload source using the TUS (Tus Resumable Upload Protocol) protocol.
// This is a push-based upload method where the client pushes data to the server.
// @see https://tus.io/
message VideoTUSDSource {
  // URL endpoint for uploading the video via the TUS protocol.
  string url = 1;

  // Total size of the uploaded file, in bytes.
  int64 file_size = 2;
}

// Represents public access rights for a video.
// When this access type is set, the video is publicly accessible via direct link.
message VideoPublicAccessRights {}

// Represents access rights controlled by URL signatures.
// When this access type is set, the video is accessible only via properly signed temporary link.
message VideoSignURLAccessRights {}

// Enum controlling whether videos are automatically transcoded after upload.
enum AutoTranscode {
  // The auto-transcoding setting is not specified.
  AUTO_TRANSCODE_UNSPECIFIED = 0;

  // Automatically start transcoding after the video upload is complete.
  ENABLE = 1;

  // Do not automatically transcode; requires manual initiation via the Transcode() method.
  DISABLE = 2;
}

// Contains additional processing features and their results for the video.
message VideoFeatures {
  // Results of the video content summarization process.
  Summary summary = 1;

  // Contains the results of video summarization.
  message Summary {
    reserved 2;

    // Current status of the summarization process.
    FeatureResult result = 1;

    // List of URLs to summarization results for different audio tracks.
    repeated SummaryURL urls = 3;

    // Contains a URL to a summarization result for a specific audio track.
    message SummaryURL {
      // URL to the summarization result file.
      string url = 1;

      // Input audio track index (one-based) that was summarized.
      int64 track_index = 2;

      // Source track language represented as a three-letter code according to ISO 639-2/T.
      string src_lang = 3;
    }
  }

  // Status of a feature processing request.
  enum FeatureResult {
    // The feature result status is not specified.
    FEATURE_RESULT_UNSPECIFIED = 0;

    // The feature processing has not been requested.
    NOT_REQUESTED = 1;

    // The feature is currently being processed.
    PROCESSING = 2;

    // The feature processing has completed successfully.
    SUCCESS = 3;

    // The feature processing has failed.
    FAILED = 4;
  }
}

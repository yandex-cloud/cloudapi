syntax = "proto3";

package yandex.cloud.datatransfer.v1;

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/datatransfer/v1;datatransfer";
option java_package = "yandex.cloud.api.datatransfer.v1";

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/datatransfer/v1/endpoint.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";

// A set of methods for managing [endpoints]({{ api-url-prefix
// }}/data-transfer/concepts/#endpoint).
service EndpointService {
    // Returns the specified endpoint.
    // 
    // To get the list of all available endpoints, make a [List] request.
    rpc Get(GetEndpointRequest) returns (Endpoint) {
        option (google.api.http) = { get: "/v1/endpoint/{endpoint_id}" };
    }
    // Lists endpoints in the specified folder.
    rpc List(ListEndpointsRequest) returns (ListEndpointsResponse) {
        option (google.api.http) = { get: "/v1/endpoints/list/{folder_id}" };
    }
    // Creates an endpoint in the specified folder.
    rpc Create(CreateEndpointRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/endpoint" body: "*" };
        option (api.operation) = {
            metadata: "CreateEndpointMetadata"
            response: "Endpoint"
        };
    }
    // Updates the specified endpoint.
    rpc Update(UpdateEndpointRequest) returns (operation.Operation) {
        option (google.api.http) = { patch: "/v1/endpoint/{endpoint_id}" body: "*" };
        option (api.operation) = {
            metadata: "UpdateEndpointMetadata"
            response: "Endpoint"
        };
    }
    // Deletes the specified endpoint.
    rpc Delete(DeleteEndpointRequest) returns (operation.Operation) {
        option (google.api.http) = { delete: "/v1/endpoint/{endpoint_id}" };
        option (api.operation) = {
            metadata: "DeleteEndpointMetadata"
            response: "google.protobuf.Empty"
        };
    }
}
message GetEndpointRequest {
    // Identifier of the endpoint to return.
    // 
    // To get the endpoint ID, make an [EndpointService.List] request.
    string endpoint_id = 1;
}
message ListEndpointsRequest {
    // Identifier of the folder containing the endpoints to be listed.
    string folder_id = 1;
    // The maximum number of endpoints to be sent in the response message. If the
    // folder contains more endpoints than `page_size`, `next_page_token` will be
    // included
    // in the response message. Include it into the subsequent `ListEndpointRequest` to
    // fetch the next page. Defaults to `100` if not specified. The maximum allowed
    // value
    // for this field is `500`.
    int64 page_size = 2;
    // Opaque value identifying the endpoints page to be fetched. Should be empty in
    // the first `ListEndpointsRequest`. Subsequent requests should have this field
    // filled
    // with the `next_page_token` from the previous `ListEndpointsResponse`.
    string page_token = 3;
}
message ListEndpointsResponse {
    // The list of endpoints. If there are more endpoints in the folder, then
    // `next_page_token` is a non-empty string to be included into the subsequent
    // `ListEndpointsRequest` to fetch the next endpoints page.
    repeated Endpoint endpoints = 1;
    // Opaque value identifying the next endpoints page. This field is empty if there
    // are no more endpoints in the folder. Otherwise, it is non-empty and should be
    // included in the subsequent `ListEndpointsRequest` to fetch the next endpoints
    // page.
    string next_page_token = 2;
}
message CreateEndpointRequest {
    reserved 5 to 51;
    // ID of the folder to create the endpoint in.
    // 
    // To get the folder ID, make a
    // [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    string folder_id = 1;
    // Name of the endpoint.
    // 
    // The name must be unique within the folder.
    string name = 2;
    // Description of the endpoint.
    string description = 3;
    // Endpoint labels as `key:value` pairs.
    // 
    // For details about the concept, see [documentation]({{ api-url-prefix
    // }}/resource-manager/concepts/labels).
    map<string,string> labels = 4;
    EndpointSettings settings = 52;
}
message CreateEndpointMetadata {
    string endpoint_id = 1;
}
message UpdateEndpointRequest {
    reserved 1 to 9, 14 to 51, 53 to 59;
    // Identifier of the endpoint to be updated.
    string endpoint_id = 10;
    // The new endpoint name. Must be unique within the folder.
    string name = 11;
    // The new description for the endpoint.
    string description = 12;
    // Endpoint labels as `key:value` pairs.
    // 
    // For details about the concept, see [documentation]({{ api-url-prefix
    // }}/resource-manager/concepts/labels).
    map<string,string> labels = 13;
    // The new endpoint settings.
    EndpointSettings settings = 52;
    // Field mask specifying endpoint fields to be updated. Semantics for this field is
    // described here:
    // <https://pkg.go.dev/google.golang.org/protobuf/types/known/fieldmaskpb#FieldMask>
    // The only exception: if the repeated field is specified in the mask, then
    // the new value replaces the old one instead of being appended to the old one.
    google.protobuf.FieldMask update_mask = 60;
}
message UpdateEndpointMetadata {
    string endpoint_id = 1;
}
message DeleteEndpointRequest {
    // Identifier of the endpoint to delete.
    // 
    // To get the list of all available endpoints, make a [List] request.
    string endpoint_id = 1;
}
message DeleteEndpointMetadata {
    string endpoint_id = 1;
}

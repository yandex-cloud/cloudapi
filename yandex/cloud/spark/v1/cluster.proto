syntax = "proto3";

package yandex.cloud.spark.v1;

import "yandex/cloud/spark/v1/maintenance.proto";
import "yandex/cloud/validation.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/spark/v1;spark";
option java_package = "yandex.cloud.api.spark.v1";

// Spark cluster.
message Cluster {

  enum Status {

    // Cluster status is unknown
    STATUS_UNKNOWN = 0;

    // Cluster is being created
    CREATING = 1;

    // Cluster is running normally.
    RUNNING = 2;

    // Cluster is being updated.
    UPDATING = 3;

    // Cluster encountered a problem and cannot operate.
    ERROR = 4;

    // Cluster is stopping.
    STOPPING = 5;

    // Cluster is stopped.
    STOPPED = 6;

    // Cluster is starting.
    STARTING = 7;
  }

  // Unique ID of the Spark cluster.
  // This ID is assigned by Cloud in the process of creating a Spark cluster.
  string id = 1 [(required) = true, (length) = "<=50"];

  // ID of the folder that the Spark cluster belongs to.
  string folder_id = 2;

  // The time when the Spark cluster was created.
  google.protobuf.Timestamp created_at = 3;

  // Name of the Spark cluster.
  // The name is unique within the folder. 1-64 characters long.
  string name = 4;

  // Description of the Spark cluster. 0-256 characters long.
  string description = 5;

  map<string, string> labels = 6;

  // Configuration of the Spark cluster.
  ClusterConfig config = 7;

  // Cluster status.
  Status status = 8;

  NetworkConfig network = 9;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 10;

  // Service account that will be used to access a YC resources
  string service_account_id = 11 [(length) = "<=50"];

  // Cloud logging configuration.
  LoggingConfig logging = 12;

  // Aggregated cluster health.
  Health health = 13;

  // UI URLs
  repeated UILink links = 14;

  // Window of maintenance operations.
  MaintenanceWindow maintenance_window = 15;

  // Maintenance operation planned at nearest maintenance_window.
  MaintenanceOperation planned_operation = 16;
}

message ClusterConfig {
  ResourcePools resource_pools = 1 [(required) = true];

  // Configuration for HistoryServer
  HistoryServerConfig history_server = 2;

  // Container custom environment dependencies
  Dependencies dependencies = 3;

  // Metastore Cluster
  Metastore metastore = 4;
}

message UpdateClusterConfigSpec {
  ResourcePools resource_pools = 1;

  // Configuration for HistoryServer
  HistoryServerConfig history_server = 2;

  // Container custom environment dependencies
  Dependencies dependencies = 3;

  // Metastore Cluster
  Metastore metastore = 4;
}

message HistoryServerConfig {
  bool enabled = 1;
}

message NetworkConfig {
  // IDs of VPC network subnets where instances of the cluster are attached.
  repeated string subnet_ids = 1;

  // User security groups
  repeated string security_group_ids = 2;
}

message UpdateNetworkConfigSpec {
  // User security groups.
  repeated string security_group_ids = 1;
}

message ResourcePools {
  ResourcePool driver = 1 [(required) = true];
  ResourcePool executor = 2 [(required) = true];
}

message ResourcePool {
  // ID of the preset for computational resources allocated to a instance (e.g., CPU, memory, etc.).
  string resource_preset_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];

  ScalePolicy scale_policy = 2 [(required) = true];
}

message ScalePolicy {
  oneof scale_type {
    option (exactly_one) = true;
    FixedScale fixed_scale = 1;
    AutoScale auto_scale = 2;
  }

  message FixedScale {
    int64 size = 1 [(value) = "1-100"];
  }

  message AutoScale {
    int64 min_size = 1 [(value) = "0-100"];
    int64 max_size = 2 [(value) = "1-100"];
  }
}

message Dependencies {
  repeated string pip_packages = 1;
  repeated string deb_packages = 2;
}

message Metastore {
  string cluster_id = 1 [(length) = "<=50"];
}

message LoggingConfig {
  bool enabled = 1;

  oneof destination {
    string folder_id = 2 [(pattern) = "([a-zA-Z][-a-zA-Z0-9_.]{0,63})?"];
    string log_group_id = 3 [(pattern) = "([a-zA-Z][-a-zA-Z0-9_.]{0,63})?"];
  }
}

enum Health {

  // Cluster is in unknown state (we have no data).
  HEALTH_UNKNOWN = 0;

  // Cluster is alive and well.
  ALIVE = 1;

  // Cluster is inoperable (it cannot perform any of its essential functions).
  DEAD = 2;

  // Cluster is partially alive (it can perform some of its essential functions).
  DEGRADED = 3;
}

message UILink {
  string name = 1;
  string url = 2;
}

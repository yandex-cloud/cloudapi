syntax = "proto3";

package yandex.cloud.metastore.v1;

import "google/protobuf/timestamp.proto";
import "yandex/cloud/logging/v1/log_entry.proto";
import "yandex/cloud/metastore/v1/maintenance.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/metastore/v1;metastore";
option java_package = "yandex.cloud.api.metastore.v1";

// Metastore Cluster.
message Cluster {
  enum Health {

    // Cluster is in unknown state (we have no data).
    HEALTH_UNKNOWN = 0;

    // Cluster is alive and operates properly.
    ALIVE = 1;

    // Cluster is inoperable (it cannot perform any of its essential functions).
    DEAD = 2;

    // Cluster is partially alive (it can perform some of its essential functions).
    DEGRADED = 3;
  }

  enum Status {

    // Cluster state is unknown.
    STATUS_UNKNOWN = 0;

    // Cluster is being created.
    CREATING = 1;

    // Cluster is running normally.
    RUNNING = 2;

    // Cluster encountered a problem and cannot operate.
    ERROR = 3;

    // Cluster is being updated.
    UPDATING = 4;

    // Cluster is stopping.
    STOPPING = 5;

    // Cluster stopped.
    STOPPED = 6;

    // Cluster is starting.
    STARTING = 7;
  }

  // Unique ID of the Metastore Cluster.
  // This ID is assigned by Cloud in the process of creating a Trino cluster.
  string id = 1;

  // ID of the folder that the Metastore Cluster belongs to.
  string folder_id = 2;

  // The time the Metastore Cluster was created at.
  google.protobuf.Timestamp created_at = 3;

  // Name of the Metastore Cluster.
  // The name is unique within the folder.
  string name = 4;

  // Description of the Metastore Cluster.
  string description = 5;

  // Custom labels for the Metastore Cluster as `` key:value `` pairs.
  map<string, string> labels = 6;

  // Monitoring systems relevant to the Metastore Cluster.
  repeated Monitoring monitoring = 7;

  // Aggregated cluster health.
  Health health = 8;

  // Cluster status.
  Status status = 9;

  reserved 10 to 15;

  // Deletion Protection prevents deletion of the cluster.
  bool deletion_protection = 16;

  // Metastore server version.
  string version = 17;

  // Metastore network ID.
  string network_id = 18;

  // IP address of the Metastore server load balancer.
  string endpoint_ip = 19;

  // Configuration of the Metastore Cluster.
  ClusterConfig cluster_config = 20;

  // Service account used to access Cloud resources.
  string service_account_id = 21;

  // Cloud logging configuration.
  LoggingConfig logging = 22;

  // Network-related configuration options.
  NetworkConfig network = 23;

  // Maintenance window.
  MaintenanceWindow maintenance_window = 24;

  // Maintenance operation scheduled for the nearest maintenance window.
  MaintenanceOperation planned_operation = 25;
}

message Monitoring {
  // Name of the monitoring system.
  string name = 1;

  // Description of the monitoring system.
  string description = 2;

  // Link to the monitoring system.
  string link = 3;
}

message ClusterConfig {
  reserved 1;

  // Configuration for computational resources for Metastore server instances.
  Resources resources = 2;
}

message NetworkConfig {
  // IDs of VPC network subnets where instances of the cluster are attached.
  repeated string subnet_ids = 1;

  // User security groups.
  repeated string security_group_ids = 2;
}

message Resources {
  // ID of the preset for computational resources allocated to an instance (e.g., CPU, memory, etc.).
  string resource_preset_id = 1 [
    (required) = true,
    (length) = "<=50"
  ];
}

message LoggingConfig {
  // Logs generated by the Metastore server are delivered to Cloud Logging.
  bool enabled = 1;

  // Destination of log records.
  oneof destination {
    // Logs will be written to the default log group of the specified folder.
    string folder_id = 2 [(pattern) = "([a-zA-Z][-a-zA-Z0-9_.]{0,63})?"];

    // Logs will be written to the log group specified by its ID.
    string log_group_id = 3 [(pattern) = "([a-zA-Z][-a-zA-Z0-9_.]{0,63})?"];
  }

  // Minimum severity level for log entries.
  //
  // See [LogLevel.Level] for details.
  yandex.cloud.logging.v1.LogLevel.Level min_level = 4;
}
